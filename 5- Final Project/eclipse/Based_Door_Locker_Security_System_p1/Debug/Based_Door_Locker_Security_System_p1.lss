
Based_Door_Locker_Security_System_p1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ee  00800060  00002f6a  00002ffe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  0080014e  0080014e  000030ec  2**0
                  ALLOC
  3 .stab         00003138  00000000  00000000  000030ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001c95  00000000  00000000  00006224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007eb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008169  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009db2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ac9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ba4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bbac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000be39  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c607  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 80 07 	jmp	0xf00	; 0xf00 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 e7 06 	jmp	0xdce	; 0xdce <__vector_6>
      1c:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e6       	ldi	r30, 0x6A	; 106
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 34       	cpi	r26, 0x4E	; 78
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e4       	ldi	r26, 0x4E	; 78
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 36       	cpi	r26, 0x61	; 97
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c2 12 	call	0x2584	; 0x2584 <main>
      8a:	0c 94 b3 17 	jmp	0x2f66	; 0x2f66 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 37 17 	jmp	0x2e6e	; 0x2e6e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e3       	ldi	r26, 0x3E	; 62
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 53 17 	jmp	0x2ea6	; 0x2ea6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 43 17 	jmp	0x2e86	; 0x2e86 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5f 17 	jmp	0x2ebe	; 0x2ebe <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 43 17 	jmp	0x2e86	; 0x2e86 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5f 17 	jmp	0x2ebe	; 0x2ebe <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 37 17 	jmp	0x2e6e	; 0x2e6e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e3       	ldi	r24, 0x3E	; 62
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 53 17 	jmp	0x2ea6	; 0x2ea6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 43 17 	jmp	0x2e86	; 0x2e86 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 5f 17 	jmp	0x2ebe	; 0x2ebe <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 43 17 	jmp	0x2e86	; 0x2e86 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 5f 17 	jmp	0x2ebe	; 0x2ebe <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 43 17 	jmp	0x2e86	; 0x2e86 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 5f 17 	jmp	0x2ebe	; 0x2ebe <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 47 17 	jmp	0x2e8e	; 0x2e8e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 63 17 	jmp	0x2ec6	; 0x2ec6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(uint32 baud_rate)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <UART_init+0x8>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <UART_init+0xa>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	6b 83       	std	Y+3, r22	; 0x03
     b56:	7c 83       	std	Y+4, r23	; 0x04
     b58:	8d 83       	std	Y+5, r24	; 0x05
     b5a:	9e 83       	std	Y+6, r25	; 0x06
	uint16 ubrr_value = 0;
     b5c:	1a 82       	std	Y+2, r1	; 0x02
     b5e:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA_REG = (1<<U2X);
     b60:	eb e2       	ldi	r30, 0x2B	; 43
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	82 e0       	ldi	r24, 0x02	; 2
     b66:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB_REG = (1<<RXEN) | (1<<TXEN);
     b68:	ea e2       	ldi	r30, 0x2A	; 42
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	88 e1       	ldi	r24, 0x18	; 24
     b6e:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC_REG = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
     b70:	e0 e4       	ldi	r30, 0x40	; 64
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	86 e8       	ldi	r24, 0x86	; 134
     b76:	80 83       	st	Z, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
     b78:	8b 81       	ldd	r24, Y+3	; 0x03
     b7a:	9c 81       	ldd	r25, Y+4	; 0x04
     b7c:	ad 81       	ldd	r26, Y+5	; 0x05
     b7e:	be 81       	ldd	r27, Y+6	; 0x06
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	aa 1f       	adc	r26, r26
     b86:	bb 1f       	adc	r27, r27
     b88:	88 0f       	add	r24, r24
     b8a:	99 1f       	adc	r25, r25
     b8c:	aa 1f       	adc	r26, r26
     b8e:	bb 1f       	adc	r27, r27
     b90:	88 0f       	add	r24, r24
     b92:	99 1f       	adc	r25, r25
     b94:	aa 1f       	adc	r26, r26
     b96:	bb 1f       	adc	r27, r27
     b98:	9c 01       	movw	r18, r24
     b9a:	ad 01       	movw	r20, r26
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	92 e1       	ldi	r25, 0x12	; 18
     ba0:	aa e7       	ldi	r26, 0x7A	; 122
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	bc 01       	movw	r22, r24
     ba6:	cd 01       	movw	r24, r26
     ba8:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <__udivmodsi4>
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	01 97       	sbiw	r24, 0x01	; 1
     bb2:	9a 83       	std	Y+2, r25	; 0x02
     bb4:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH_REG = ubrr_value>>8;
     bb6:	e0 e4       	ldi	r30, 0x40	; 64
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	9a 81       	ldd	r25, Y+2	; 0x02
     bbe:	89 2f       	mov	r24, r25
     bc0:	99 27       	eor	r25, r25
     bc2:	80 83       	st	Z, r24
	UBRRL_REG = ubrr_value;
     bc4:	e9 e2       	ldi	r30, 0x29	; 41
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	80 83       	st	Z, r24
}
     bcc:	26 96       	adiw	r28, 0x06	; 6
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	f8 94       	cli
     bd2:	de bf       	out	0x3e, r29	; 62
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	cd bf       	out	0x3d, r28	; 61
     bd8:	cf 91       	pop	r28
     bda:	df 91       	pop	r29
     bdc:	08 95       	ret

00000bde <UART_sendByte>:

void UART_sendByte(const uint8 data)
{
     bde:	df 93       	push	r29
     be0:	cf 93       	push	r28
     be2:	0f 92       	push	r0
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
     be8:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA_REG, UDRE)){}
     bea:	eb e2       	ldi	r30, 0x2B	; 43
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	88 2f       	mov	r24, r24
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	80 72       	andi	r24, 0x20	; 32
     bf6:	90 70       	andi	r25, 0x00	; 0
     bf8:	00 97       	sbiw	r24, 0x00	; 0
     bfa:	b9 f3       	breq	.-18     	; 0xbea <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR_REG = data;
     bfc:	ec e2       	ldi	r30, 0x2C	; 44
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	89 81       	ldd	r24, Y+1	; 0x01
     c02:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
     c04:	0f 90       	pop	r0
     c06:	cf 91       	pop	r28
     c08:	df 91       	pop	r29
     c0a:	08 95       	ret

00000c0c <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
     c0c:	df 93       	push	r29
     c0e:	cf 93       	push	r28
     c10:	cd b7       	in	r28, 0x3d	; 61
     c12:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA_REG, RXC)){}
     c14:	eb e2       	ldi	r30, 0x2B	; 43
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	88 23       	and	r24, r24
     c1c:	dc f7       	brge	.-10     	; 0xc14 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR_REG;
     c1e:	ec e2       	ldi	r30, 0x2C	; 44
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
}
     c24:	cf 91       	pop	r28
     c26:	df 91       	pop	r29
     c28:	08 95       	ret

00000c2a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
     c2a:	df 93       	push	r29
     c2c:	cf 93       	push	r28
     c2e:	00 d0       	rcall	.+0      	; 0xc30 <UART_sendString+0x6>
     c30:	0f 92       	push	r0
     c32:	cd b7       	in	r28, 0x3d	; 61
     c34:	de b7       	in	r29, 0x3e	; 62
     c36:	9b 83       	std	Y+3, r25	; 0x03
     c38:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     c3a:	19 82       	std	Y+1, r1	; 0x01
     c3c:	0e c0       	rjmp	.+28     	; 0xc5a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	28 2f       	mov	r18, r24
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	8a 81       	ldd	r24, Y+2	; 0x02
     c46:	9b 81       	ldd	r25, Y+3	; 0x03
     c48:	fc 01       	movw	r30, r24
     c4a:	e2 0f       	add	r30, r18
     c4c:	f3 1f       	adc	r31, r19
     c4e:	80 81       	ld	r24, Z
     c50:	0e 94 ef 05 	call	0xbde	; 0xbde <UART_sendByte>
		i++;
     c54:	89 81       	ldd	r24, Y+1	; 0x01
     c56:	8f 5f       	subi	r24, 0xFF	; 255
     c58:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	28 2f       	mov	r18, r24
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	8a 81       	ldd	r24, Y+2	; 0x02
     c62:	9b 81       	ldd	r25, Y+3	; 0x03
     c64:	fc 01       	movw	r30, r24
     c66:	e2 0f       	add	r30, r18
     c68:	f3 1f       	adc	r31, r19
     c6a:	80 81       	ld	r24, Z
     c6c:	88 23       	and	r24, r24
     c6e:	39 f7       	brne	.-50     	; 0xc3e <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
     c74:	0f 90       	pop	r0
     c76:	cf 91       	pop	r28
     c78:	df 91       	pop	r29
     c7a:	08 95       	ret

00000c7c <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
     c7c:	0f 93       	push	r16
     c7e:	1f 93       	push	r17
     c80:	df 93       	push	r29
     c82:	cf 93       	push	r28
     c84:	00 d0       	rcall	.+0      	; 0xc86 <UART_receiveString+0xa>
     c86:	0f 92       	push	r0
     c88:	cd b7       	in	r28, 0x3d	; 61
     c8a:	de b7       	in	r29, 0x3e	; 62
     c8c:	9b 83       	std	Y+3, r25	; 0x03
     c8e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     c90:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	28 2f       	mov	r18, r24
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	9b 81       	ldd	r25, Y+3	; 0x03
     c9c:	8c 01       	movw	r16, r24
     c9e:	02 0f       	add	r16, r18
     ca0:	13 1f       	adc	r17, r19
     ca2:	0e 94 06 06 	call	0xc0c	; 0xc0c <UART_recieveByte>
     ca6:	f8 01       	movw	r30, r16
     ca8:	80 83       	st	Z, r24
     caa:	0f c0       	rjmp	.+30     	; 0xcca <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	8f 5f       	subi	r24, 0xFF	; 255
     cb0:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	9b 81       	ldd	r25, Y+3	; 0x03
     cbc:	8c 01       	movw	r16, r24
     cbe:	02 0f       	add	r16, r18
     cc0:	13 1f       	adc	r17, r19
     cc2:	0e 94 06 06 	call	0xc0c	; 0xc0c <UART_recieveByte>
     cc6:	f8 01       	movw	r30, r16
     cc8:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	28 2f       	mov	r18, r24
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	8a 81       	ldd	r24, Y+2	; 0x02
     cd2:	9b 81       	ldd	r25, Y+3	; 0x03
     cd4:	fc 01       	movw	r30, r24
     cd6:	e2 0f       	add	r30, r18
     cd8:	f3 1f       	adc	r31, r19
     cda:	80 81       	ld	r24, Z
     cdc:	83 32       	cpi	r24, 0x23	; 35
     cde:	31 f7       	brne	.-52     	; 0xcac <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	8a 81       	ldd	r24, Y+2	; 0x02
     ce8:	9b 81       	ldd	r25, Y+3	; 0x03
     cea:	fc 01       	movw	r30, r24
     cec:	e2 0f       	add	r30, r18
     cee:	f3 1f       	adc	r31, r19
     cf0:	10 82       	st	Z, r1
}
     cf2:	0f 90       	pop	r0
     cf4:	0f 90       	pop	r0
     cf6:	0f 90       	pop	r0
     cf8:	cf 91       	pop	r28
     cfa:	df 91       	pop	r29
     cfc:	1f 91       	pop	r17
     cfe:	0f 91       	pop	r16
     d00:	08 95       	ret

00000d02 <TIMER0_CAPT_vect>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
/* Timer 0 Capture Interrupt Service Routine */
ISR(TIMER0_CAPT_vect)
{
     d02:	1f 92       	push	r1
     d04:	0f 92       	push	r0
     d06:	0f b6       	in	r0, 0x3f	; 63
     d08:	0f 92       	push	r0
     d0a:	11 24       	eor	r1, r1
     d0c:	2f 93       	push	r18
     d0e:	3f 93       	push	r19
     d10:	4f 93       	push	r20
     d12:	5f 93       	push	r21
     d14:	6f 93       	push	r22
     d16:	7f 93       	push	r23
     d18:	8f 93       	push	r24
     d1a:	9f 93       	push	r25
     d1c:	af 93       	push	r26
     d1e:	bf 93       	push	r27
     d20:	ef 93       	push	r30
     d22:	ff 93       	push	r31
     d24:	df 93       	push	r29
     d26:	cf 93       	push	r28
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer0 != NULL_PTR)
     d2c:	80 91 4e 01 	lds	r24, 0x014E
     d30:	90 91 4f 01 	lds	r25, 0x014F
     d34:	00 97       	sbiw	r24, 0x00	; 0
     d36:	29 f0       	breq	.+10     	; 0xd42 <TIMER0_CAPT_vect+0x40>
	{
		(*g_callBackPtr_timer0)();
     d38:	e0 91 4e 01 	lds	r30, 0x014E
     d3c:	f0 91 4f 01 	lds	r31, 0x014F
     d40:	09 95       	icall
	}
}
     d42:	cf 91       	pop	r28
     d44:	df 91       	pop	r29
     d46:	ff 91       	pop	r31
     d48:	ef 91       	pop	r30
     d4a:	bf 91       	pop	r27
     d4c:	af 91       	pop	r26
     d4e:	9f 91       	pop	r25
     d50:	8f 91       	pop	r24
     d52:	7f 91       	pop	r23
     d54:	6f 91       	pop	r22
     d56:	5f 91       	pop	r21
     d58:	4f 91       	pop	r20
     d5a:	3f 91       	pop	r19
     d5c:	2f 91       	pop	r18
     d5e:	0f 90       	pop	r0
     d60:	0f be       	out	0x3f, r0	; 63
     d62:	0f 90       	pop	r0
     d64:	1f 90       	pop	r1
     d66:	18 95       	reti

00000d68 <__vector_10>:

/* Timer 0 Compare Match Interrupt Service Routine */
ISR(TIMER0_COMP_vect)
{
     d68:	1f 92       	push	r1
     d6a:	0f 92       	push	r0
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	0f 92       	push	r0
     d70:	11 24       	eor	r1, r1
     d72:	2f 93       	push	r18
     d74:	3f 93       	push	r19
     d76:	4f 93       	push	r20
     d78:	5f 93       	push	r21
     d7a:	6f 93       	push	r22
     d7c:	7f 93       	push	r23
     d7e:	8f 93       	push	r24
     d80:	9f 93       	push	r25
     d82:	af 93       	push	r26
     d84:	bf 93       	push	r27
     d86:	ef 93       	push	r30
     d88:	ff 93       	push	r31
     d8a:	df 93       	push	r29
     d8c:	cf 93       	push	r28
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer0 != NULL_PTR)
     d92:	80 91 4e 01 	lds	r24, 0x014E
     d96:	90 91 4f 01 	lds	r25, 0x014F
     d9a:	00 97       	sbiw	r24, 0x00	; 0
     d9c:	29 f0       	breq	.+10     	; 0xda8 <__vector_10+0x40>
	{
		(*g_callBackPtr_timer0)();
     d9e:	e0 91 4e 01 	lds	r30, 0x014E
     da2:	f0 91 4f 01 	lds	r31, 0x014F
     da6:	09 95       	icall
	}
}
     da8:	cf 91       	pop	r28
     daa:	df 91       	pop	r29
     dac:	ff 91       	pop	r31
     dae:	ef 91       	pop	r30
     db0:	bf 91       	pop	r27
     db2:	af 91       	pop	r26
     db4:	9f 91       	pop	r25
     db6:	8f 91       	pop	r24
     db8:	7f 91       	pop	r23
     dba:	6f 91       	pop	r22
     dbc:	5f 91       	pop	r21
     dbe:	4f 91       	pop	r20
     dc0:	3f 91       	pop	r19
     dc2:	2f 91       	pop	r18
     dc4:	0f 90       	pop	r0
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	0f 90       	pop	r0
     dca:	1f 90       	pop	r1
     dcc:	18 95       	reti

00000dce <__vector_6>:

/* Timer 1 Capture Interrupt Service Routine */
ISR(TIMER1_CAPT_vect)
{
     dce:	1f 92       	push	r1
     dd0:	0f 92       	push	r0
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	0f 92       	push	r0
     dd6:	11 24       	eor	r1, r1
     dd8:	2f 93       	push	r18
     dda:	3f 93       	push	r19
     ddc:	4f 93       	push	r20
     dde:	5f 93       	push	r21
     de0:	6f 93       	push	r22
     de2:	7f 93       	push	r23
     de4:	8f 93       	push	r24
     de6:	9f 93       	push	r25
     de8:	af 93       	push	r26
     dea:	bf 93       	push	r27
     dec:	ef 93       	push	r30
     dee:	ff 93       	push	r31
     df0:	df 93       	push	r29
     df2:	cf 93       	push	r28
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer1 != NULL_PTR)
     df8:	80 91 50 01 	lds	r24, 0x0150
     dfc:	90 91 51 01 	lds	r25, 0x0151
     e00:	00 97       	sbiw	r24, 0x00	; 0
     e02:	29 f0       	breq	.+10     	; 0xe0e <__vector_6+0x40>
	{
		(*g_callBackPtr_timer1)();
     e04:	e0 91 50 01 	lds	r30, 0x0150
     e08:	f0 91 51 01 	lds	r31, 0x0151
     e0c:	09 95       	icall
	}
}
     e0e:	cf 91       	pop	r28
     e10:	df 91       	pop	r29
     e12:	ff 91       	pop	r31
     e14:	ef 91       	pop	r30
     e16:	bf 91       	pop	r27
     e18:	af 91       	pop	r26
     e1a:	9f 91       	pop	r25
     e1c:	8f 91       	pop	r24
     e1e:	7f 91       	pop	r23
     e20:	6f 91       	pop	r22
     e22:	5f 91       	pop	r21
     e24:	4f 91       	pop	r20
     e26:	3f 91       	pop	r19
     e28:	2f 91       	pop	r18
     e2a:	0f 90       	pop	r0
     e2c:	0f be       	out	0x3f, r0	; 63
     e2e:	0f 90       	pop	r0
     e30:	1f 90       	pop	r1
     e32:	18 95       	reti

00000e34 <__vector_7>:

/* Timer 1 Compare Match Interrupt Service Routine */
ISR(TIMER1_COMPA_vect)
{
     e34:	1f 92       	push	r1
     e36:	0f 92       	push	r0
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	0f 92       	push	r0
     e3c:	11 24       	eor	r1, r1
     e3e:	2f 93       	push	r18
     e40:	3f 93       	push	r19
     e42:	4f 93       	push	r20
     e44:	5f 93       	push	r21
     e46:	6f 93       	push	r22
     e48:	7f 93       	push	r23
     e4a:	8f 93       	push	r24
     e4c:	9f 93       	push	r25
     e4e:	af 93       	push	r26
     e50:	bf 93       	push	r27
     e52:	ef 93       	push	r30
     e54:	ff 93       	push	r31
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer1 != NULL_PTR)
     e5e:	80 91 50 01 	lds	r24, 0x0150
     e62:	90 91 51 01 	lds	r25, 0x0151
     e66:	00 97       	sbiw	r24, 0x00	; 0
     e68:	29 f0       	breq	.+10     	; 0xe74 <__vector_7+0x40>
	{
		(*g_callBackPtr_timer1)();
     e6a:	e0 91 50 01 	lds	r30, 0x0150
     e6e:	f0 91 51 01 	lds	r31, 0x0151
     e72:	09 95       	icall
	}
}
     e74:	cf 91       	pop	r28
     e76:	df 91       	pop	r29
     e78:	ff 91       	pop	r31
     e7a:	ef 91       	pop	r30
     e7c:	bf 91       	pop	r27
     e7e:	af 91       	pop	r26
     e80:	9f 91       	pop	r25
     e82:	8f 91       	pop	r24
     e84:	7f 91       	pop	r23
     e86:	6f 91       	pop	r22
     e88:	5f 91       	pop	r21
     e8a:	4f 91       	pop	r20
     e8c:	3f 91       	pop	r19
     e8e:	2f 91       	pop	r18
     e90:	0f 90       	pop	r0
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	0f 90       	pop	r0
     e96:	1f 90       	pop	r1
     e98:	18 95       	reti

00000e9a <TIMER2_CAPT_vect>:

/* Timer 2 Capture Interrupt Service Routine */
ISR(TIMER2_CAPT_vect)
{
     e9a:	1f 92       	push	r1
     e9c:	0f 92       	push	r0
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	0f 92       	push	r0
     ea2:	11 24       	eor	r1, r1
     ea4:	2f 93       	push	r18
     ea6:	3f 93       	push	r19
     ea8:	4f 93       	push	r20
     eaa:	5f 93       	push	r21
     eac:	6f 93       	push	r22
     eae:	7f 93       	push	r23
     eb0:	8f 93       	push	r24
     eb2:	9f 93       	push	r25
     eb4:	af 93       	push	r26
     eb6:	bf 93       	push	r27
     eb8:	ef 93       	push	r30
     eba:	ff 93       	push	r31
     ebc:	df 93       	push	r29
     ebe:	cf 93       	push	r28
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer2 != NULL_PTR)
     ec4:	80 91 52 01 	lds	r24, 0x0152
     ec8:	90 91 53 01 	lds	r25, 0x0153
     ecc:	00 97       	sbiw	r24, 0x00	; 0
     ece:	29 f0       	breq	.+10     	; 0xeda <TIMER2_CAPT_vect+0x40>
	{
		(*g_callBackPtr_timer2)();
     ed0:	e0 91 52 01 	lds	r30, 0x0152
     ed4:	f0 91 53 01 	lds	r31, 0x0153
     ed8:	09 95       	icall
	}
}
     eda:	cf 91       	pop	r28
     edc:	df 91       	pop	r29
     ede:	ff 91       	pop	r31
     ee0:	ef 91       	pop	r30
     ee2:	bf 91       	pop	r27
     ee4:	af 91       	pop	r26
     ee6:	9f 91       	pop	r25
     ee8:	8f 91       	pop	r24
     eea:	7f 91       	pop	r23
     eec:	6f 91       	pop	r22
     eee:	5f 91       	pop	r21
     ef0:	4f 91       	pop	r20
     ef2:	3f 91       	pop	r19
     ef4:	2f 91       	pop	r18
     ef6:	0f 90       	pop	r0
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	0f 90       	pop	r0
     efc:	1f 90       	pop	r1
     efe:	18 95       	reti

00000f00 <__vector_4>:

/* Timer 2 Compare Match Interrupt Service Routine */
ISR(TIMER2_COMP_vect)
{
     f00:	1f 92       	push	r1
     f02:	0f 92       	push	r0
     f04:	0f b6       	in	r0, 0x3f	; 63
     f06:	0f 92       	push	r0
     f08:	11 24       	eor	r1, r1
     f0a:	2f 93       	push	r18
     f0c:	3f 93       	push	r19
     f0e:	4f 93       	push	r20
     f10:	5f 93       	push	r21
     f12:	6f 93       	push	r22
     f14:	7f 93       	push	r23
     f16:	8f 93       	push	r24
     f18:	9f 93       	push	r25
     f1a:	af 93       	push	r26
     f1c:	bf 93       	push	r27
     f1e:	ef 93       	push	r30
     f20:	ff 93       	push	r31
     f22:	df 93       	push	r29
     f24:	cf 93       	push	r28
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer2 != NULL_PTR)
     f2a:	80 91 52 01 	lds	r24, 0x0152
     f2e:	90 91 53 01 	lds	r25, 0x0153
     f32:	00 97       	sbiw	r24, 0x00	; 0
     f34:	29 f0       	breq	.+10     	; 0xf40 <__vector_4+0x40>
	{
		(*g_callBackPtr_timer2)();
     f36:	e0 91 52 01 	lds	r30, 0x0152
     f3a:	f0 91 53 01 	lds	r31, 0x0153
     f3e:	09 95       	icall
	}
}
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	ff 91       	pop	r31
     f46:	ef 91       	pop	r30
     f48:	bf 91       	pop	r27
     f4a:	af 91       	pop	r26
     f4c:	9f 91       	pop	r25
     f4e:	8f 91       	pop	r24
     f50:	7f 91       	pop	r23
     f52:	6f 91       	pop	r22
     f54:	5f 91       	pop	r21
     f56:	4f 91       	pop	r20
     f58:	3f 91       	pop	r19
     f5a:	2f 91       	pop	r18
     f5c:	0f 90       	pop	r0
     f5e:	0f be       	out	0x3f, r0	; 63
     f60:	0f 90       	pop	r0
     f62:	1f 90       	pop	r1
     f64:	18 95       	reti

00000f66 <Timer_setCallBack>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type timer_ID)
{
     f66:	df 93       	push	r29
     f68:	cf 93       	push	r28
     f6a:	00 d0       	rcall	.+0      	; 0xf6c <Timer_setCallBack+0x6>
     f6c:	00 d0       	rcall	.+0      	; 0xf6e <Timer_setCallBack+0x8>
     f6e:	0f 92       	push	r0
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
     f74:	9a 83       	std	Y+2, r25	; 0x02
     f76:	89 83       	std	Y+1, r24	; 0x01
     f78:	6b 83       	std	Y+3, r22	; 0x03
	switch (timer_ID)
     f7a:	8b 81       	ldd	r24, Y+3	; 0x03
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	3d 83       	std	Y+5, r19	; 0x05
     f82:	2c 83       	std	Y+4, r18	; 0x04
     f84:	8c 81       	ldd	r24, Y+4	; 0x04
     f86:	9d 81       	ldd	r25, Y+5	; 0x05
     f88:	81 30       	cpi	r24, 0x01	; 1
     f8a:	91 05       	cpc	r25, r1
     f8c:	81 f0       	breq	.+32     	; 0xfae <Timer_setCallBack+0x48>
     f8e:	2c 81       	ldd	r18, Y+4	; 0x04
     f90:	3d 81       	ldd	r19, Y+5	; 0x05
     f92:	22 30       	cpi	r18, 0x02	; 2
     f94:	31 05       	cpc	r19, r1
     f96:	91 f0       	breq	.+36     	; 0xfbc <Timer_setCallBack+0x56>
     f98:	8c 81       	ldd	r24, Y+4	; 0x04
     f9a:	9d 81       	ldd	r25, Y+5	; 0x05
     f9c:	00 97       	sbiw	r24, 0x00	; 0
     f9e:	a1 f4       	brne	.+40     	; 0xfc8 <Timer_setCallBack+0x62>
	{
	case TIMER0:
		g_callBackPtr_timer0 = a_ptr;  /* Set the callback for Timer 0 */
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	9a 81       	ldd	r25, Y+2	; 0x02
     fa4:	90 93 4f 01 	sts	0x014F, r25
     fa8:	80 93 4e 01 	sts	0x014E, r24
     fac:	0d c0       	rjmp	.+26     	; 0xfc8 <Timer_setCallBack+0x62>
		break;
	case TIMER1:
		g_callBackPtr_timer1 = a_ptr;  /* Set the callback for Timer 1 */
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	9a 81       	ldd	r25, Y+2	; 0x02
     fb2:	90 93 51 01 	sts	0x0151, r25
     fb6:	80 93 50 01 	sts	0x0150, r24
     fba:	06 c0       	rjmp	.+12     	; 0xfc8 <Timer_setCallBack+0x62>
		break;
	case TIMER2:
		g_callBackPtr_timer2 = a_ptr;  /* Set the callback for Timer 2 */
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	9a 81       	ldd	r25, Y+2	; 0x02
     fc0:	90 93 53 01 	sts	0x0153, r25
     fc4:	80 93 52 01 	sts	0x0152, r24
		break;
	default:
		break;
	}
}
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	0f 90       	pop	r0
     fd2:	cf 91       	pop	r28
     fd4:	df 91       	pop	r29
     fd6:	08 95       	ret

00000fd8 <Timer_init>:

void Timer_init(const Timer_ConfigType * Config_Ptr)
{
     fd8:	df 93       	push	r29
     fda:	cf 93       	push	r28
     fdc:	00 d0       	rcall	.+0      	; 0xfde <Timer_init+0x6>
     fde:	00 d0       	rcall	.+0      	; 0xfe0 <Timer_init+0x8>
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
     fe4:	9a 83       	std	Y+2, r25	; 0x02
     fe6:	89 83       	std	Y+1, r24	; 0x01
	/* Initialize the timer counter based on the timer ID */
	switch (Config_Ptr->timer_ID)
     fe8:	e9 81       	ldd	r30, Y+1	; 0x01
     fea:	fa 81       	ldd	r31, Y+2	; 0x02
     fec:	84 81       	ldd	r24, Z+4	; 0x04
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	3c 83       	std	Y+4, r19	; 0x04
     ff4:	2b 83       	std	Y+3, r18	; 0x03
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	9c 81       	ldd	r25, Y+4	; 0x04
     ffa:	81 30       	cpi	r24, 0x01	; 1
     ffc:	91 05       	cpc	r25, r1
     ffe:	c1 f1       	breq	.+112    	; 0x1070 <Timer_init+0x98>
    1000:	2b 81       	ldd	r18, Y+3	; 0x03
    1002:	3c 81       	ldd	r19, Y+4	; 0x04
    1004:	22 30       	cpi	r18, 0x02	; 2
    1006:	31 05       	cpc	r19, r1
    1008:	09 f4       	brne	.+2      	; 0x100c <Timer_init+0x34>
    100a:	6e c0       	rjmp	.+220    	; 0x10e8 <Timer_init+0x110>
    100c:	8b 81       	ldd	r24, Y+3	; 0x03
    100e:	9c 81       	ldd	r25, Y+4	; 0x04
    1010:	00 97       	sbiw	r24, 0x00	; 0
    1012:	09 f0       	breq	.+2      	; 0x1016 <Timer_init+0x3e>
    1014:	95 c0       	rjmp	.+298    	; 0x1140 <Timer_init+0x168>
	{
	case TIMER0:
		TCNT0 = Config_Ptr->timer_InitialValue;	/* Set initial value for Timer 0 */
    1016:	a2 e5       	ldi	r26, 0x52	; 82
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e9 81       	ldd	r30, Y+1	; 0x01
    101c:	fa 81       	ldd	r31, Y+2	; 0x02
    101e:	80 81       	ld	r24, Z
    1020:	91 81       	ldd	r25, Z+1	; 0x01
    1022:	8c 93       	st	X, r24
		if (Config_Ptr->timer_mode == TIMER_COMP_MODE)
    1024:	e9 81       	ldd	r30, Y+1	; 0x01
    1026:	fa 81       	ldd	r31, Y+2	; 0x02
    1028:	86 81       	ldd	r24, Z+6	; 0x06
    102a:	81 30       	cpi	r24, 0x01	; 1
    102c:	79 f4       	brne	.+30     	; 0x104c <Timer_init+0x74>
		{
			OCR0 = Config_Ptr->timer_compare_value;	/* Set compare value for Timer 0 */
    102e:	ac e5       	ldi	r26, 0x5C	; 92
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e9 81       	ldd	r30, Y+1	; 0x01
    1034:	fa 81       	ldd	r31, Y+2	; 0x02
    1036:	82 81       	ldd	r24, Z+2	; 0x02
    1038:	93 81       	ldd	r25, Z+3	; 0x03
    103a:	8c 93       	st	X, r24
			TIMSK |= (1<<OCIE0);		/* Enable Timer 0 Compare Match Interrupt */
    103c:	a9 e5       	ldi	r26, 0x59	; 89
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e9 e5       	ldi	r30, 0x59	; 89
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	82 60       	ori	r24, 0x02	; 2
    1048:	8c 93       	st	X, r24
    104a:	07 c0       	rjmp	.+14     	; 0x105a <Timer_init+0x82>
		}
		else
		{
			TIMSK |= (1<<TOIE0);		/* Enable Timer 0 Overflow Interrupt */
    104c:	a9 e5       	ldi	r26, 0x59	; 89
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e9 e5       	ldi	r30, 0x59	; 89
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	81 60       	ori	r24, 0x01	; 1
    1058:	8c 93       	st	X, r24
		}
		TCCR0 |= (Config_Ptr->prescaler);		/* Set prescaler for Timer 0 */
    105a:	a3 e5       	ldi	r26, 0x53	; 83
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e3 e5       	ldi	r30, 0x53	; 83
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	90 81       	ld	r25, Z
    1064:	e9 81       	ldd	r30, Y+1	; 0x01
    1066:	fa 81       	ldd	r31, Y+2	; 0x02
    1068:	85 81       	ldd	r24, Z+5	; 0x05
    106a:	89 2b       	or	r24, r25
    106c:	8c 93       	st	X, r24
    106e:	68 c0       	rjmp	.+208    	; 0x1140 <Timer_init+0x168>
		break;

	case TIMER1:
		TCNT1 = Config_Ptr->timer_InitialValue;	/* Set initial value for Timer 1 */
    1070:	ac e4       	ldi	r26, 0x4C	; 76
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	e9 81       	ldd	r30, Y+1	; 0x01
    1076:	fa 81       	ldd	r31, Y+2	; 0x02
    1078:	80 81       	ld	r24, Z
    107a:	91 81       	ldd	r25, Z+1	; 0x01
    107c:	11 96       	adiw	r26, 0x01	; 1
    107e:	9c 93       	st	X, r25
    1080:	8e 93       	st	-X, r24
		if (Config_Ptr->timer_mode == TIMER_COMP_MODE)
    1082:	e9 81       	ldd	r30, Y+1	; 0x01
    1084:	fa 81       	ldd	r31, Y+2	; 0x02
    1086:	86 81       	ldd	r24, Z+6	; 0x06
    1088:	81 30       	cpi	r24, 0x01	; 1
    108a:	c1 f4       	brne	.+48     	; 0x10bc <Timer_init+0xe4>
		{
			OCR1A = Config_Ptr->timer_compare_value;	/* Set compare value for Timer 1 */
    108c:	aa e4       	ldi	r26, 0x4A	; 74
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e9 81       	ldd	r30, Y+1	; 0x01
    1092:	fa 81       	ldd	r31, Y+2	; 0x02
    1094:	82 81       	ldd	r24, Z+2	; 0x02
    1096:	93 81       	ldd	r25, Z+3	; 0x03
    1098:	11 96       	adiw	r26, 0x01	; 1
    109a:	9c 93       	st	X, r25
    109c:	8e 93       	st	-X, r24
			TIMSK |= (1<<OCIE1A);		/* Enable Timer 1 Compare Match Interrupt */
    109e:	a9 e5       	ldi	r26, 0x59	; 89
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e9 e5       	ldi	r30, 0x59	; 89
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	80 61       	ori	r24, 0x10	; 16
    10aa:	8c 93       	st	X, r24
			TCCR1B |= (1<<WGM12);		/* Set CTC mode for Timer 1 */
    10ac:	ae e4       	ldi	r26, 0x4E	; 78
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	ee e4       	ldi	r30, 0x4E	; 78
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	88 60       	ori	r24, 0x08	; 8
    10b8:	8c 93       	st	X, r24
    10ba:	07 c0       	rjmp	.+14     	; 0x10ca <Timer_init+0xf2>
		}
		else
		{
			TIMSK |= (1<<TOIE1);		/* Enable Timer 1 Overflow Interrupt */
    10bc:	a9 e5       	ldi	r26, 0x59	; 89
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e9 e5       	ldi	r30, 0x59	; 89
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	84 60       	ori	r24, 0x04	; 4
    10c8:	8c 93       	st	X, r24
		}
		TCCR1B |= (Config_Ptr->prescaler);		/* Set prescaler for Timer 1 */
    10ca:	ae e4       	ldi	r26, 0x4E	; 78
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	ee e4       	ldi	r30, 0x4E	; 78
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	90 81       	ld	r25, Z
    10d4:	e9 81       	ldd	r30, Y+1	; 0x01
    10d6:	fa 81       	ldd	r31, Y+2	; 0x02
    10d8:	85 81       	ldd	r24, Z+5	; 0x05
    10da:	89 2b       	or	r24, r25
    10dc:	8c 93       	st	X, r24
		TCCR1A = (1<<FOC1A) | (1<<FOC1B);		/* Set Fast PWM mode for Timer 1 */
    10de:	ef e4       	ldi	r30, 0x4F	; 79
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	8c e0       	ldi	r24, 0x0C	; 12
    10e4:	80 83       	st	Z, r24
    10e6:	2c c0       	rjmp	.+88     	; 0x1140 <Timer_init+0x168>
		break;

	case TIMER2:
		TCNT2 = Config_Ptr->timer_InitialValue;		/* Set initial value for Timer 2 */
    10e8:	a4 e4       	ldi	r26, 0x44	; 68
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e9 81       	ldd	r30, Y+1	; 0x01
    10ee:	fa 81       	ldd	r31, Y+2	; 0x02
    10f0:	80 81       	ld	r24, Z
    10f2:	91 81       	ldd	r25, Z+1	; 0x01
    10f4:	8c 93       	st	X, r24
		if (Config_Ptr->timer_mode == TIMER_COMP_MODE)
    10f6:	e9 81       	ldd	r30, Y+1	; 0x01
    10f8:	fa 81       	ldd	r31, Y+2	; 0x02
    10fa:	86 81       	ldd	r24, Z+6	; 0x06
    10fc:	81 30       	cpi	r24, 0x01	; 1
    10fe:	79 f4       	brne	.+30     	; 0x111e <Timer_init+0x146>
		{
			OCR2 = Config_Ptr->timer_compare_value;		/* Set compare value for Timer 2 */
    1100:	a3 e4       	ldi	r26, 0x43	; 67
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e9 81       	ldd	r30, Y+1	; 0x01
    1106:	fa 81       	ldd	r31, Y+2	; 0x02
    1108:	82 81       	ldd	r24, Z+2	; 0x02
    110a:	93 81       	ldd	r25, Z+3	; 0x03
    110c:	8c 93       	st	X, r24
			TIMSK |= (1<<OCIE2);		/* Enable Timer 2 Compare Match Interrupt */
    110e:	a9 e5       	ldi	r26, 0x59	; 89
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e9 e5       	ldi	r30, 0x59	; 89
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	80 68       	ori	r24, 0x80	; 128
    111a:	8c 93       	st	X, r24
    111c:	07 c0       	rjmp	.+14     	; 0x112c <Timer_init+0x154>
		}
		else
		{
			TIMSK |= (1<<TOIE2);		/* Enable Timer 2 Overflow Interrupt */
    111e:	a9 e5       	ldi	r26, 0x59	; 89
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e9 e5       	ldi	r30, 0x59	; 89
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	80 64       	ori	r24, 0x40	; 64
    112a:	8c 93       	st	X, r24
		}
		TCCR2 |= (Config_Ptr->prescaler);		/* Set prescaler for Timer 2 */
    112c:	a5 e4       	ldi	r26, 0x45	; 69
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e5 e4       	ldi	r30, 0x45	; 69
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	90 81       	ld	r25, Z
    1136:	e9 81       	ldd	r30, Y+1	; 0x01
    1138:	fa 81       	ldd	r31, Y+2	; 0x02
    113a:	85 81       	ldd	r24, Z+5	; 0x05
    113c:	89 2b       	or	r24, r25
    113e:	8c 93       	st	X, r24
		break;

	default:
		break;
	}
}
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <Timer_deInit>:

void Timer_deInit(void)
{
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
	/* Reset the settings for Timer 0 */
	TCNT0 = 0;		/* Reset Timer 0 Counter */
    1156:	e2 e5       	ldi	r30, 0x52	; 82
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	10 82       	st	Z, r1
	TCCR0 = 0;		/* Clear Timer 0 Control Register */
    115c:	e3 e5       	ldi	r30, 0x53	; 83
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	10 82       	st	Z, r1
	TIMSK &= ~(1<<TOIE0);	/* Disable Timer 0 Overflow Interrupt */
    1162:	a9 e5       	ldi	r26, 0x59	; 89
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e9 e5       	ldi	r30, 0x59	; 89
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	8e 7f       	andi	r24, 0xFE	; 254
    116e:	8c 93       	st	X, r24
	TIMSK &= ~(1<<OCIE0);	/* Disable Timer 0 Compare Match Interrupt */
    1170:	a9 e5       	ldi	r26, 0x59	; 89
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	e9 e5       	ldi	r30, 0x59	; 89
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	8d 7f       	andi	r24, 0xFD	; 253
    117c:	8c 93       	st	X, r24

	/* Reset the settings for Timer 1 */
	TCNT1 = 0;		/* Reset Timer 1 Counter */
    117e:	ec e4       	ldi	r30, 0x4C	; 76
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	11 82       	std	Z+1, r1	; 0x01
    1184:	10 82       	st	Z, r1
	OCR1A = 0;		/* Reset Timer 1 Compare Match Value */
    1186:	ea e4       	ldi	r30, 0x4A	; 74
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	11 82       	std	Z+1, r1	; 0x01
    118c:	10 82       	st	Z, r1
	TCCR1A = 0;		/* Clear Timer 1 Control Register A */
    118e:	ef e4       	ldi	r30, 0x4F	; 79
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	10 82       	st	Z, r1
	TCCR1B = 0;		/* Clear Timer 1 Control Register B */
    1194:	ee e4       	ldi	r30, 0x4E	; 78
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	10 82       	st	Z, r1
	TIMSK &= ~(1<<TOIE1);	/* Disable Timer 1 Overflow Interrupt */
    119a:	a9 e5       	ldi	r26, 0x59	; 89
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	e9 e5       	ldi	r30, 0x59	; 89
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	8b 7f       	andi	r24, 0xFB	; 251
    11a6:	8c 93       	st	X, r24
	TIMSK &= ~(1<<OCIE1A);	/* Disable Timer 1 Compare Match Interrupt */
    11a8:	a9 e5       	ldi	r26, 0x59	; 89
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e9 e5       	ldi	r30, 0x59	; 89
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	8f 7e       	andi	r24, 0xEF	; 239
    11b4:	8c 93       	st	X, r24

	/* Reset the settings for Timer 2 */
	TCNT2 = 0;		/* Reset Timer 2 Counter */
    11b6:	e4 e4       	ldi	r30, 0x44	; 68
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	10 82       	st	Z, r1
	OCR2 = 0;		/* Reset Timer 2 Compare Match Value */
    11bc:	e3 e4       	ldi	r30, 0x43	; 67
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	10 82       	st	Z, r1
	TCCR2 = 0;		/* Clear Timer 2 Control Register */
    11c2:	e5 e4       	ldi	r30, 0x45	; 69
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	10 82       	st	Z, r1
	TIMSK &= ~(1<<TOIE2);	/* Disable Timer 2 Overflow Interrupt */
    11c8:	a9 e5       	ldi	r26, 0x59	; 89
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	e9 e5       	ldi	r30, 0x59	; 89
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	8f 7b       	andi	r24, 0xBF	; 191
    11d4:	8c 93       	st	X, r24
	TIMSK &= ~(1<<OCIE2);	/* Disable Timer 2 Compare Match Interrupt */
    11d6:	a9 e5       	ldi	r26, 0x59	; 89
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e9 e5       	ldi	r30, 0x59	; 89
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	8f 77       	andi	r24, 0x7F	; 127
    11e2:	8c 93       	st	X, r24
}
    11e4:	cf 91       	pop	r28
    11e6:	df 91       	pop	r29
    11e8:	08 95       	ret

000011ea <GPIO_setupPinDirection>:
 * Description	: GPIO Driver
 ************************************************************************************/
#include "gpio.h"

void GPIO_setupPinDirection(GPIO_PORT_ID port_id, GPIO_PIN_ID pin_id, GPIO_PinDirection direction)
{
    11ea:	df 93       	push	r29
    11ec:	cf 93       	push	r28
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	27 97       	sbiw	r28, 0x07	; 7
    11f4:	0f b6       	in	r0, 0x3f	; 63
    11f6:	f8 94       	cli
    11f8:	de bf       	out	0x3e, r29	; 62
    11fa:	0f be       	out	0x3f, r0	; 63
    11fc:	cd bf       	out	0x3d, r28	; 61
    11fe:	89 83       	std	Y+1, r24	; 0x01
    1200:	6a 83       	std	Y+2, r22	; 0x02
    1202:	4b 83       	std	Y+3, r20	; 0x03
	if((NUM_OF_PORTS <= port_id) && (NUM_OF_PINS_PER_PORT <= pin_id))
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	84 30       	cpi	r24, 0x04	; 4
    1208:	20 f0       	brcs	.+8      	; 0x1212 <GPIO_setupPinDirection+0x28>
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	88 30       	cpi	r24, 0x08	; 8
    120e:	08 f0       	brcs	.+2      	; 0x1212 <GPIO_setupPinDirection+0x28>
    1210:	ea c0       	rjmp	.+468    	; 0x13e6 <GPIO_setupPinDirection+0x1fc>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		if(PIN_OUTPUT == direction)
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	81 30       	cpi	r24, 0x01	; 1
    1216:	09 f0       	breq	.+2      	; 0x121a <GPIO_setupPinDirection+0x30>
    1218:	6f c0       	rjmp	.+222    	; 0x12f8 <GPIO_setupPinDirection+0x10e>
		{
			switch(port_id)
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	3f 83       	std	Y+7, r19	; 0x07
    1222:	2e 83       	std	Y+6, r18	; 0x06
    1224:	8e 81       	ldd	r24, Y+6	; 0x06
    1226:	9f 81       	ldd	r25, Y+7	; 0x07
    1228:	81 30       	cpi	r24, 0x01	; 1
    122a:	91 05       	cpc	r25, r1
    122c:	49 f1       	breq	.+82     	; 0x1280 <GPIO_setupPinDirection+0x96>
    122e:	2e 81       	ldd	r18, Y+6	; 0x06
    1230:	3f 81       	ldd	r19, Y+7	; 0x07
    1232:	22 30       	cpi	r18, 0x02	; 2
    1234:	31 05       	cpc	r19, r1
    1236:	2c f4       	brge	.+10     	; 0x1242 <GPIO_setupPinDirection+0x58>
    1238:	8e 81       	ldd	r24, Y+6	; 0x06
    123a:	9f 81       	ldd	r25, Y+7	; 0x07
    123c:	00 97       	sbiw	r24, 0x00	; 0
    123e:	61 f0       	breq	.+24     	; 0x1258 <GPIO_setupPinDirection+0x6e>
    1240:	d2 c0       	rjmp	.+420    	; 0x13e6 <GPIO_setupPinDirection+0x1fc>
    1242:	2e 81       	ldd	r18, Y+6	; 0x06
    1244:	3f 81       	ldd	r19, Y+7	; 0x07
    1246:	22 30       	cpi	r18, 0x02	; 2
    1248:	31 05       	cpc	r19, r1
    124a:	71 f1       	breq	.+92     	; 0x12a8 <GPIO_setupPinDirection+0xbe>
    124c:	8e 81       	ldd	r24, Y+6	; 0x06
    124e:	9f 81       	ldd	r25, Y+7	; 0x07
    1250:	83 30       	cpi	r24, 0x03	; 3
    1252:	91 05       	cpc	r25, r1
    1254:	e9 f1       	breq	.+122    	; 0x12d0 <GPIO_setupPinDirection+0xe6>
    1256:	c7 c0       	rjmp	.+398    	; 0x13e6 <GPIO_setupPinDirection+0x1fc>
			{
			case PORTA_ID:
				SET_BIT(DDRA_REG, pin_id);
    1258:	aa e3       	ldi	r26, 0x3A	; 58
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	ea e3       	ldi	r30, 0x3A	; 58
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	48 2f       	mov	r20, r24
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	02 2e       	mov	r0, r18
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <GPIO_setupPinDirection+0x8c>
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	0a 94       	dec	r0
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <GPIO_setupPinDirection+0x88>
    127a:	84 2b       	or	r24, r20
    127c:	8c 93       	st	X, r24
    127e:	b3 c0       	rjmp	.+358    	; 0x13e6 <GPIO_setupPinDirection+0x1fc>
				break;
			case PORTB_ID:
				SET_BIT(DDRB_REG, pin_id);
    1280:	a7 e3       	ldi	r26, 0x37	; 55
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	e7 e3       	ldi	r30, 0x37	; 55
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	48 2f       	mov	r20, r24
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	02 2e       	mov	r0, r18
    1298:	02 c0       	rjmp	.+4      	; 0x129e <GPIO_setupPinDirection+0xb4>
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	0a 94       	dec	r0
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <GPIO_setupPinDirection+0xb0>
    12a2:	84 2b       	or	r24, r20
    12a4:	8c 93       	st	X, r24
    12a6:	9f c0       	rjmp	.+318    	; 0x13e6 <GPIO_setupPinDirection+0x1fc>
				break;
			case PORTC_ID:
				SET_BIT(DDRC_REG, pin_id);
    12a8:	a4 e3       	ldi	r26, 0x34	; 52
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	e4 e3       	ldi	r30, 0x34	; 52
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	48 2f       	mov	r20, r24
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	28 2f       	mov	r18, r24
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	02 2e       	mov	r0, r18
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <GPIO_setupPinDirection+0xdc>
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	0a 94       	dec	r0
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <GPIO_setupPinDirection+0xd8>
    12ca:	84 2b       	or	r24, r20
    12cc:	8c 93       	st	X, r24
    12ce:	8b c0       	rjmp	.+278    	; 0x13e6 <GPIO_setupPinDirection+0x1fc>
				break;
			case PORTD_ID:
				SET_BIT(DDRD_REG, pin_id);
    12d0:	a1 e3       	ldi	r26, 0x31	; 49
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e1 e3       	ldi	r30, 0x31	; 49
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	48 2f       	mov	r20, r24
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	02 2e       	mov	r0, r18
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <GPIO_setupPinDirection+0x104>
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	0a 94       	dec	r0
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <GPIO_setupPinDirection+0x100>
    12f2:	84 2b       	or	r24, r20
    12f4:	8c 93       	st	X, r24
    12f6:	77 c0       	rjmp	.+238    	; 0x13e6 <GPIO_setupPinDirection+0x1fc>
				break;
			}
		}
		else if(PIN_INPUT == direction)
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	88 23       	and	r24, r24
    12fc:	09 f0       	breq	.+2      	; 0x1300 <GPIO_setupPinDirection+0x116>
    12fe:	73 c0       	rjmp	.+230    	; 0x13e6 <GPIO_setupPinDirection+0x1fc>
		{
			switch(port_id)
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	3d 83       	std	Y+5, r19	; 0x05
    1308:	2c 83       	std	Y+4, r18	; 0x04
    130a:	8c 81       	ldd	r24, Y+4	; 0x04
    130c:	9d 81       	ldd	r25, Y+5	; 0x05
    130e:	81 30       	cpi	r24, 0x01	; 1
    1310:	91 05       	cpc	r25, r1
    1312:	59 f1       	breq	.+86     	; 0x136a <GPIO_setupPinDirection+0x180>
    1314:	2c 81       	ldd	r18, Y+4	; 0x04
    1316:	3d 81       	ldd	r19, Y+5	; 0x05
    1318:	22 30       	cpi	r18, 0x02	; 2
    131a:	31 05       	cpc	r19, r1
    131c:	2c f4       	brge	.+10     	; 0x1328 <GPIO_setupPinDirection+0x13e>
    131e:	8c 81       	ldd	r24, Y+4	; 0x04
    1320:	9d 81       	ldd	r25, Y+5	; 0x05
    1322:	00 97       	sbiw	r24, 0x00	; 0
    1324:	69 f0       	breq	.+26     	; 0x1340 <GPIO_setupPinDirection+0x156>
    1326:	5f c0       	rjmp	.+190    	; 0x13e6 <GPIO_setupPinDirection+0x1fc>
    1328:	2c 81       	ldd	r18, Y+4	; 0x04
    132a:	3d 81       	ldd	r19, Y+5	; 0x05
    132c:	22 30       	cpi	r18, 0x02	; 2
    132e:	31 05       	cpc	r19, r1
    1330:	89 f1       	breq	.+98     	; 0x1394 <GPIO_setupPinDirection+0x1aa>
    1332:	8c 81       	ldd	r24, Y+4	; 0x04
    1334:	9d 81       	ldd	r25, Y+5	; 0x05
    1336:	83 30       	cpi	r24, 0x03	; 3
    1338:	91 05       	cpc	r25, r1
    133a:	09 f4       	brne	.+2      	; 0x133e <GPIO_setupPinDirection+0x154>
    133c:	40 c0       	rjmp	.+128    	; 0x13be <GPIO_setupPinDirection+0x1d4>
    133e:	53 c0       	rjmp	.+166    	; 0x13e6 <GPIO_setupPinDirection+0x1fc>
			{
			case PORTA_ID:
				CLEAR_BIT(DDRA_REG, pin_id);
    1340:	aa e3       	ldi	r26, 0x3A	; 58
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	ea e3       	ldi	r30, 0x3A	; 58
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	48 2f       	mov	r20, r24
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	02 2e       	mov	r0, r18
    1358:	02 c0       	rjmp	.+4      	; 0x135e <GPIO_setupPinDirection+0x174>
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	0a 94       	dec	r0
    1360:	e2 f7       	brpl	.-8      	; 0x135a <GPIO_setupPinDirection+0x170>
    1362:	80 95       	com	r24
    1364:	84 23       	and	r24, r20
    1366:	8c 93       	st	X, r24
    1368:	3e c0       	rjmp	.+124    	; 0x13e6 <GPIO_setupPinDirection+0x1fc>
				break;
			case PORTB_ID:
				CLEAR_BIT(DDRB_REG, pin_id);
    136a:	a7 e3       	ldi	r26, 0x37	; 55
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	e7 e3       	ldi	r30, 0x37	; 55
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	48 2f       	mov	r20, r24
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	02 2e       	mov	r0, r18
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <GPIO_setupPinDirection+0x19e>
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	0a 94       	dec	r0
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <GPIO_setupPinDirection+0x19a>
    138c:	80 95       	com	r24
    138e:	84 23       	and	r24, r20
    1390:	8c 93       	st	X, r24
    1392:	29 c0       	rjmp	.+82     	; 0x13e6 <GPIO_setupPinDirection+0x1fc>
				break;
			case PORTC_ID:
				CLEAR_BIT(DDRC_REG, pin_id);
    1394:	a4 e3       	ldi	r26, 0x34	; 52
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	e4 e3       	ldi	r30, 0x34	; 52
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	48 2f       	mov	r20, r24
    13a0:	8a 81       	ldd	r24, Y+2	; 0x02
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	02 2e       	mov	r0, r18
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <GPIO_setupPinDirection+0x1c8>
    13ae:	88 0f       	add	r24, r24
    13b0:	99 1f       	adc	r25, r25
    13b2:	0a 94       	dec	r0
    13b4:	e2 f7       	brpl	.-8      	; 0x13ae <GPIO_setupPinDirection+0x1c4>
    13b6:	80 95       	com	r24
    13b8:	84 23       	and	r24, r20
    13ba:	8c 93       	st	X, r24
    13bc:	14 c0       	rjmp	.+40     	; 0x13e6 <GPIO_setupPinDirection+0x1fc>
				break;
			case PORTD_ID:
				CLEAR_BIT(DDRD_REG, pin_id);
    13be:	a1 e3       	ldi	r26, 0x31	; 49
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	e1 e3       	ldi	r30, 0x31	; 49
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	48 2f       	mov	r20, r24
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	28 2f       	mov	r18, r24
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	02 2e       	mov	r0, r18
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <GPIO_setupPinDirection+0x1f2>
    13d8:	88 0f       	add	r24, r24
    13da:	99 1f       	adc	r25, r25
    13dc:	0a 94       	dec	r0
    13de:	e2 f7       	brpl	.-8      	; 0x13d8 <GPIO_setupPinDirection+0x1ee>
    13e0:	80 95       	com	r24
    13e2:	84 23       	and	r24, r20
    13e4:	8c 93       	st	X, r24
				break;
			}
		}

	}
}
    13e6:	27 96       	adiw	r28, 0x07	; 7
    13e8:	0f b6       	in	r0, 0x3f	; 63
    13ea:	f8 94       	cli
    13ec:	de bf       	out	0x3e, r29	; 62
    13ee:	0f be       	out	0x3f, r0	; 63
    13f0:	cd bf       	out	0x3d, r28	; 61
    13f2:	cf 91       	pop	r28
    13f4:	df 91       	pop	r29
    13f6:	08 95       	ret

000013f8 <GPIO_writePin>:

void GPIO_writePin(GPIO_PORT_ID port_id, GPIO_PIN_ID pin_id, STD_Value value)
{
    13f8:	df 93       	push	r29
    13fa:	cf 93       	push	r28
    13fc:	cd b7       	in	r28, 0x3d	; 61
    13fe:	de b7       	in	r29, 0x3e	; 62
    1400:	27 97       	sbiw	r28, 0x07	; 7
    1402:	0f b6       	in	r0, 0x3f	; 63
    1404:	f8 94       	cli
    1406:	de bf       	out	0x3e, r29	; 62
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	cd bf       	out	0x3d, r28	; 61
    140c:	89 83       	std	Y+1, r24	; 0x01
    140e:	6a 83       	std	Y+2, r22	; 0x02
    1410:	4b 83       	std	Y+3, r20	; 0x03
	if((NUM_OF_PORTS <= port_id) && (NUM_OF_PINS_PER_PORT <= pin_id))
    1412:	89 81       	ldd	r24, Y+1	; 0x01
    1414:	84 30       	cpi	r24, 0x04	; 4
    1416:	20 f0       	brcs	.+8      	; 0x1420 <GPIO_writePin+0x28>
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	88 30       	cpi	r24, 0x08	; 8
    141c:	08 f0       	brcs	.+2      	; 0x1420 <GPIO_writePin+0x28>
    141e:	ea c0       	rjmp	.+468    	; 0x15f4 <GPIO_writePin+0x1fc>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		if(LOGIC_HIGH == value)
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	81 30       	cpi	r24, 0x01	; 1
    1424:	09 f0       	breq	.+2      	; 0x1428 <GPIO_writePin+0x30>
    1426:	6f c0       	rjmp	.+222    	; 0x1506 <GPIO_writePin+0x10e>
		{
			switch(port_id)
    1428:	89 81       	ldd	r24, Y+1	; 0x01
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	3f 83       	std	Y+7, r19	; 0x07
    1430:	2e 83       	std	Y+6, r18	; 0x06
    1432:	8e 81       	ldd	r24, Y+6	; 0x06
    1434:	9f 81       	ldd	r25, Y+7	; 0x07
    1436:	81 30       	cpi	r24, 0x01	; 1
    1438:	91 05       	cpc	r25, r1
    143a:	49 f1       	breq	.+82     	; 0x148e <GPIO_writePin+0x96>
    143c:	2e 81       	ldd	r18, Y+6	; 0x06
    143e:	3f 81       	ldd	r19, Y+7	; 0x07
    1440:	22 30       	cpi	r18, 0x02	; 2
    1442:	31 05       	cpc	r19, r1
    1444:	2c f4       	brge	.+10     	; 0x1450 <GPIO_writePin+0x58>
    1446:	8e 81       	ldd	r24, Y+6	; 0x06
    1448:	9f 81       	ldd	r25, Y+7	; 0x07
    144a:	00 97       	sbiw	r24, 0x00	; 0
    144c:	61 f0       	breq	.+24     	; 0x1466 <GPIO_writePin+0x6e>
    144e:	d2 c0       	rjmp	.+420    	; 0x15f4 <GPIO_writePin+0x1fc>
    1450:	2e 81       	ldd	r18, Y+6	; 0x06
    1452:	3f 81       	ldd	r19, Y+7	; 0x07
    1454:	22 30       	cpi	r18, 0x02	; 2
    1456:	31 05       	cpc	r19, r1
    1458:	71 f1       	breq	.+92     	; 0x14b6 <GPIO_writePin+0xbe>
    145a:	8e 81       	ldd	r24, Y+6	; 0x06
    145c:	9f 81       	ldd	r25, Y+7	; 0x07
    145e:	83 30       	cpi	r24, 0x03	; 3
    1460:	91 05       	cpc	r25, r1
    1462:	e9 f1       	breq	.+122    	; 0x14de <GPIO_writePin+0xe6>
    1464:	c7 c0       	rjmp	.+398    	; 0x15f4 <GPIO_writePin+0x1fc>
			{
			case PORTA_ID:
				SET_BIT(PORTA_REG, pin_id);
    1466:	ab e3       	ldi	r26, 0x3B	; 59
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	eb e3       	ldi	r30, 0x3B	; 59
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	48 2f       	mov	r20, r24
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	28 2f       	mov	r18, r24
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	02 2e       	mov	r0, r18
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <GPIO_writePin+0x8c>
    1480:	88 0f       	add	r24, r24
    1482:	99 1f       	adc	r25, r25
    1484:	0a 94       	dec	r0
    1486:	e2 f7       	brpl	.-8      	; 0x1480 <GPIO_writePin+0x88>
    1488:	84 2b       	or	r24, r20
    148a:	8c 93       	st	X, r24
    148c:	b3 c0       	rjmp	.+358    	; 0x15f4 <GPIO_writePin+0x1fc>
				break;
			case PORTB_ID:
				SET_BIT(PORTB_REG, pin_id);
    148e:	a8 e3       	ldi	r26, 0x38	; 56
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	e8 e3       	ldi	r30, 0x38	; 56
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	48 2f       	mov	r20, r24
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	02 2e       	mov	r0, r18
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <GPIO_writePin+0xb4>
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	0a 94       	dec	r0
    14ae:	e2 f7       	brpl	.-8      	; 0x14a8 <GPIO_writePin+0xb0>
    14b0:	84 2b       	or	r24, r20
    14b2:	8c 93       	st	X, r24
    14b4:	9f c0       	rjmp	.+318    	; 0x15f4 <GPIO_writePin+0x1fc>
				break;
			case PORTC_ID:
				SET_BIT(PORTC_REG, pin_id);
    14b6:	a5 e3       	ldi	r26, 0x35	; 53
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e5 e3       	ldi	r30, 0x35	; 53
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	48 2f       	mov	r20, r24
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	02 2e       	mov	r0, r18
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <GPIO_writePin+0xdc>
    14d0:	88 0f       	add	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	0a 94       	dec	r0
    14d6:	e2 f7       	brpl	.-8      	; 0x14d0 <GPIO_writePin+0xd8>
    14d8:	84 2b       	or	r24, r20
    14da:	8c 93       	st	X, r24
    14dc:	8b c0       	rjmp	.+278    	; 0x15f4 <GPIO_writePin+0x1fc>
				break;
			case PORTD_ID:
				SET_BIT(PORTD_REG, pin_id);
    14de:	a2 e3       	ldi	r26, 0x32	; 50
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e2 e3       	ldi	r30, 0x32	; 50
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	48 2f       	mov	r20, r24
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	02 2e       	mov	r0, r18
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <GPIO_writePin+0x104>
    14f8:	88 0f       	add	r24, r24
    14fa:	99 1f       	adc	r25, r25
    14fc:	0a 94       	dec	r0
    14fe:	e2 f7       	brpl	.-8      	; 0x14f8 <GPIO_writePin+0x100>
    1500:	84 2b       	or	r24, r20
    1502:	8c 93       	st	X, r24
    1504:	77 c0       	rjmp	.+238    	; 0x15f4 <GPIO_writePin+0x1fc>
				break;
			}
		}
		else if(LOGIC_LOW == value)
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	88 23       	and	r24, r24
    150a:	09 f0       	breq	.+2      	; 0x150e <GPIO_writePin+0x116>
    150c:	73 c0       	rjmp	.+230    	; 0x15f4 <GPIO_writePin+0x1fc>
		{
			switch(port_id)
    150e:	89 81       	ldd	r24, Y+1	; 0x01
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	3d 83       	std	Y+5, r19	; 0x05
    1516:	2c 83       	std	Y+4, r18	; 0x04
    1518:	8c 81       	ldd	r24, Y+4	; 0x04
    151a:	9d 81       	ldd	r25, Y+5	; 0x05
    151c:	81 30       	cpi	r24, 0x01	; 1
    151e:	91 05       	cpc	r25, r1
    1520:	59 f1       	breq	.+86     	; 0x1578 <GPIO_writePin+0x180>
    1522:	2c 81       	ldd	r18, Y+4	; 0x04
    1524:	3d 81       	ldd	r19, Y+5	; 0x05
    1526:	22 30       	cpi	r18, 0x02	; 2
    1528:	31 05       	cpc	r19, r1
    152a:	2c f4       	brge	.+10     	; 0x1536 <GPIO_writePin+0x13e>
    152c:	8c 81       	ldd	r24, Y+4	; 0x04
    152e:	9d 81       	ldd	r25, Y+5	; 0x05
    1530:	00 97       	sbiw	r24, 0x00	; 0
    1532:	69 f0       	breq	.+26     	; 0x154e <GPIO_writePin+0x156>
    1534:	5f c0       	rjmp	.+190    	; 0x15f4 <GPIO_writePin+0x1fc>
    1536:	2c 81       	ldd	r18, Y+4	; 0x04
    1538:	3d 81       	ldd	r19, Y+5	; 0x05
    153a:	22 30       	cpi	r18, 0x02	; 2
    153c:	31 05       	cpc	r19, r1
    153e:	89 f1       	breq	.+98     	; 0x15a2 <GPIO_writePin+0x1aa>
    1540:	8c 81       	ldd	r24, Y+4	; 0x04
    1542:	9d 81       	ldd	r25, Y+5	; 0x05
    1544:	83 30       	cpi	r24, 0x03	; 3
    1546:	91 05       	cpc	r25, r1
    1548:	09 f4       	brne	.+2      	; 0x154c <GPIO_writePin+0x154>
    154a:	40 c0       	rjmp	.+128    	; 0x15cc <GPIO_writePin+0x1d4>
    154c:	53 c0       	rjmp	.+166    	; 0x15f4 <GPIO_writePin+0x1fc>
			{
			case PORTA_ID:
				CLEAR_BIT(PORTA_REG, pin_id);
    154e:	ab e3       	ldi	r26, 0x3B	; 59
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	eb e3       	ldi	r30, 0x3B	; 59
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	48 2f       	mov	r20, r24
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	02 2e       	mov	r0, r18
    1566:	02 c0       	rjmp	.+4      	; 0x156c <GPIO_writePin+0x174>
    1568:	88 0f       	add	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	0a 94       	dec	r0
    156e:	e2 f7       	brpl	.-8      	; 0x1568 <GPIO_writePin+0x170>
    1570:	80 95       	com	r24
    1572:	84 23       	and	r24, r20
    1574:	8c 93       	st	X, r24
    1576:	3e c0       	rjmp	.+124    	; 0x15f4 <GPIO_writePin+0x1fc>
				break;
			case PORTB_ID:
				CLEAR_BIT(PORTB_REG, pin_id);
    1578:	a8 e3       	ldi	r26, 0x38	; 56
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e8 e3       	ldi	r30, 0x38	; 56
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	48 2f       	mov	r20, r24
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	28 2f       	mov	r18, r24
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	02 2e       	mov	r0, r18
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <GPIO_writePin+0x19e>
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	0a 94       	dec	r0
    1598:	e2 f7       	brpl	.-8      	; 0x1592 <GPIO_writePin+0x19a>
    159a:	80 95       	com	r24
    159c:	84 23       	and	r24, r20
    159e:	8c 93       	st	X, r24
    15a0:	29 c0       	rjmp	.+82     	; 0x15f4 <GPIO_writePin+0x1fc>
				break;
			case PORTC_ID:
				CLEAR_BIT(PORTC_REG, pin_id);
    15a2:	a5 e3       	ldi	r26, 0x35	; 53
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e5 e3       	ldi	r30, 0x35	; 53
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	48 2f       	mov	r20, r24
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	02 2e       	mov	r0, r18
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <GPIO_writePin+0x1c8>
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	0a 94       	dec	r0
    15c2:	e2 f7       	brpl	.-8      	; 0x15bc <GPIO_writePin+0x1c4>
    15c4:	80 95       	com	r24
    15c6:	84 23       	and	r24, r20
    15c8:	8c 93       	st	X, r24
    15ca:	14 c0       	rjmp	.+40     	; 0x15f4 <GPIO_writePin+0x1fc>
				break;
			case PORTD_ID:
				CLEAR_BIT(PORTD_REG, pin_id);
    15cc:	a2 e3       	ldi	r26, 0x32	; 50
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	e2 e3       	ldi	r30, 0x32	; 50
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	48 2f       	mov	r20, r24
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	02 2e       	mov	r0, r18
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <GPIO_writePin+0x1f2>
    15e6:	88 0f       	add	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	0a 94       	dec	r0
    15ec:	e2 f7       	brpl	.-8      	; 0x15e6 <GPIO_writePin+0x1ee>
    15ee:	80 95       	com	r24
    15f0:	84 23       	and	r24, r20
    15f2:	8c 93       	st	X, r24
				break;
			}
		}
	}
}
    15f4:	27 96       	adiw	r28, 0x07	; 7
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	f8 94       	cli
    15fa:	de bf       	out	0x3e, r29	; 62
    15fc:	0f be       	out	0x3f, r0	; 63
    15fe:	cd bf       	out	0x3d, r28	; 61
    1600:	cf 91       	pop	r28
    1602:	df 91       	pop	r29
    1604:	08 95       	ret

00001606 <GPIO_readPin>:

STD_Value GPIO_readPin(GPIO_PORT_ID port_id, GPIO_PIN_ID pin_id)
{
    1606:	df 93       	push	r29
    1608:	cf 93       	push	r28
    160a:	00 d0       	rcall	.+0      	; 0x160c <GPIO_readPin+0x6>
    160c:	00 d0       	rcall	.+0      	; 0x160e <GPIO_readPin+0x8>
    160e:	0f 92       	push	r0
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
    1614:	8a 83       	std	Y+2, r24	; 0x02
    1616:	6b 83       	std	Y+3, r22	; 0x03
	STD_Value pin_value = LOGIC_LOW;
    1618:	19 82       	std	Y+1, r1	; 0x01

	if((NUM_OF_PORTS <= port_id) && (NUM_OF_PINS_PER_PORT <= pin_id))
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	84 30       	cpi	r24, 0x04	; 4
    161e:	20 f0       	brcs	.+8      	; 0x1628 <GPIO_readPin+0x22>
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	88 30       	cpi	r24, 0x08	; 8
    1624:	08 f0       	brcs	.+2      	; 0x1628 <GPIO_readPin+0x22>
    1626:	67 c0       	rjmp	.+206    	; 0x16f6 <GPIO_readPin+0xf0>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_id)
    1628:	8a 81       	ldd	r24, Y+2	; 0x02
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	3d 83       	std	Y+5, r19	; 0x05
    1630:	2c 83       	std	Y+4, r18	; 0x04
    1632:	4c 81       	ldd	r20, Y+4	; 0x04
    1634:	5d 81       	ldd	r21, Y+5	; 0x05
    1636:	41 30       	cpi	r20, 0x01	; 1
    1638:	51 05       	cpc	r21, r1
    163a:	41 f1       	breq	.+80     	; 0x168c <GPIO_readPin+0x86>
    163c:	8c 81       	ldd	r24, Y+4	; 0x04
    163e:	9d 81       	ldd	r25, Y+5	; 0x05
    1640:	82 30       	cpi	r24, 0x02	; 2
    1642:	91 05       	cpc	r25, r1
    1644:	34 f4       	brge	.+12     	; 0x1652 <GPIO_readPin+0x4c>
    1646:	2c 81       	ldd	r18, Y+4	; 0x04
    1648:	3d 81       	ldd	r19, Y+5	; 0x05
    164a:	21 15       	cp	r18, r1
    164c:	31 05       	cpc	r19, r1
    164e:	61 f0       	breq	.+24     	; 0x1668 <GPIO_readPin+0x62>
    1650:	52 c0       	rjmp	.+164    	; 0x16f6 <GPIO_readPin+0xf0>
    1652:	4c 81       	ldd	r20, Y+4	; 0x04
    1654:	5d 81       	ldd	r21, Y+5	; 0x05
    1656:	42 30       	cpi	r20, 0x02	; 2
    1658:	51 05       	cpc	r21, r1
    165a:	51 f1       	breq	.+84     	; 0x16b0 <GPIO_readPin+0xaa>
    165c:	8c 81       	ldd	r24, Y+4	; 0x04
    165e:	9d 81       	ldd	r25, Y+5	; 0x05
    1660:	83 30       	cpi	r24, 0x03	; 3
    1662:	91 05       	cpc	r25, r1
    1664:	b9 f1       	breq	.+110    	; 0x16d4 <GPIO_readPin+0xce>
    1666:	47 c0       	rjmp	.+142    	; 0x16f6 <GPIO_readPin+0xf0>
		{
		case PORTA_ID:
			pin_value = GET_BIT(PINA_REG, pin_id);
    1668:	e9 e3       	ldi	r30, 0x39	; 57
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	28 2f       	mov	r18, r24
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	8b 81       	ldd	r24, Y+3	; 0x03
    1674:	88 2f       	mov	r24, r24
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	a9 01       	movw	r20, r18
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <GPIO_readPin+0x7a>
    167c:	55 95       	asr	r21
    167e:	47 95       	ror	r20
    1680:	8a 95       	dec	r24
    1682:	e2 f7       	brpl	.-8      	; 0x167c <GPIO_readPin+0x76>
    1684:	ca 01       	movw	r24, r20
    1686:	81 70       	andi	r24, 0x01	; 1
    1688:	89 83       	std	Y+1, r24	; 0x01
    168a:	35 c0       	rjmp	.+106    	; 0x16f6 <GPIO_readPin+0xf0>
			break;
		case PORTB_ID:
			pin_value = GET_BIT(PINB_REG, pin_id);
    168c:	e6 e3       	ldi	r30, 0x36	; 54
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	28 2f       	mov	r18, r24
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	8b 81       	ldd	r24, Y+3	; 0x03
    1698:	88 2f       	mov	r24, r24
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	a9 01       	movw	r20, r18
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <GPIO_readPin+0x9e>
    16a0:	55 95       	asr	r21
    16a2:	47 95       	ror	r20
    16a4:	8a 95       	dec	r24
    16a6:	e2 f7       	brpl	.-8      	; 0x16a0 <GPIO_readPin+0x9a>
    16a8:	ca 01       	movw	r24, r20
    16aa:	81 70       	andi	r24, 0x01	; 1
    16ac:	89 83       	std	Y+1, r24	; 0x01
    16ae:	23 c0       	rjmp	.+70     	; 0x16f6 <GPIO_readPin+0xf0>
			break;
		case PORTC_ID:
			pin_value = GET_BIT(PINC_REG, pin_id);
    16b0:	e3 e3       	ldi	r30, 0x33	; 51
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	28 2f       	mov	r18, r24
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	88 2f       	mov	r24, r24
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	a9 01       	movw	r20, r18
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <GPIO_readPin+0xc2>
    16c4:	55 95       	asr	r21
    16c6:	47 95       	ror	r20
    16c8:	8a 95       	dec	r24
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <GPIO_readPin+0xbe>
    16cc:	ca 01       	movw	r24, r20
    16ce:	81 70       	andi	r24, 0x01	; 1
    16d0:	89 83       	std	Y+1, r24	; 0x01
    16d2:	11 c0       	rjmp	.+34     	; 0x16f6 <GPIO_readPin+0xf0>
			break;
		case PORTD_ID:
			pin_value = GET_BIT(PIND_REG, pin_id);
    16d4:	e0 e3       	ldi	r30, 0x30	; 48
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	8b 81       	ldd	r24, Y+3	; 0x03
    16e0:	88 2f       	mov	r24, r24
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	a9 01       	movw	r20, r18
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <GPIO_readPin+0xe6>
    16e8:	55 95       	asr	r21
    16ea:	47 95       	ror	r20
    16ec:	8a 95       	dec	r24
    16ee:	e2 f7       	brpl	.-8      	; 0x16e8 <GPIO_readPin+0xe2>
    16f0:	ca 01       	movw	r24, r20
    16f2:	81 70       	andi	r24, 0x01	; 1
    16f4:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return pin_value;
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	0f 90       	pop	r0
    1702:	cf 91       	pop	r28
    1704:	df 91       	pop	r29
    1706:	08 95       	ret

00001708 <GPIO_setupPortDirection>:

void GPIO_setupPortDirection(GPIO_PORT_ID port_id, GPIO_PortDirection direction)
{
    1708:	df 93       	push	r29
    170a:	cf 93       	push	r28
    170c:	00 d0       	rcall	.+0      	; 0x170e <GPIO_setupPortDirection+0x6>
    170e:	00 d0       	rcall	.+0      	; 0x1710 <GPIO_setupPortDirection+0x8>
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    1714:	89 83       	std	Y+1, r24	; 0x01
    1716:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(NUM_OF_PORTS <= port_id)
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	84 30       	cpi	r24, 0x04	; 4
    171c:	90 f5       	brcc	.+100    	; 0x1782 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_id)
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	28 2f       	mov	r18, r24
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	3c 83       	std	Y+4, r19	; 0x04
    1726:	2b 83       	std	Y+3, r18	; 0x03
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	9c 81       	ldd	r25, Y+4	; 0x04
    172c:	81 30       	cpi	r24, 0x01	; 1
    172e:	91 05       	cpc	r25, r1
    1730:	d1 f0       	breq	.+52     	; 0x1766 <GPIO_setupPortDirection+0x5e>
    1732:	2b 81       	ldd	r18, Y+3	; 0x03
    1734:	3c 81       	ldd	r19, Y+4	; 0x04
    1736:	22 30       	cpi	r18, 0x02	; 2
    1738:	31 05       	cpc	r19, r1
    173a:	2c f4       	brge	.+10     	; 0x1746 <GPIO_setupPortDirection+0x3e>
    173c:	8b 81       	ldd	r24, Y+3	; 0x03
    173e:	9c 81       	ldd	r25, Y+4	; 0x04
    1740:	00 97       	sbiw	r24, 0x00	; 0
    1742:	61 f0       	breq	.+24     	; 0x175c <GPIO_setupPortDirection+0x54>
    1744:	1e c0       	rjmp	.+60     	; 0x1782 <GPIO_setupPortDirection+0x7a>
    1746:	2b 81       	ldd	r18, Y+3	; 0x03
    1748:	3c 81       	ldd	r19, Y+4	; 0x04
    174a:	22 30       	cpi	r18, 0x02	; 2
    174c:	31 05       	cpc	r19, r1
    174e:	81 f0       	breq	.+32     	; 0x1770 <GPIO_setupPortDirection+0x68>
    1750:	8b 81       	ldd	r24, Y+3	; 0x03
    1752:	9c 81       	ldd	r25, Y+4	; 0x04
    1754:	83 30       	cpi	r24, 0x03	; 3
    1756:	91 05       	cpc	r25, r1
    1758:	81 f0       	breq	.+32     	; 0x177a <GPIO_setupPortDirection+0x72>
    175a:	13 c0       	rjmp	.+38     	; 0x1782 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA_REG = direction;
    175c:	ea e3       	ldi	r30, 0x3A	; 58
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	80 83       	st	Z, r24
    1764:	0e c0       	rjmp	.+28     	; 0x1782 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB_REG = direction;
    1766:	e7 e3       	ldi	r30, 0x37	; 55
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	80 83       	st	Z, r24
    176e:	09 c0       	rjmp	.+18     	; 0x1782 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC_REG = direction;
    1770:	e4 e3       	ldi	r30, 0x34	; 52
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	8a 81       	ldd	r24, Y+2	; 0x02
    1776:	80 83       	st	Z, r24
    1778:	04 c0       	rjmp	.+8      	; 0x1782 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD_REG = direction;
    177a:	e1 e3       	ldi	r30, 0x31	; 49
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	8a 81       	ldd	r24, Y+2	; 0x02
    1780:	80 83       	st	Z, r24
			break;
		}
	}
}
    1782:	0f 90       	pop	r0
    1784:	0f 90       	pop	r0
    1786:	0f 90       	pop	r0
    1788:	0f 90       	pop	r0
    178a:	cf 91       	pop	r28
    178c:	df 91       	pop	r29
    178e:	08 95       	ret

00001790 <GPIO_writePort>:

void GPIO_writePort(GPIO_PORT_ID port_id, uint8 value)
{
    1790:	df 93       	push	r29
    1792:	cf 93       	push	r28
    1794:	00 d0       	rcall	.+0      	; 0x1796 <GPIO_writePort+0x6>
    1796:	00 d0       	rcall	.+0      	; 0x1798 <GPIO_writePort+0x8>
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62
    179c:	89 83       	std	Y+1, r24	; 0x01
    179e:	6a 83       	std	Y+2, r22	; 0x02
	if(NUM_OF_PORTS <= port_id)
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	84 30       	cpi	r24, 0x04	; 4
    17a4:	90 f5       	brcc	.+100    	; 0x180a <GPIO_writePort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_id)
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	28 2f       	mov	r18, r24
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	3c 83       	std	Y+4, r19	; 0x04
    17ae:	2b 83       	std	Y+3, r18	; 0x03
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	9c 81       	ldd	r25, Y+4	; 0x04
    17b4:	81 30       	cpi	r24, 0x01	; 1
    17b6:	91 05       	cpc	r25, r1
    17b8:	d1 f0       	breq	.+52     	; 0x17ee <GPIO_writePort+0x5e>
    17ba:	2b 81       	ldd	r18, Y+3	; 0x03
    17bc:	3c 81       	ldd	r19, Y+4	; 0x04
    17be:	22 30       	cpi	r18, 0x02	; 2
    17c0:	31 05       	cpc	r19, r1
    17c2:	2c f4       	brge	.+10     	; 0x17ce <GPIO_writePort+0x3e>
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	9c 81       	ldd	r25, Y+4	; 0x04
    17c8:	00 97       	sbiw	r24, 0x00	; 0
    17ca:	61 f0       	breq	.+24     	; 0x17e4 <GPIO_writePort+0x54>
    17cc:	1e c0       	rjmp	.+60     	; 0x180a <GPIO_writePort+0x7a>
    17ce:	2b 81       	ldd	r18, Y+3	; 0x03
    17d0:	3c 81       	ldd	r19, Y+4	; 0x04
    17d2:	22 30       	cpi	r18, 0x02	; 2
    17d4:	31 05       	cpc	r19, r1
    17d6:	81 f0       	breq	.+32     	; 0x17f8 <GPIO_writePort+0x68>
    17d8:	8b 81       	ldd	r24, Y+3	; 0x03
    17da:	9c 81       	ldd	r25, Y+4	; 0x04
    17dc:	83 30       	cpi	r24, 0x03	; 3
    17de:	91 05       	cpc	r25, r1
    17e0:	81 f0       	breq	.+32     	; 0x1802 <GPIO_writePort+0x72>
    17e2:	13 c0       	rjmp	.+38     	; 0x180a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA_REG = value;
    17e4:	eb e3       	ldi	r30, 0x3B	; 59
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	80 83       	st	Z, r24
    17ec:	0e c0       	rjmp	.+28     	; 0x180a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB_REG = value;
    17ee:	e8 e3       	ldi	r30, 0x38	; 56
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	8a 81       	ldd	r24, Y+2	; 0x02
    17f4:	80 83       	st	Z, r24
    17f6:	09 c0       	rjmp	.+18     	; 0x180a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC_REG = value;
    17f8:	e5 e3       	ldi	r30, 0x35	; 53
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	80 83       	st	Z, r24
    1800:	04 c0       	rjmp	.+8      	; 0x180a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD_REG = value;
    1802:	e2 e3       	ldi	r30, 0x32	; 50
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	80 83       	st	Z, r24
			break;
		}
	}
}
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	cf 91       	pop	r28
    1814:	df 91       	pop	r29
    1816:	08 95       	ret

00001818 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1818:	df 93       	push	r29
    181a:	cf 93       	push	r28
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
    1820:	2e 97       	sbiw	r28, 0x0e	; 14
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	f8 94       	cli
    1826:	de bf       	out	0x3e, r29	; 62
    1828:	0f be       	out	0x3f, r0	; 63
    182a:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and EN pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    182c:	82 e0       	ldi	r24, 0x02	; 2
    182e:	60 e0       	ldi	r22, 0x00	; 0
    1830:	41 e0       	ldi	r20, 0x01	; 1
    1832:	0e 94 f5 08 	call	0x11ea	; 0x11ea <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_EN_PORT_ID, LCD_EN_PIN_ID, PIN_OUTPUT);
    1836:	82 e0       	ldi	r24, 0x02	; 2
    1838:	61 e0       	ldi	r22, 0x01	; 1
    183a:	41 e0       	ldi	r20, 0x01	; 1
    183c:	0e 94 f5 08 	call	0x11ea	; 0x11ea <GPIO_setupPinDirection>
    1840:	80 e0       	ldi	r24, 0x00	; 0
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	a0 ea       	ldi	r26, 0xA0	; 160
    1846:	b1 e4       	ldi	r27, 0x41	; 65
    1848:	8b 87       	std	Y+11, r24	; 0x0b
    184a:	9c 87       	std	Y+12, r25	; 0x0c
    184c:	ad 87       	std	Y+13, r26	; 0x0d
    184e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1850:	6b 85       	ldd	r22, Y+11	; 0x0b
    1852:	7c 85       	ldd	r23, Y+12	; 0x0c
    1854:	8d 85       	ldd	r24, Y+13	; 0x0d
    1856:	9e 85       	ldd	r25, Y+14	; 0x0e
    1858:	20 e0       	ldi	r18, 0x00	; 0
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	4a ef       	ldi	r20, 0xFA	; 250
    185e:	54 e4       	ldi	r21, 0x44	; 68
    1860:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1864:	dc 01       	movw	r26, r24
    1866:	cb 01       	movw	r24, r22
    1868:	8f 83       	std	Y+7, r24	; 0x07
    186a:	98 87       	std	Y+8, r25	; 0x08
    186c:	a9 87       	std	Y+9, r26	; 0x09
    186e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1870:	6f 81       	ldd	r22, Y+7	; 0x07
    1872:	78 85       	ldd	r23, Y+8	; 0x08
    1874:	89 85       	ldd	r24, Y+9	; 0x09
    1876:	9a 85       	ldd	r25, Y+10	; 0x0a
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	40 e8       	ldi	r20, 0x80	; 128
    187e:	5f e3       	ldi	r21, 0x3F	; 63
    1880:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1884:	88 23       	and	r24, r24
    1886:	2c f4       	brge	.+10     	; 0x1892 <LCD_init+0x7a>
		__ticks = 1;
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	9e 83       	std	Y+6, r25	; 0x06
    188e:	8d 83       	std	Y+5, r24	; 0x05
    1890:	3f c0       	rjmp	.+126    	; 0x1910 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1892:	6f 81       	ldd	r22, Y+7	; 0x07
    1894:	78 85       	ldd	r23, Y+8	; 0x08
    1896:	89 85       	ldd	r24, Y+9	; 0x09
    1898:	9a 85       	ldd	r25, Y+10	; 0x0a
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	3f ef       	ldi	r19, 0xFF	; 255
    189e:	4f e7       	ldi	r20, 0x7F	; 127
    18a0:	57 e4       	ldi	r21, 0x47	; 71
    18a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18a6:	18 16       	cp	r1, r24
    18a8:	4c f5       	brge	.+82     	; 0x18fc <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    18ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    18b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	40 e2       	ldi	r20, 0x20	; 32
    18b8:	51 e4       	ldi	r21, 0x41	; 65
    18ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	bc 01       	movw	r22, r24
    18c4:	cd 01       	movw	r24, r26
    18c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	9e 83       	std	Y+6, r25	; 0x06
    18d0:	8d 83       	std	Y+5, r24	; 0x05
    18d2:	0f c0       	rjmp	.+30     	; 0x18f2 <LCD_init+0xda>
    18d4:	88 ec       	ldi	r24, 0xC8	; 200
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	9c 83       	std	Y+4, r25	; 0x04
    18da:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18dc:	8b 81       	ldd	r24, Y+3	; 0x03
    18de:	9c 81       	ldd	r25, Y+4	; 0x04
    18e0:	01 97       	sbiw	r24, 0x01	; 1
    18e2:	f1 f7       	brne	.-4      	; 0x18e0 <LCD_init+0xc8>
    18e4:	9c 83       	std	Y+4, r25	; 0x04
    18e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18e8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ea:	9e 81       	ldd	r25, Y+6	; 0x06
    18ec:	01 97       	sbiw	r24, 0x01	; 1
    18ee:	9e 83       	std	Y+6, r25	; 0x06
    18f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f2:	8d 81       	ldd	r24, Y+5	; 0x05
    18f4:	9e 81       	ldd	r25, Y+6	; 0x06
    18f6:	00 97       	sbiw	r24, 0x00	; 0
    18f8:	69 f7       	brne	.-38     	; 0x18d4 <LCD_init+0xbc>
    18fa:	14 c0       	rjmp	.+40     	; 0x1924 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18fc:	6f 81       	ldd	r22, Y+7	; 0x07
    18fe:	78 85       	ldd	r23, Y+8	; 0x08
    1900:	89 85       	ldd	r24, Y+9	; 0x09
    1902:	9a 85       	ldd	r25, Y+10	; 0x0a
    1904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	9e 83       	std	Y+6, r25	; 0x06
    190e:	8d 83       	std	Y+5, r24	; 0x05
    1910:	8d 81       	ldd	r24, Y+5	; 0x05
    1912:	9e 81       	ldd	r25, Y+6	; 0x06
    1914:	9a 83       	std	Y+2, r25	; 0x02
    1916:	89 83       	std	Y+1, r24	; 0x01
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	9a 81       	ldd	r25, Y+2	; 0x02
    191c:	01 97       	sbiw	r24, 0x01	; 1
    191e:	f1 f7       	brne	.-4      	; 0x191c <LCD_init+0x104>
    1920:	9a 83       	std	Y+2, r25	; 0x02
    1922:	89 83       	std	Y+1, r24	; 0x01
		/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
		LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

	#elif(LCD_DATA_BITS_MODE == 8)
		/* Configure the data port as output port */
		GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	6f ef       	ldi	r22, 0xFF	; 255
    1928:	0e 94 84 0b 	call	0x1708	; 0x1708 <GPIO_setupPortDirection>

		/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
		LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    192c:	88 e3       	ldi	r24, 0x38	; 56
    192e:	0e 94 a8 0c 	call	0x1950	; 0x1950 <LCD_sendCommand>
	#endif

		LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1932:	8c e0       	ldi	r24, 0x0C	; 12
    1934:	0e 94 a8 0c 	call	0x1950	; 0x1950 <LCD_sendCommand>
		LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	0e 94 a8 0c 	call	0x1950	; 0x1950 <LCD_sendCommand>
}
    193e:	2e 96       	adiw	r28, 0x0e	; 14
    1940:	0f b6       	in	r0, 0x3f	; 63
    1942:	f8 94       	cli
    1944:	de bf       	out	0x3e, r29	; 62
    1946:	0f be       	out	0x3f, r0	; 63
    1948:	cd bf       	out	0x3d, r28	; 61
    194a:	cf 91       	pop	r28
    194c:	df 91       	pop	r29
    194e:	08 95       	ret

00001950 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1950:	df 93       	push	r29
    1952:	cf 93       	push	r28
    1954:	cd b7       	in	r28, 0x3d	; 61
    1956:	de b7       	in	r29, 0x3e	; 62
    1958:	e9 97       	sbiw	r28, 0x39	; 57
    195a:	0f b6       	in	r0, 0x3f	; 63
    195c:	f8 94       	cli
    195e:	de bf       	out	0x3e, r29	; 62
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	cd bf       	out	0x3d, r28	; 61
    1964:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW); 	/* Instruction Mode RS = 0 */
    1966:	82 e0       	ldi	r24, 0x02	; 2
    1968:	60 e0       	ldi	r22, 0x00	; 0
    196a:	40 e0       	ldi	r20, 0x00	; 0
    196c:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <GPIO_writePin>
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	a0 e8       	ldi	r26, 0x80	; 128
    1976:	bf e3       	ldi	r27, 0x3F	; 63
    1978:	8d ab       	std	Y+53, r24	; 0x35
    197a:	9e ab       	std	Y+54, r25	; 0x36
    197c:	af ab       	std	Y+55, r26	; 0x37
    197e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1980:	6d a9       	ldd	r22, Y+53	; 0x35
    1982:	7e a9       	ldd	r23, Y+54	; 0x36
    1984:	8f a9       	ldd	r24, Y+55	; 0x37
    1986:	98 ad       	ldd	r25, Y+56	; 0x38
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	4a ef       	ldi	r20, 0xFA	; 250
    198e:	54 e4       	ldi	r21, 0x44	; 68
    1990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	89 ab       	std	Y+49, r24	; 0x31
    199a:	9a ab       	std	Y+50, r25	; 0x32
    199c:	ab ab       	std	Y+51, r26	; 0x33
    199e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19a0:	69 a9       	ldd	r22, Y+49	; 0x31
    19a2:	7a a9       	ldd	r23, Y+50	; 0x32
    19a4:	8b a9       	ldd	r24, Y+51	; 0x33
    19a6:	9c a9       	ldd	r25, Y+52	; 0x34
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	40 e8       	ldi	r20, 0x80	; 128
    19ae:	5f e3       	ldi	r21, 0x3F	; 63
    19b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19b4:	88 23       	and	r24, r24
    19b6:	2c f4       	brge	.+10     	; 0x19c2 <LCD_sendCommand+0x72>
		__ticks = 1;
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	98 ab       	std	Y+48, r25	; 0x30
    19be:	8f a7       	std	Y+47, r24	; 0x2f
    19c0:	3f c0       	rjmp	.+126    	; 0x1a40 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    19c2:	69 a9       	ldd	r22, Y+49	; 0x31
    19c4:	7a a9       	ldd	r23, Y+50	; 0x32
    19c6:	8b a9       	ldd	r24, Y+51	; 0x33
    19c8:	9c a9       	ldd	r25, Y+52	; 0x34
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	3f ef       	ldi	r19, 0xFF	; 255
    19ce:	4f e7       	ldi	r20, 0x7F	; 127
    19d0:	57 e4       	ldi	r21, 0x47	; 71
    19d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19d6:	18 16       	cp	r1, r24
    19d8:	4c f5       	brge	.+82     	; 0x1a2c <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19da:	6d a9       	ldd	r22, Y+53	; 0x35
    19dc:	7e a9       	ldd	r23, Y+54	; 0x36
    19de:	8f a9       	ldd	r24, Y+55	; 0x37
    19e0:	98 ad       	ldd	r25, Y+56	; 0x38
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	40 e2       	ldi	r20, 0x20	; 32
    19e8:	51 e4       	ldi	r21, 0x41	; 65
    19ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	bc 01       	movw	r22, r24
    19f4:	cd 01       	movw	r24, r26
    19f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	98 ab       	std	Y+48, r25	; 0x30
    1a00:	8f a7       	std	Y+47, r24	; 0x2f
    1a02:	0f c0       	rjmp	.+30     	; 0x1a22 <LCD_sendCommand+0xd2>
    1a04:	88 ec       	ldi	r24, 0xC8	; 200
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	9e a7       	std	Y+46, r25	; 0x2e
    1a0a:	8d a7       	std	Y+45, r24	; 0x2d
    1a0c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a0e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a10:	01 97       	sbiw	r24, 0x01	; 1
    1a12:	f1 f7       	brne	.-4      	; 0x1a10 <LCD_sendCommand+0xc0>
    1a14:	9e a7       	std	Y+46, r25	; 0x2e
    1a16:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a18:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a1a:	98 a9       	ldd	r25, Y+48	; 0x30
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	98 ab       	std	Y+48, r25	; 0x30
    1a20:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a22:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a24:	98 a9       	ldd	r25, Y+48	; 0x30
    1a26:	00 97       	sbiw	r24, 0x00	; 0
    1a28:	69 f7       	brne	.-38     	; 0x1a04 <LCD_sendCommand+0xb4>
    1a2a:	14 c0       	rjmp	.+40     	; 0x1a54 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a2c:	69 a9       	ldd	r22, Y+49	; 0x31
    1a2e:	7a a9       	ldd	r23, Y+50	; 0x32
    1a30:	8b a9       	ldd	r24, Y+51	; 0x33
    1a32:	9c a9       	ldd	r25, Y+52	; 0x34
    1a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	98 ab       	std	Y+48, r25	; 0x30
    1a3e:	8f a7       	std	Y+47, r24	; 0x2f
    1a40:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a42:	98 a9       	ldd	r25, Y+48	; 0x30
    1a44:	9c a7       	std	Y+44, r25	; 0x2c
    1a46:	8b a7       	std	Y+43, r24	; 0x2b
    1a48:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a4a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a4c:	01 97       	sbiw	r24, 0x01	; 1
    1a4e:	f1 f7       	brne	.-4      	; 0x1a4c <LCD_sendCommand+0xfc>
    1a50:	9c a7       	std	Y+44, r25	; 0x2c
    1a52:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); 	/* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_EN_PORT_ID, LCD_EN_PIN_ID, LOGIC_HIGH); 	/* Enable LCD EN = 1 */
    1a54:	82 e0       	ldi	r24, 0x02	; 2
    1a56:	61 e0       	ldi	r22, 0x01	; 1
    1a58:	41 e0       	ldi	r20, 0x01	; 1
    1a5a:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <GPIO_writePin>
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	a0 e8       	ldi	r26, 0x80	; 128
    1a64:	bf e3       	ldi	r27, 0x3F	; 63
    1a66:	8f a3       	std	Y+39, r24	; 0x27
    1a68:	98 a7       	std	Y+40, r25	; 0x28
    1a6a:	a9 a7       	std	Y+41, r26	; 0x29
    1a6c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a6e:	6f a1       	ldd	r22, Y+39	; 0x27
    1a70:	78 a5       	ldd	r23, Y+40	; 0x28
    1a72:	89 a5       	ldd	r24, Y+41	; 0x29
    1a74:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	4a ef       	ldi	r20, 0xFA	; 250
    1a7c:	54 e4       	ldi	r21, 0x44	; 68
    1a7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	8b a3       	std	Y+35, r24	; 0x23
    1a88:	9c a3       	std	Y+36, r25	; 0x24
    1a8a:	ad a3       	std	Y+37, r26	; 0x25
    1a8c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a8e:	6b a1       	ldd	r22, Y+35	; 0x23
    1a90:	7c a1       	ldd	r23, Y+36	; 0x24
    1a92:	8d a1       	ldd	r24, Y+37	; 0x25
    1a94:	9e a1       	ldd	r25, Y+38	; 0x26
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	40 e8       	ldi	r20, 0x80	; 128
    1a9c:	5f e3       	ldi	r21, 0x3F	; 63
    1a9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aa2:	88 23       	and	r24, r24
    1aa4:	2c f4       	brge	.+10     	; 0x1ab0 <LCD_sendCommand+0x160>
		__ticks = 1;
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	9a a3       	std	Y+34, r25	; 0x22
    1aac:	89 a3       	std	Y+33, r24	; 0x21
    1aae:	3f c0       	rjmp	.+126    	; 0x1b2e <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1ab0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ab2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ab4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ab6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	3f ef       	ldi	r19, 0xFF	; 255
    1abc:	4f e7       	ldi	r20, 0x7F	; 127
    1abe:	57 e4       	ldi	r21, 0x47	; 71
    1ac0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ac4:	18 16       	cp	r1, r24
    1ac6:	4c f5       	brge	.+82     	; 0x1b1a <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac8:	6f a1       	ldd	r22, Y+39	; 0x27
    1aca:	78 a5       	ldd	r23, Y+40	; 0x28
    1acc:	89 a5       	ldd	r24, Y+41	; 0x29
    1ace:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	40 e2       	ldi	r20, 0x20	; 32
    1ad6:	51 e4       	ldi	r21, 0x41	; 65
    1ad8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	bc 01       	movw	r22, r24
    1ae2:	cd 01       	movw	r24, r26
    1ae4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	9a a3       	std	Y+34, r25	; 0x22
    1aee:	89 a3       	std	Y+33, r24	; 0x21
    1af0:	0f c0       	rjmp	.+30     	; 0x1b10 <LCD_sendCommand+0x1c0>
    1af2:	88 ec       	ldi	r24, 0xC8	; 200
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	98 a3       	std	Y+32, r25	; 0x20
    1af8:	8f 8f       	std	Y+31, r24	; 0x1f
    1afa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1afc:	98 a1       	ldd	r25, Y+32	; 0x20
    1afe:	01 97       	sbiw	r24, 0x01	; 1
    1b00:	f1 f7       	brne	.-4      	; 0x1afe <LCD_sendCommand+0x1ae>
    1b02:	98 a3       	std	Y+32, r25	; 0x20
    1b04:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b06:	89 a1       	ldd	r24, Y+33	; 0x21
    1b08:	9a a1       	ldd	r25, Y+34	; 0x22
    1b0a:	01 97       	sbiw	r24, 0x01	; 1
    1b0c:	9a a3       	std	Y+34, r25	; 0x22
    1b0e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b10:	89 a1       	ldd	r24, Y+33	; 0x21
    1b12:	9a a1       	ldd	r25, Y+34	; 0x22
    1b14:	00 97       	sbiw	r24, 0x00	; 0
    1b16:	69 f7       	brne	.-38     	; 0x1af2 <LCD_sendCommand+0x1a2>
    1b18:	14 c0       	rjmp	.+40     	; 0x1b42 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b1a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b1c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b1e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b20:	9e a1       	ldd	r25, Y+38	; 0x26
    1b22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	9a a3       	std	Y+34, r25	; 0x22
    1b2c:	89 a3       	std	Y+33, r24	; 0x21
    1b2e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b30:	9a a1       	ldd	r25, Y+34	; 0x22
    1b32:	9e 8f       	std	Y+30, r25	; 0x1e
    1b34:	8d 8f       	std	Y+29, r24	; 0x1d
    1b36:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b38:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b3a:	01 97       	sbiw	r24, 0x01	; 1
    1b3c:	f1 f7       	brne	.-4      	; 0x1b3a <LCD_sendCommand+0x1ea>
    1b3e:	9e 8f       	std	Y+30, r25	; 0x1e
    1b40:	8d 8f       	std	Y+29, r24	; 0x1d
		GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(command, 1));
		GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(command, 2));
		GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(command, 3));

	#elif(LCD_DATA_BITS_MODE == 8)
		GPIO_writePort(LCD_DATA_PORT_ID, command); /* out the required command to the data bus D0 --> D7 */
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	69 ad       	ldd	r22, Y+57	; 0x39
    1b46:	0e 94 c8 0b 	call	0x1790	; 0x1790 <GPIO_writePort>
    1b4a:	80 e0       	ldi	r24, 0x00	; 0
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	a0 e8       	ldi	r26, 0x80	; 128
    1b50:	bf e3       	ldi	r27, 0x3F	; 63
    1b52:	89 8f       	std	Y+25, r24	; 0x19
    1b54:	9a 8f       	std	Y+26, r25	; 0x1a
    1b56:	ab 8f       	std	Y+27, r26	; 0x1b
    1b58:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b5a:	69 8d       	ldd	r22, Y+25	; 0x19
    1b5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	4a ef       	ldi	r20, 0xFA	; 250
    1b68:	54 e4       	ldi	r21, 0x44	; 68
    1b6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	8d 8b       	std	Y+21, r24	; 0x15
    1b74:	9e 8b       	std	Y+22, r25	; 0x16
    1b76:	af 8b       	std	Y+23, r26	; 0x17
    1b78:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b7a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b7c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b80:	98 8d       	ldd	r25, Y+24	; 0x18
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	40 e8       	ldi	r20, 0x80	; 128
    1b88:	5f e3       	ldi	r21, 0x3F	; 63
    1b8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b8e:	88 23       	and	r24, r24
    1b90:	2c f4       	brge	.+10     	; 0x1b9c <LCD_sendCommand+0x24c>
		__ticks = 1;
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	9c 8b       	std	Y+20, r25	; 0x14
    1b98:	8b 8b       	std	Y+19, r24	; 0x13
    1b9a:	3f c0       	rjmp	.+126    	; 0x1c1a <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1b9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	3f ef       	ldi	r19, 0xFF	; 255
    1ba8:	4f e7       	ldi	r20, 0x7F	; 127
    1baa:	57 e4       	ldi	r21, 0x47	; 71
    1bac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bb0:	18 16       	cp	r1, r24
    1bb2:	4c f5       	brge	.+82     	; 0x1c06 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb4:	69 8d       	ldd	r22, Y+25	; 0x19
    1bb6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	40 e2       	ldi	r20, 0x20	; 32
    1bc2:	51 e4       	ldi	r21, 0x41	; 65
    1bc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	bc 01       	movw	r22, r24
    1bce:	cd 01       	movw	r24, r26
    1bd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	9c 8b       	std	Y+20, r25	; 0x14
    1bda:	8b 8b       	std	Y+19, r24	; 0x13
    1bdc:	0f c0       	rjmp	.+30     	; 0x1bfc <LCD_sendCommand+0x2ac>
    1bde:	88 ec       	ldi	r24, 0xC8	; 200
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	9a 8b       	std	Y+18, r25	; 0x12
    1be4:	89 8b       	std	Y+17, r24	; 0x11
    1be6:	89 89       	ldd	r24, Y+17	; 0x11
    1be8:	9a 89       	ldd	r25, Y+18	; 0x12
    1bea:	01 97       	sbiw	r24, 0x01	; 1
    1bec:	f1 f7       	brne	.-4      	; 0x1bea <LCD_sendCommand+0x29a>
    1bee:	9a 8b       	std	Y+18, r25	; 0x12
    1bf0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf2:	8b 89       	ldd	r24, Y+19	; 0x13
    1bf4:	9c 89       	ldd	r25, Y+20	; 0x14
    1bf6:	01 97       	sbiw	r24, 0x01	; 1
    1bf8:	9c 8b       	std	Y+20, r25	; 0x14
    1bfa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bfc:	8b 89       	ldd	r24, Y+19	; 0x13
    1bfe:	9c 89       	ldd	r25, Y+20	; 0x14
    1c00:	00 97       	sbiw	r24, 0x00	; 0
    1c02:	69 f7       	brne	.-38     	; 0x1bde <LCD_sendCommand+0x28e>
    1c04:	14 c0       	rjmp	.+40     	; 0x1c2e <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c06:	6d 89       	ldd	r22, Y+21	; 0x15
    1c08:	7e 89       	ldd	r23, Y+22	; 0x16
    1c0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	9c 8b       	std	Y+20, r25	; 0x14
    1c18:	8b 8b       	std	Y+19, r24	; 0x13
    1c1a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c1c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c1e:	98 8b       	std	Y+16, r25	; 0x10
    1c20:	8f 87       	std	Y+15, r24	; 0x0f
    1c22:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c24:	98 89       	ldd	r25, Y+16	; 0x10
    1c26:	01 97       	sbiw	r24, 0x01	; 1
    1c28:	f1 f7       	brne	.-4      	; 0x1c26 <LCD_sendCommand+0x2d6>
    1c2a:	98 8b       	std	Y+16, r25	; 0x10
    1c2c:	8f 87       	std	Y+15, r24	; 0x0f
	#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_EN_PORT_ID, LCD_EN_PIN_ID, LOGIC_LOW); /* Disable LCD EN = 0 */
    1c2e:	82 e0       	ldi	r24, 0x02	; 2
    1c30:	61 e0       	ldi	r22, 0x01	; 1
    1c32:	40 e0       	ldi	r20, 0x00	; 0
    1c34:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <GPIO_writePin>
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	a0 e8       	ldi	r26, 0x80	; 128
    1c3e:	bf e3       	ldi	r27, 0x3F	; 63
    1c40:	8b 87       	std	Y+11, r24	; 0x0b
    1c42:	9c 87       	std	Y+12, r25	; 0x0c
    1c44:	ad 87       	std	Y+13, r26	; 0x0d
    1c46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	4a ef       	ldi	r20, 0xFA	; 250
    1c56:	54 e4       	ldi	r21, 0x44	; 68
    1c58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	8f 83       	std	Y+7, r24	; 0x07
    1c62:	98 87       	std	Y+8, r25	; 0x08
    1c64:	a9 87       	std	Y+9, r26	; 0x09
    1c66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c68:	6f 81       	ldd	r22, Y+7	; 0x07
    1c6a:	78 85       	ldd	r23, Y+8	; 0x08
    1c6c:	89 85       	ldd	r24, Y+9	; 0x09
    1c6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	40 e8       	ldi	r20, 0x80	; 128
    1c76:	5f e3       	ldi	r21, 0x3F	; 63
    1c78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c7c:	88 23       	and	r24, r24
    1c7e:	2c f4       	brge	.+10     	; 0x1c8a <LCD_sendCommand+0x33a>
		__ticks = 1;
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	9e 83       	std	Y+6, r25	; 0x06
    1c86:	8d 83       	std	Y+5, r24	; 0x05
    1c88:	3f c0       	rjmp	.+126    	; 0x1d08 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1c8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c8c:	78 85       	ldd	r23, Y+8	; 0x08
    1c8e:	89 85       	ldd	r24, Y+9	; 0x09
    1c90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	3f ef       	ldi	r19, 0xFF	; 255
    1c96:	4f e7       	ldi	r20, 0x7F	; 127
    1c98:	57 e4       	ldi	r21, 0x47	; 71
    1c9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c9e:	18 16       	cp	r1, r24
    1ca0:	4c f5       	brge	.+82     	; 0x1cf4 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ca6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ca8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	40 e2       	ldi	r20, 0x20	; 32
    1cb0:	51 e4       	ldi	r21, 0x41	; 65
    1cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	bc 01       	movw	r22, r24
    1cbc:	cd 01       	movw	r24, r26
    1cbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	9e 83       	std	Y+6, r25	; 0x06
    1cc8:	8d 83       	std	Y+5, r24	; 0x05
    1cca:	0f c0       	rjmp	.+30     	; 0x1cea <LCD_sendCommand+0x39a>
    1ccc:	88 ec       	ldi	r24, 0xC8	; 200
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	9c 83       	std	Y+4, r25	; 0x04
    1cd2:	8b 83       	std	Y+3, r24	; 0x03
    1cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd8:	01 97       	sbiw	r24, 0x01	; 1
    1cda:	f1 f7       	brne	.-4      	; 0x1cd8 <LCD_sendCommand+0x388>
    1cdc:	9c 83       	std	Y+4, r25	; 0x04
    1cde:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce4:	01 97       	sbiw	r24, 0x01	; 1
    1ce6:	9e 83       	std	Y+6, r25	; 0x06
    1ce8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cea:	8d 81       	ldd	r24, Y+5	; 0x05
    1cec:	9e 81       	ldd	r25, Y+6	; 0x06
    1cee:	00 97       	sbiw	r24, 0x00	; 0
    1cf0:	69 f7       	brne	.-38     	; 0x1ccc <LCD_sendCommand+0x37c>
    1cf2:	14 c0       	rjmp	.+40     	; 0x1d1c <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf4:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf6:	78 85       	ldd	r23, Y+8	; 0x08
    1cf8:	89 85       	ldd	r24, Y+9	; 0x09
    1cfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	9e 83       	std	Y+6, r25	; 0x06
    1d06:	8d 83       	std	Y+5, r24	; 0x05
    1d08:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0c:	9a 83       	std	Y+2, r25	; 0x02
    1d0e:	89 83       	std	Y+1, r24	; 0x01
    1d10:	89 81       	ldd	r24, Y+1	; 0x01
    1d12:	9a 81       	ldd	r25, Y+2	; 0x02
    1d14:	01 97       	sbiw	r24, 0x01	; 1
    1d16:	f1 f7       	brne	.-4      	; 0x1d14 <LCD_sendCommand+0x3c4>
    1d18:	9a 83       	std	Y+2, r25	; 0x02
    1d1a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1d1c:	e9 96       	adiw	r28, 0x39	; 57
    1d1e:	0f b6       	in	r0, 0x3f	; 63
    1d20:	f8 94       	cli
    1d22:	de bf       	out	0x3e, r29	; 62
    1d24:	0f be       	out	0x3f, r0	; 63
    1d26:	cd bf       	out	0x3d, r28	; 61
    1d28:	cf 91       	pop	r28
    1d2a:	df 91       	pop	r29
    1d2c:	08 95       	ret

00001d2e <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1d2e:	df 93       	push	r29
    1d30:	cf 93       	push	r28
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
    1d36:	e9 97       	sbiw	r28, 0x39	; 57
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	f8 94       	cli
    1d3c:	de bf       	out	0x3e, r29	; 62
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	cd bf       	out	0x3d, r28	; 61
    1d42:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH); /* Data Mode RS = 1 */
    1d44:	82 e0       	ldi	r24, 0x02	; 2
    1d46:	60 e0       	ldi	r22, 0x00	; 0
    1d48:	41 e0       	ldi	r20, 0x01	; 1
    1d4a:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <GPIO_writePin>
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	a0 e8       	ldi	r26, 0x80	; 128
    1d54:	bf e3       	ldi	r27, 0x3F	; 63
    1d56:	8d ab       	std	Y+53, r24	; 0x35
    1d58:	9e ab       	std	Y+54, r25	; 0x36
    1d5a:	af ab       	std	Y+55, r26	; 0x37
    1d5c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d5e:	6d a9       	ldd	r22, Y+53	; 0x35
    1d60:	7e a9       	ldd	r23, Y+54	; 0x36
    1d62:	8f a9       	ldd	r24, Y+55	; 0x37
    1d64:	98 ad       	ldd	r25, Y+56	; 0x38
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	4a ef       	ldi	r20, 0xFA	; 250
    1d6c:	54 e4       	ldi	r21, 0x44	; 68
    1d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	89 ab       	std	Y+49, r24	; 0x31
    1d78:	9a ab       	std	Y+50, r25	; 0x32
    1d7a:	ab ab       	std	Y+51, r26	; 0x33
    1d7c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d7e:	69 a9       	ldd	r22, Y+49	; 0x31
    1d80:	7a a9       	ldd	r23, Y+50	; 0x32
    1d82:	8b a9       	ldd	r24, Y+51	; 0x33
    1d84:	9c a9       	ldd	r25, Y+52	; 0x34
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	40 e8       	ldi	r20, 0x80	; 128
    1d8c:	5f e3       	ldi	r21, 0x3F	; 63
    1d8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d92:	88 23       	and	r24, r24
    1d94:	2c f4       	brge	.+10     	; 0x1da0 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	98 ab       	std	Y+48, r25	; 0x30
    1d9c:	8f a7       	std	Y+47, r24	; 0x2f
    1d9e:	3f c0       	rjmp	.+126    	; 0x1e1e <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1da0:	69 a9       	ldd	r22, Y+49	; 0x31
    1da2:	7a a9       	ldd	r23, Y+50	; 0x32
    1da4:	8b a9       	ldd	r24, Y+51	; 0x33
    1da6:	9c a9       	ldd	r25, Y+52	; 0x34
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	3f ef       	ldi	r19, 0xFF	; 255
    1dac:	4f e7       	ldi	r20, 0x7F	; 127
    1dae:	57 e4       	ldi	r21, 0x47	; 71
    1db0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1db4:	18 16       	cp	r1, r24
    1db6:	4c f5       	brge	.+82     	; 0x1e0a <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db8:	6d a9       	ldd	r22, Y+53	; 0x35
    1dba:	7e a9       	ldd	r23, Y+54	; 0x36
    1dbc:	8f a9       	ldd	r24, Y+55	; 0x37
    1dbe:	98 ad       	ldd	r25, Y+56	; 0x38
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	40 e2       	ldi	r20, 0x20	; 32
    1dc6:	51 e4       	ldi	r21, 0x41	; 65
    1dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	bc 01       	movw	r22, r24
    1dd2:	cd 01       	movw	r24, r26
    1dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	98 ab       	std	Y+48, r25	; 0x30
    1dde:	8f a7       	std	Y+47, r24	; 0x2f
    1de0:	0f c0       	rjmp	.+30     	; 0x1e00 <LCD_displayCharacter+0xd2>
    1de2:	88 ec       	ldi	r24, 0xC8	; 200
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	9e a7       	std	Y+46, r25	; 0x2e
    1de8:	8d a7       	std	Y+45, r24	; 0x2d
    1dea:	8d a5       	ldd	r24, Y+45	; 0x2d
    1dec:	9e a5       	ldd	r25, Y+46	; 0x2e
    1dee:	01 97       	sbiw	r24, 0x01	; 1
    1df0:	f1 f7       	brne	.-4      	; 0x1dee <LCD_displayCharacter+0xc0>
    1df2:	9e a7       	std	Y+46, r25	; 0x2e
    1df4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1df8:	98 a9       	ldd	r25, Y+48	; 0x30
    1dfa:	01 97       	sbiw	r24, 0x01	; 1
    1dfc:	98 ab       	std	Y+48, r25	; 0x30
    1dfe:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e00:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e02:	98 a9       	ldd	r25, Y+48	; 0x30
    1e04:	00 97       	sbiw	r24, 0x00	; 0
    1e06:	69 f7       	brne	.-38     	; 0x1de2 <LCD_displayCharacter+0xb4>
    1e08:	14 c0       	rjmp	.+40     	; 0x1e32 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e0a:	69 a9       	ldd	r22, Y+49	; 0x31
    1e0c:	7a a9       	ldd	r23, Y+50	; 0x32
    1e0e:	8b a9       	ldd	r24, Y+51	; 0x33
    1e10:	9c a9       	ldd	r25, Y+52	; 0x34
    1e12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	98 ab       	std	Y+48, r25	; 0x30
    1e1c:	8f a7       	std	Y+47, r24	; 0x2f
    1e1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e20:	98 a9       	ldd	r25, Y+48	; 0x30
    1e22:	9c a7       	std	Y+44, r25	; 0x2c
    1e24:	8b a7       	std	Y+43, r24	; 0x2b
    1e26:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e28:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e2a:	01 97       	sbiw	r24, 0x01	; 1
    1e2c:	f1 f7       	brne	.-4      	; 0x1e2a <LCD_displayCharacter+0xfc>
    1e2e:	9c a7       	std	Y+44, r25	; 0x2c
    1e30:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_EN_PORT_ID, LCD_EN_PIN_ID, LOGIC_HIGH); /* Enable LCD EN = 1 */
    1e32:	82 e0       	ldi	r24, 0x02	; 2
    1e34:	61 e0       	ldi	r22, 0x01	; 1
    1e36:	41 e0       	ldi	r20, 0x01	; 1
    1e38:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <GPIO_writePin>
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	a0 e8       	ldi	r26, 0x80	; 128
    1e42:	bf e3       	ldi	r27, 0x3F	; 63
    1e44:	8f a3       	std	Y+39, r24	; 0x27
    1e46:	98 a7       	std	Y+40, r25	; 0x28
    1e48:	a9 a7       	std	Y+41, r26	; 0x29
    1e4a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e4c:	6f a1       	ldd	r22, Y+39	; 0x27
    1e4e:	78 a5       	ldd	r23, Y+40	; 0x28
    1e50:	89 a5       	ldd	r24, Y+41	; 0x29
    1e52:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	4a ef       	ldi	r20, 0xFA	; 250
    1e5a:	54 e4       	ldi	r21, 0x44	; 68
    1e5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	8b a3       	std	Y+35, r24	; 0x23
    1e66:	9c a3       	std	Y+36, r25	; 0x24
    1e68:	ad a3       	std	Y+37, r26	; 0x25
    1e6a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e6c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e6e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e70:	8d a1       	ldd	r24, Y+37	; 0x25
    1e72:	9e a1       	ldd	r25, Y+38	; 0x26
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	40 e8       	ldi	r20, 0x80	; 128
    1e7a:	5f e3       	ldi	r21, 0x3F	; 63
    1e7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e80:	88 23       	and	r24, r24
    1e82:	2c f4       	brge	.+10     	; 0x1e8e <LCD_displayCharacter+0x160>
		__ticks = 1;
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	9a a3       	std	Y+34, r25	; 0x22
    1e8a:	89 a3       	std	Y+33, r24	; 0x21
    1e8c:	3f c0       	rjmp	.+126    	; 0x1f0c <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1e8e:	6b a1       	ldd	r22, Y+35	; 0x23
    1e90:	7c a1       	ldd	r23, Y+36	; 0x24
    1e92:	8d a1       	ldd	r24, Y+37	; 0x25
    1e94:	9e a1       	ldd	r25, Y+38	; 0x26
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	3f ef       	ldi	r19, 0xFF	; 255
    1e9a:	4f e7       	ldi	r20, 0x7F	; 127
    1e9c:	57 e4       	ldi	r21, 0x47	; 71
    1e9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ea2:	18 16       	cp	r1, r24
    1ea4:	4c f5       	brge	.+82     	; 0x1ef8 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea6:	6f a1       	ldd	r22, Y+39	; 0x27
    1ea8:	78 a5       	ldd	r23, Y+40	; 0x28
    1eaa:	89 a5       	ldd	r24, Y+41	; 0x29
    1eac:	9a a5       	ldd	r25, Y+42	; 0x2a
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	40 e2       	ldi	r20, 0x20	; 32
    1eb4:	51 e4       	ldi	r21, 0x41	; 65
    1eb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eba:	dc 01       	movw	r26, r24
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	bc 01       	movw	r22, r24
    1ec0:	cd 01       	movw	r24, r26
    1ec2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	9a a3       	std	Y+34, r25	; 0x22
    1ecc:	89 a3       	std	Y+33, r24	; 0x21
    1ece:	0f c0       	rjmp	.+30     	; 0x1eee <LCD_displayCharacter+0x1c0>
    1ed0:	88 ec       	ldi	r24, 0xC8	; 200
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	98 a3       	std	Y+32, r25	; 0x20
    1ed6:	8f 8f       	std	Y+31, r24	; 0x1f
    1ed8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1eda:	98 a1       	ldd	r25, Y+32	; 0x20
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	f1 f7       	brne	.-4      	; 0x1edc <LCD_displayCharacter+0x1ae>
    1ee0:	98 a3       	std	Y+32, r25	; 0x20
    1ee2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee4:	89 a1       	ldd	r24, Y+33	; 0x21
    1ee6:	9a a1       	ldd	r25, Y+34	; 0x22
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	9a a3       	std	Y+34, r25	; 0x22
    1eec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eee:	89 a1       	ldd	r24, Y+33	; 0x21
    1ef0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ef2:	00 97       	sbiw	r24, 0x00	; 0
    1ef4:	69 f7       	brne	.-38     	; 0x1ed0 <LCD_displayCharacter+0x1a2>
    1ef6:	14 c0       	rjmp	.+40     	; 0x1f20 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef8:	6b a1       	ldd	r22, Y+35	; 0x23
    1efa:	7c a1       	ldd	r23, Y+36	; 0x24
    1efc:	8d a1       	ldd	r24, Y+37	; 0x25
    1efe:	9e a1       	ldd	r25, Y+38	; 0x26
    1f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	9a a3       	std	Y+34, r25	; 0x22
    1f0a:	89 a3       	std	Y+33, r24	; 0x21
    1f0c:	89 a1       	ldd	r24, Y+33	; 0x21
    1f0e:	9a a1       	ldd	r25, Y+34	; 0x22
    1f10:	9e 8f       	std	Y+30, r25	; 0x1e
    1f12:	8d 8f       	std	Y+29, r24	; 0x1d
    1f14:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f16:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f18:	01 97       	sbiw	r24, 0x01	; 1
    1f1a:	f1 f7       	brne	.-4      	; 0x1f18 <LCD_displayCharacter+0x1ea>
    1f1c:	9e 8f       	std	Y+30, r25	; 0x1e
    1f1e:	8d 8f       	std	Y+29, r24	; 0x1d
		GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(data, 1));
		GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(data, 2));
		GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(data, 3));

	#elif(LCD_DATA_BITS_MODE == 8)
		GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	69 ad       	ldd	r22, Y+57	; 0x39
    1f24:	0e 94 c8 0b 	call	0x1790	; 0x1790 <GPIO_writePort>
    1f28:	80 e0       	ldi	r24, 0x00	; 0
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	a0 e8       	ldi	r26, 0x80	; 128
    1f2e:	bf e3       	ldi	r27, 0x3F	; 63
    1f30:	89 8f       	std	Y+25, r24	; 0x19
    1f32:	9a 8f       	std	Y+26, r25	; 0x1a
    1f34:	ab 8f       	std	Y+27, r26	; 0x1b
    1f36:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f38:	69 8d       	ldd	r22, Y+25	; 0x19
    1f3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	4a ef       	ldi	r20, 0xFA	; 250
    1f46:	54 e4       	ldi	r21, 0x44	; 68
    1f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	8d 8b       	std	Y+21, r24	; 0x15
    1f52:	9e 8b       	std	Y+22, r25	; 0x16
    1f54:	af 8b       	std	Y+23, r26	; 0x17
    1f56:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f58:	6d 89       	ldd	r22, Y+21	; 0x15
    1f5a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f5c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f5e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	40 e8       	ldi	r20, 0x80	; 128
    1f66:	5f e3       	ldi	r21, 0x3F	; 63
    1f68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f6c:	88 23       	and	r24, r24
    1f6e:	2c f4       	brge	.+10     	; 0x1f7a <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	9c 8b       	std	Y+20, r25	; 0x14
    1f76:	8b 8b       	std	Y+19, r24	; 0x13
    1f78:	3f c0       	rjmp	.+126    	; 0x1ff8 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1f7a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f7c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f80:	98 8d       	ldd	r25, Y+24	; 0x18
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	3f ef       	ldi	r19, 0xFF	; 255
    1f86:	4f e7       	ldi	r20, 0x7F	; 127
    1f88:	57 e4       	ldi	r21, 0x47	; 71
    1f8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f8e:	18 16       	cp	r1, r24
    1f90:	4c f5       	brge	.+82     	; 0x1fe4 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f92:	69 8d       	ldd	r22, Y+25	; 0x19
    1f94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	40 e2       	ldi	r20, 0x20	; 32
    1fa0:	51 e4       	ldi	r21, 0x41	; 65
    1fa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	bc 01       	movw	r22, r24
    1fac:	cd 01       	movw	r24, r26
    1fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	9c 8b       	std	Y+20, r25	; 0x14
    1fb8:	8b 8b       	std	Y+19, r24	; 0x13
    1fba:	0f c0       	rjmp	.+30     	; 0x1fda <LCD_displayCharacter+0x2ac>
    1fbc:	88 ec       	ldi	r24, 0xC8	; 200
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	9a 8b       	std	Y+18, r25	; 0x12
    1fc2:	89 8b       	std	Y+17, r24	; 0x11
    1fc4:	89 89       	ldd	r24, Y+17	; 0x11
    1fc6:	9a 89       	ldd	r25, Y+18	; 0x12
    1fc8:	01 97       	sbiw	r24, 0x01	; 1
    1fca:	f1 f7       	brne	.-4      	; 0x1fc8 <LCD_displayCharacter+0x29a>
    1fcc:	9a 8b       	std	Y+18, r25	; 0x12
    1fce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd0:	8b 89       	ldd	r24, Y+19	; 0x13
    1fd2:	9c 89       	ldd	r25, Y+20	; 0x14
    1fd4:	01 97       	sbiw	r24, 0x01	; 1
    1fd6:	9c 8b       	std	Y+20, r25	; 0x14
    1fd8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fda:	8b 89       	ldd	r24, Y+19	; 0x13
    1fdc:	9c 89       	ldd	r25, Y+20	; 0x14
    1fde:	00 97       	sbiw	r24, 0x00	; 0
    1fe0:	69 f7       	brne	.-38     	; 0x1fbc <LCD_displayCharacter+0x28e>
    1fe2:	14 c0       	rjmp	.+40     	; 0x200c <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe4:	6d 89       	ldd	r22, Y+21	; 0x15
    1fe6:	7e 89       	ldd	r23, Y+22	; 0x16
    1fe8:	8f 89       	ldd	r24, Y+23	; 0x17
    1fea:	98 8d       	ldd	r25, Y+24	; 0x18
    1fec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	9c 8b       	std	Y+20, r25	; 0x14
    1ff6:	8b 8b       	std	Y+19, r24	; 0x13
    1ff8:	8b 89       	ldd	r24, Y+19	; 0x13
    1ffa:	9c 89       	ldd	r25, Y+20	; 0x14
    1ffc:	98 8b       	std	Y+16, r25	; 0x10
    1ffe:	8f 87       	std	Y+15, r24	; 0x0f
    2000:	8f 85       	ldd	r24, Y+15	; 0x0f
    2002:	98 89       	ldd	r25, Y+16	; 0x10
    2004:	01 97       	sbiw	r24, 0x01	; 1
    2006:	f1 f7       	brne	.-4      	; 0x2004 <LCD_displayCharacter+0x2d6>
    2008:	98 8b       	std	Y+16, r25	; 0x10
    200a:	8f 87       	std	Y+15, r24	; 0x0f
	#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_EN_PORT_ID, LCD_EN_PIN_ID, LOGIC_LOW); /* Disable LCD EN = 0 */
    200c:	82 e0       	ldi	r24, 0x02	; 2
    200e:	61 e0       	ldi	r22, 0x01	; 1
    2010:	40 e0       	ldi	r20, 0x00	; 0
    2012:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <GPIO_writePin>
    2016:	80 e0       	ldi	r24, 0x00	; 0
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	a0 e8       	ldi	r26, 0x80	; 128
    201c:	bf e3       	ldi	r27, 0x3F	; 63
    201e:	8b 87       	std	Y+11, r24	; 0x0b
    2020:	9c 87       	std	Y+12, r25	; 0x0c
    2022:	ad 87       	std	Y+13, r26	; 0x0d
    2024:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2026:	6b 85       	ldd	r22, Y+11	; 0x0b
    2028:	7c 85       	ldd	r23, Y+12	; 0x0c
    202a:	8d 85       	ldd	r24, Y+13	; 0x0d
    202c:	9e 85       	ldd	r25, Y+14	; 0x0e
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	4a ef       	ldi	r20, 0xFA	; 250
    2034:	54 e4       	ldi	r21, 0x44	; 68
    2036:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203a:	dc 01       	movw	r26, r24
    203c:	cb 01       	movw	r24, r22
    203e:	8f 83       	std	Y+7, r24	; 0x07
    2040:	98 87       	std	Y+8, r25	; 0x08
    2042:	a9 87       	std	Y+9, r26	; 0x09
    2044:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2046:	6f 81       	ldd	r22, Y+7	; 0x07
    2048:	78 85       	ldd	r23, Y+8	; 0x08
    204a:	89 85       	ldd	r24, Y+9	; 0x09
    204c:	9a 85       	ldd	r25, Y+10	; 0x0a
    204e:	20 e0       	ldi	r18, 0x00	; 0
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	40 e8       	ldi	r20, 0x80	; 128
    2054:	5f e3       	ldi	r21, 0x3F	; 63
    2056:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    205a:	88 23       	and	r24, r24
    205c:	2c f4       	brge	.+10     	; 0x2068 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	9e 83       	std	Y+6, r25	; 0x06
    2064:	8d 83       	std	Y+5, r24	; 0x05
    2066:	3f c0       	rjmp	.+126    	; 0x20e6 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2068:	6f 81       	ldd	r22, Y+7	; 0x07
    206a:	78 85       	ldd	r23, Y+8	; 0x08
    206c:	89 85       	ldd	r24, Y+9	; 0x09
    206e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	3f ef       	ldi	r19, 0xFF	; 255
    2074:	4f e7       	ldi	r20, 0x7F	; 127
    2076:	57 e4       	ldi	r21, 0x47	; 71
    2078:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    207c:	18 16       	cp	r1, r24
    207e:	4c f5       	brge	.+82     	; 0x20d2 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2080:	6b 85       	ldd	r22, Y+11	; 0x0b
    2082:	7c 85       	ldd	r23, Y+12	; 0x0c
    2084:	8d 85       	ldd	r24, Y+13	; 0x0d
    2086:	9e 85       	ldd	r25, Y+14	; 0x0e
    2088:	20 e0       	ldi	r18, 0x00	; 0
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	40 e2       	ldi	r20, 0x20	; 32
    208e:	51 e4       	ldi	r21, 0x41	; 65
    2090:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	bc 01       	movw	r22, r24
    209a:	cd 01       	movw	r24, r26
    209c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	9e 83       	std	Y+6, r25	; 0x06
    20a6:	8d 83       	std	Y+5, r24	; 0x05
    20a8:	0f c0       	rjmp	.+30     	; 0x20c8 <LCD_displayCharacter+0x39a>
    20aa:	88 ec       	ldi	r24, 0xC8	; 200
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	9c 83       	std	Y+4, r25	; 0x04
    20b0:	8b 83       	std	Y+3, r24	; 0x03
    20b2:	8b 81       	ldd	r24, Y+3	; 0x03
    20b4:	9c 81       	ldd	r25, Y+4	; 0x04
    20b6:	01 97       	sbiw	r24, 0x01	; 1
    20b8:	f1 f7       	brne	.-4      	; 0x20b6 <LCD_displayCharacter+0x388>
    20ba:	9c 83       	std	Y+4, r25	; 0x04
    20bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20be:	8d 81       	ldd	r24, Y+5	; 0x05
    20c0:	9e 81       	ldd	r25, Y+6	; 0x06
    20c2:	01 97       	sbiw	r24, 0x01	; 1
    20c4:	9e 83       	std	Y+6, r25	; 0x06
    20c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ca:	9e 81       	ldd	r25, Y+6	; 0x06
    20cc:	00 97       	sbiw	r24, 0x00	; 0
    20ce:	69 f7       	brne	.-38     	; 0x20aa <LCD_displayCharacter+0x37c>
    20d0:	14 c0       	rjmp	.+40     	; 0x20fa <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d2:	6f 81       	ldd	r22, Y+7	; 0x07
    20d4:	78 85       	ldd	r23, Y+8	; 0x08
    20d6:	89 85       	ldd	r24, Y+9	; 0x09
    20d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20de:	dc 01       	movw	r26, r24
    20e0:	cb 01       	movw	r24, r22
    20e2:	9e 83       	std	Y+6, r25	; 0x06
    20e4:	8d 83       	std	Y+5, r24	; 0x05
    20e6:	8d 81       	ldd	r24, Y+5	; 0x05
    20e8:	9e 81       	ldd	r25, Y+6	; 0x06
    20ea:	9a 83       	std	Y+2, r25	; 0x02
    20ec:	89 83       	std	Y+1, r24	; 0x01
    20ee:	89 81       	ldd	r24, Y+1	; 0x01
    20f0:	9a 81       	ldd	r25, Y+2	; 0x02
    20f2:	01 97       	sbiw	r24, 0x01	; 1
    20f4:	f1 f7       	brne	.-4      	; 0x20f2 <LCD_displayCharacter+0x3c4>
    20f6:	9a 83       	std	Y+2, r25	; 0x02
    20f8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    20fa:	e9 96       	adiw	r28, 0x39	; 57
    20fc:	0f b6       	in	r0, 0x3f	; 63
    20fe:	f8 94       	cli
    2100:	de bf       	out	0x3e, r29	; 62
    2102:	0f be       	out	0x3f, r0	; 63
    2104:	cd bf       	out	0x3d, r28	; 61
    2106:	cf 91       	pop	r28
    2108:	df 91       	pop	r29
    210a:	08 95       	ret

0000210c <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    210c:	df 93       	push	r29
    210e:	cf 93       	push	r28
    2110:	00 d0       	rcall	.+0      	; 0x2112 <LCD_displayString+0x6>
    2112:	0f 92       	push	r0
    2114:	cd b7       	in	r28, 0x3d	; 61
    2116:	de b7       	in	r29, 0x3e	; 62
    2118:	9b 83       	std	Y+3, r25	; 0x03
    211a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 count = 0;
    211c:	19 82       	std	Y+1, r1	; 0x01
    211e:	0e c0       	rjmp	.+28     	; 0x213c <LCD_displayString+0x30>
	while(Str[count] != '\0')
	{
		LCD_displayCharacter(Str[count]);
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	28 2f       	mov	r18, r24
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	8a 81       	ldd	r24, Y+2	; 0x02
    2128:	9b 81       	ldd	r25, Y+3	; 0x03
    212a:	fc 01       	movw	r30, r24
    212c:	e2 0f       	add	r30, r18
    212e:	f3 1f       	adc	r31, r19
    2130:	80 81       	ld	r24, Z
    2132:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <LCD_displayCharacter>
		count++;
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	8f 5f       	subi	r24, 0xFF	; 255
    213a:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 count = 0;
	while(Str[count] != '\0')
    213c:	89 81       	ldd	r24, Y+1	; 0x01
    213e:	28 2f       	mov	r18, r24
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	8a 81       	ldd	r24, Y+2	; 0x02
    2144:	9b 81       	ldd	r25, Y+3	; 0x03
    2146:	fc 01       	movw	r30, r24
    2148:	e2 0f       	add	r30, r18
    214a:	f3 1f       	adc	r31, r19
    214c:	80 81       	ld	r24, Z
    214e:	88 23       	and	r24, r24
    2150:	39 f7       	brne	.-50     	; 0x2120 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	 *********************************************************/
}
    2152:	0f 90       	pop	r0
    2154:	0f 90       	pop	r0
    2156:	0f 90       	pop	r0
    2158:	cf 91       	pop	r28
    215a:	df 91       	pop	r29
    215c:	08 95       	ret

0000215e <LCD_moveCursor>:

void LCD_moveCursor(uint8 row, uint8 col)
{
    215e:	df 93       	push	r29
    2160:	cf 93       	push	r28
    2162:	00 d0       	rcall	.+0      	; 0x2164 <LCD_moveCursor+0x6>
    2164:	00 d0       	rcall	.+0      	; 0x2166 <LCD_moveCursor+0x8>
    2166:	0f 92       	push	r0
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
    216c:	8a 83       	std	Y+2, r24	; 0x02
    216e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2170:	8a 81       	ldd	r24, Y+2	; 0x02
    2172:	28 2f       	mov	r18, r24
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	3d 83       	std	Y+5, r19	; 0x05
    2178:	2c 83       	std	Y+4, r18	; 0x04
    217a:	8c 81       	ldd	r24, Y+4	; 0x04
    217c:	9d 81       	ldd	r25, Y+5	; 0x05
    217e:	81 30       	cpi	r24, 0x01	; 1
    2180:	91 05       	cpc	r25, r1
    2182:	c1 f0       	breq	.+48     	; 0x21b4 <LCD_moveCursor+0x56>
    2184:	2c 81       	ldd	r18, Y+4	; 0x04
    2186:	3d 81       	ldd	r19, Y+5	; 0x05
    2188:	22 30       	cpi	r18, 0x02	; 2
    218a:	31 05       	cpc	r19, r1
    218c:	2c f4       	brge	.+10     	; 0x2198 <LCD_moveCursor+0x3a>
    218e:	8c 81       	ldd	r24, Y+4	; 0x04
    2190:	9d 81       	ldd	r25, Y+5	; 0x05
    2192:	00 97       	sbiw	r24, 0x00	; 0
    2194:	61 f0       	breq	.+24     	; 0x21ae <LCD_moveCursor+0x50>
    2196:	19 c0       	rjmp	.+50     	; 0x21ca <LCD_moveCursor+0x6c>
    2198:	2c 81       	ldd	r18, Y+4	; 0x04
    219a:	3d 81       	ldd	r19, Y+5	; 0x05
    219c:	22 30       	cpi	r18, 0x02	; 2
    219e:	31 05       	cpc	r19, r1
    21a0:	69 f0       	breq	.+26     	; 0x21bc <LCD_moveCursor+0x5e>
    21a2:	8c 81       	ldd	r24, Y+4	; 0x04
    21a4:	9d 81       	ldd	r25, Y+5	; 0x05
    21a6:	83 30       	cpi	r24, 0x03	; 3
    21a8:	91 05       	cpc	r25, r1
    21aa:	61 f0       	breq	.+24     	; 0x21c4 <LCD_moveCursor+0x66>
    21ac:	0e c0       	rjmp	.+28     	; 0x21ca <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address = col + 0x00;
    21ae:	8b 81       	ldd	r24, Y+3	; 0x03
    21b0:	89 83       	std	Y+1, r24	; 0x01
    21b2:	0b c0       	rjmp	.+22     	; 0x21ca <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address = col + 0x40;
    21b4:	8b 81       	ldd	r24, Y+3	; 0x03
    21b6:	80 5c       	subi	r24, 0xC0	; 192
    21b8:	89 83       	std	Y+1, r24	; 0x01
    21ba:	07 c0       	rjmp	.+14     	; 0x21ca <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address = col + 0x10;
    21bc:	8b 81       	ldd	r24, Y+3	; 0x03
    21be:	80 5f       	subi	r24, 0xF0	; 240
    21c0:	89 83       	std	Y+1, r24	; 0x01
    21c2:	03 c0       	rjmp	.+6      	; 0x21ca <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address = col + 0x50;
    21c4:	8b 81       	ldd	r24, Y+3	; 0x03
    21c6:	80 5b       	subi	r24, 0xB0	; 176
    21c8:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    21ca:	89 81       	ldd	r24, Y+1	; 0x01
    21cc:	80 68       	ori	r24, 0x80	; 128
    21ce:	0e 94 a8 0c 	call	0x1950	; 0x1950 <LCD_sendCommand>
}
    21d2:	0f 90       	pop	r0
    21d4:	0f 90       	pop	r0
    21d6:	0f 90       	pop	r0
    21d8:	0f 90       	pop	r0
    21da:	0f 90       	pop	r0
    21dc:	cf 91       	pop	r28
    21de:	df 91       	pop	r29
    21e0:	08 95       	ret

000021e2 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str)
{
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	00 d0       	rcall	.+0      	; 0x21e8 <LCD_displayStringRowColumn+0x6>
    21e8:	00 d0       	rcall	.+0      	; 0x21ea <LCD_displayStringRowColumn+0x8>
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
    21ee:	89 83       	std	Y+1, r24	; 0x01
    21f0:	6a 83       	std	Y+2, r22	; 0x02
    21f2:	5c 83       	std	Y+4, r21	; 0x04
    21f4:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, col); /* go to to the required LCD position */
    21f6:	89 81       	ldd	r24, Y+1	; 0x01
    21f8:	6a 81       	ldd	r22, Y+2	; 0x02
    21fa:	0e 94 af 10 	call	0x215e	; 0x215e <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	9c 81       	ldd	r25, Y+4	; 0x04
    2202:	0e 94 86 10 	call	0x210c	; 0x210c <LCD_displayString>
}
    2206:	0f 90       	pop	r0
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	0f 90       	pop	r0
    220e:	cf 91       	pop	r28
    2210:	df 91       	pop	r29
    2212:	08 95       	ret

00002214 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    2214:	df 93       	push	r29
    2216:	cf 93       	push	r28
    2218:	cd b7       	in	r28, 0x3d	; 61
    221a:	de b7       	in	r29, 0x3e	; 62
    221c:	62 97       	sbiw	r28, 0x12	; 18
    221e:	0f b6       	in	r0, 0x3f	; 63
    2220:	f8 94       	cli
    2222:	de bf       	out	0x3e, r29	; 62
    2224:	0f be       	out	0x3f, r0	; 63
    2226:	cd bf       	out	0x3d, r28	; 61
    2228:	9a 8b       	std	Y+18, r25	; 0x12
    222a:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ASCII result */
	itoa(data, buff, 10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    222c:	89 89       	ldd	r24, Y+17	; 0x11
    222e:	9a 89       	ldd	r25, Y+18	; 0x12
    2230:	9e 01       	movw	r18, r28
    2232:	2f 5f       	subi	r18, 0xFF	; 255
    2234:	3f 4f       	sbci	r19, 0xFF	; 255
    2236:	b9 01       	movw	r22, r18
    2238:	4a e0       	ldi	r20, 0x0A	; 10
    223a:	50 e0       	ldi	r21, 0x00	; 0
    223c:	0e 94 6e 17 	call	0x2edc	; 0x2edc <itoa>
	LCD_displayString(buff); /* Display the string */
    2240:	ce 01       	movw	r24, r28
    2242:	01 96       	adiw	r24, 0x01	; 1
    2244:	0e 94 86 10 	call	0x210c	; 0x210c <LCD_displayString>
}
    2248:	62 96       	adiw	r28, 0x12	; 18
    224a:	0f b6       	in	r0, 0x3f	; 63
    224c:	f8 94       	cli
    224e:	de bf       	out	0x3e, r29	; 62
    2250:	0f be       	out	0x3f, r0	; 63
    2252:	cd bf       	out	0x3d, r28	; 61
    2254:	cf 91       	pop	r28
    2256:	df 91       	pop	r29
    2258:	08 95       	ret

0000225a <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    225a:	df 93       	push	r29
    225c:	cf 93       	push	r28
    225e:	cd b7       	in	r28, 0x3d	; 61
    2260:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	0e 94 a8 0c 	call	0x1950	; 0x1950 <LCD_sendCommand>
}
    2268:	cf 91       	pop	r28
    226a:	df 91       	pop	r29
    226c:	08 95       	ret

0000226e <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    226e:	df 93       	push	r29
    2270:	cf 93       	push	r28
    2272:	cd b7       	in	r28, 0x3d	; 61
    2274:	de b7       	in	r29, 0x3e	; 62
    2276:	60 97       	sbiw	r28, 0x10	; 16
    2278:	0f b6       	in	r0, 0x3f	; 63
    227a:	f8 94       	cli
    227c:	de bf       	out	0x3e, r29	; 62
    227e:	0f be       	out	0x3f, r0	; 63
    2280:	cd bf       	out	0x3d, r28	; 61
	uint8 col, row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + 0, PIN_INPUT);
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	60 e0       	ldi	r22, 0x00	; 0
    2286:	40 e0       	ldi	r20, 0x00	; 0
    2288:	0e 94 f5 08 	call	0x11ea	; 0x11ea <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + 1, PIN_INPUT);
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	61 e0       	ldi	r22, 0x01	; 1
    2290:	40 e0       	ldi	r20, 0x00	; 0
    2292:	0e 94 f5 08 	call	0x11ea	; 0x11ea <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + 2, PIN_INPUT);
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	62 e0       	ldi	r22, 0x02	; 2
    229a:	40 e0       	ldi	r20, 0x00	; 0
    229c:	0e 94 f5 08 	call	0x11ea	; 0x11ea <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + 3, PIN_INPUT);
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	63 e0       	ldi	r22, 0x03	; 3
    22a4:	40 e0       	ldi	r20, 0x00	; 0
    22a6:	0e 94 f5 08 	call	0x11ea	; 0x11ea <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 0, PIN_INPUT);
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	64 e0       	ldi	r22, 0x04	; 4
    22ae:	40 e0       	ldi	r20, 0x00	; 0
    22b0:	0e 94 f5 08 	call	0x11ea	; 0x11ea <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 1, PIN_INPUT);
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	65 e0       	ldi	r22, 0x05	; 5
    22b8:	40 e0       	ldi	r20, 0x00	; 0
    22ba:	0e 94 f5 08 	call	0x11ea	; 0x11ea <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 2, PIN_INPUT);
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	66 e0       	ldi	r22, 0x06	; 6
    22c2:	40 e0       	ldi	r20, 0x00	; 0
    22c4:	0e 94 f5 08 	call	0x11ea	; 0x11ea <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 3, PIN_INPUT);
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	67 e0       	ldi	r22, 0x07	; 7
    22cc:	40 e0       	ldi	r20, 0x00	; 0
    22ce:	0e 94 f5 08 	call	0x11ea	; 0x11ea <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row = 0 ; row < KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    22d2:	1f 86       	std	Y+15, r1	; 0x0f
    22d4:	ab c0       	rjmp	.+342    	; 0x242c <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row, PIN_OUTPUT);
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	6f 85       	ldd	r22, Y+15	; 0x0f
    22da:	41 e0       	ldi	r20, 0x01	; 1
    22dc:	0e 94 f5 08 	call	0x11ea	; 0x11ea <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row, KEYPAD_BUTTON_PRESSED);
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	6f 85       	ldd	r22, Y+15	; 0x0f
    22e4:	40 e0       	ldi	r20, 0x00	; 0
    22e6:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <GPIO_writePin>

			for(col = 0 ; col < KEYPAD_NUM_COLS ; col++) /* loop for columns */
    22ea:	18 8a       	std	Y+16, r1	; 0x10
    22ec:	22 c0       	rjmp	.+68     	; 0x2332 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + col) == KEYPAD_BUTTON_PRESSED)
    22ee:	88 89       	ldd	r24, Y+16	; 0x10
    22f0:	98 2f       	mov	r25, r24
    22f2:	9c 5f       	subi	r25, 0xFC	; 252
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	69 2f       	mov	r22, r25
    22f8:	0e 94 03 0b 	call	0x1606	; 0x1606 <GPIO_readPin>
    22fc:	88 23       	and	r24, r24
    22fe:	b1 f4       	brne	.+44     	; 0x232c <KEYPAD_getPressedKey+0xbe>
				{
				#if (KEYPAD_NUM_COLS == 3)
					return KEYPAD_4x3_adjustKeyNumber((row * KEYPAD_NUM_COLS) + col + 1);
				#elif (KEYPAD_NUM_COLS == 4)
					return KEYPAD_4x4_adjustKeyNumber((row * KEYPAD_NUM_COLS) + col + 1);
    2300:	8f 85       	ldd	r24, Y+15	; 0x0f
    2302:	88 2f       	mov	r24, r24
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	88 0f       	add	r24, r24
    2308:	99 1f       	adc	r25, r25
    230a:	88 0f       	add	r24, r24
    230c:	99 1f       	adc	r25, r25
    230e:	98 2f       	mov	r25, r24
    2310:	88 89       	ldd	r24, Y+16	; 0x10
    2312:	89 0f       	add	r24, r25
    2314:	8f 5f       	subi	r24, 0xFF	; 255
    2316:	0e 94 1b 12 	call	0x2436	; 0x2436 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row, PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    231a:	60 96       	adiw	r28, 0x10	; 16
    231c:	0f b6       	in	r0, 0x3f	; 63
    231e:	f8 94       	cli
    2320:	de bf       	out	0x3e, r29	; 62
    2322:	0f be       	out	0x3f, r0	; 63
    2324:	cd bf       	out	0x3d, r28	; 61
    2326:	cf 91       	pop	r28
    2328:	df 91       	pop	r29
    232a:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row, PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row, KEYPAD_BUTTON_PRESSED);

			for(col = 0 ; col < KEYPAD_NUM_COLS ; col++) /* loop for columns */
    232c:	88 89       	ldd	r24, Y+16	; 0x10
    232e:	8f 5f       	subi	r24, 0xFF	; 255
    2330:	88 8b       	std	Y+16, r24	; 0x10
    2332:	88 89       	ldd	r24, Y+16	; 0x10
    2334:	84 30       	cpi	r24, 0x04	; 4
    2336:	d8 f2       	brcs	.-74     	; 0x22ee <KEYPAD_getPressedKey+0x80>
				#elif (KEYPAD_NUM_COLS == 4)
					return KEYPAD_4x4_adjustKeyNumber((row * KEYPAD_NUM_COLS) + col + 1);
				#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row, PIN_INPUT);
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	6f 85       	ldd	r22, Y+15	; 0x0f
    233c:	40 e0       	ldi	r20, 0x00	; 0
    233e:	0e 94 f5 08 	call	0x11ea	; 0x11ea <GPIO_setupPinDirection>
    2342:	80 e0       	ldi	r24, 0x00	; 0
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	a0 ea       	ldi	r26, 0xA0	; 160
    2348:	b0 e4       	ldi	r27, 0x40	; 64
    234a:	8b 87       	std	Y+11, r24	; 0x0b
    234c:	9c 87       	std	Y+12, r25	; 0x0c
    234e:	ad 87       	std	Y+13, r26	; 0x0d
    2350:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2352:	6b 85       	ldd	r22, Y+11	; 0x0b
    2354:	7c 85       	ldd	r23, Y+12	; 0x0c
    2356:	8d 85       	ldd	r24, Y+13	; 0x0d
    2358:	9e 85       	ldd	r25, Y+14	; 0x0e
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	4a ef       	ldi	r20, 0xFA	; 250
    2360:	54 e4       	ldi	r21, 0x44	; 68
    2362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	8f 83       	std	Y+7, r24	; 0x07
    236c:	98 87       	std	Y+8, r25	; 0x08
    236e:	a9 87       	std	Y+9, r26	; 0x09
    2370:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2372:	6f 81       	ldd	r22, Y+7	; 0x07
    2374:	78 85       	ldd	r23, Y+8	; 0x08
    2376:	89 85       	ldd	r24, Y+9	; 0x09
    2378:	9a 85       	ldd	r25, Y+10	; 0x0a
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	40 e8       	ldi	r20, 0x80	; 128
    2380:	5f e3       	ldi	r21, 0x3F	; 63
    2382:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2386:	88 23       	and	r24, r24
    2388:	2c f4       	brge	.+10     	; 0x2394 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	9e 83       	std	Y+6, r25	; 0x06
    2390:	8d 83       	std	Y+5, r24	; 0x05
    2392:	3f c0       	rjmp	.+126    	; 0x2412 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    2394:	6f 81       	ldd	r22, Y+7	; 0x07
    2396:	78 85       	ldd	r23, Y+8	; 0x08
    2398:	89 85       	ldd	r24, Y+9	; 0x09
    239a:	9a 85       	ldd	r25, Y+10	; 0x0a
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	3f ef       	ldi	r19, 0xFF	; 255
    23a0:	4f e7       	ldi	r20, 0x7F	; 127
    23a2:	57 e4       	ldi	r21, 0x47	; 71
    23a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23a8:	18 16       	cp	r1, r24
    23aa:	4c f5       	brge	.+82     	; 0x23fe <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    23b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	40 e2       	ldi	r20, 0x20	; 32
    23ba:	51 e4       	ldi	r21, 0x41	; 65
    23bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c0:	dc 01       	movw	r26, r24
    23c2:	cb 01       	movw	r24, r22
    23c4:	bc 01       	movw	r22, r24
    23c6:	cd 01       	movw	r24, r26
    23c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	9e 83       	std	Y+6, r25	; 0x06
    23d2:	8d 83       	std	Y+5, r24	; 0x05
    23d4:	0f c0       	rjmp	.+30     	; 0x23f4 <KEYPAD_getPressedKey+0x186>
    23d6:	88 ec       	ldi	r24, 0xC8	; 200
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	9c 83       	std	Y+4, r25	; 0x04
    23dc:	8b 83       	std	Y+3, r24	; 0x03
    23de:	8b 81       	ldd	r24, Y+3	; 0x03
    23e0:	9c 81       	ldd	r25, Y+4	; 0x04
    23e2:	01 97       	sbiw	r24, 0x01	; 1
    23e4:	f1 f7       	brne	.-4      	; 0x23e2 <KEYPAD_getPressedKey+0x174>
    23e6:	9c 83       	std	Y+4, r25	; 0x04
    23e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ea:	8d 81       	ldd	r24, Y+5	; 0x05
    23ec:	9e 81       	ldd	r25, Y+6	; 0x06
    23ee:	01 97       	sbiw	r24, 0x01	; 1
    23f0:	9e 83       	std	Y+6, r25	; 0x06
    23f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f4:	8d 81       	ldd	r24, Y+5	; 0x05
    23f6:	9e 81       	ldd	r25, Y+6	; 0x06
    23f8:	00 97       	sbiw	r24, 0x00	; 0
    23fa:	69 f7       	brne	.-38     	; 0x23d6 <KEYPAD_getPressedKey+0x168>
    23fc:	14 c0       	rjmp	.+40     	; 0x2426 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2400:	78 85       	ldd	r23, Y+8	; 0x08
    2402:	89 85       	ldd	r24, Y+9	; 0x09
    2404:	9a 85       	ldd	r25, Y+10	; 0x0a
    2406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	9e 83       	std	Y+6, r25	; 0x06
    2410:	8d 83       	std	Y+5, r24	; 0x05
    2412:	8d 81       	ldd	r24, Y+5	; 0x05
    2414:	9e 81       	ldd	r25, Y+6	; 0x06
    2416:	9a 83       	std	Y+2, r25	; 0x02
    2418:	89 83       	std	Y+1, r24	; 0x01
    241a:	89 81       	ldd	r24, Y+1	; 0x01
    241c:	9a 81       	ldd	r25, Y+2	; 0x02
    241e:	01 97       	sbiw	r24, 0x01	; 1
    2420:	f1 f7       	brne	.-4      	; 0x241e <KEYPAD_getPressedKey+0x1b0>
    2422:	9a 83       	std	Y+2, r25	; 0x02
    2424:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 3, PIN_INPUT);
#endif
	while(1)
	{
		for(row = 0 ; row < KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2426:	8f 85       	ldd	r24, Y+15	; 0x0f
    2428:	8f 5f       	subi	r24, 0xFF	; 255
    242a:	8f 87       	std	Y+15, r24	; 0x0f
    242c:	8f 85       	ldd	r24, Y+15	; 0x0f
    242e:	84 30       	cpi	r24, 0x04	; 4
    2430:	08 f4       	brcc	.+2      	; 0x2434 <KEYPAD_getPressedKey+0x1c6>
    2432:	51 cf       	rjmp	.-350    	; 0x22d6 <KEYPAD_getPressedKey+0x68>
    2434:	4e cf       	rjmp	.-356    	; 0x22d2 <KEYPAD_getPressedKey+0x64>

00002436 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2436:	df 93       	push	r29
    2438:	cf 93       	push	r28
    243a:	00 d0       	rcall	.+0      	; 0x243c <KEYPAD_4x4_adjustKeyNumber+0x6>
    243c:	00 d0       	rcall	.+0      	; 0x243e <KEYPAD_4x4_adjustKeyNumber+0x8>
    243e:	cd b7       	in	r28, 0x3d	; 61
    2440:	de b7       	in	r29, 0x3e	; 62
    2442:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2444:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2446:	8a 81       	ldd	r24, Y+2	; 0x02
    2448:	28 2f       	mov	r18, r24
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	3c 83       	std	Y+4, r19	; 0x04
    244e:	2b 83       	std	Y+3, r18	; 0x03
    2450:	8b 81       	ldd	r24, Y+3	; 0x03
    2452:	9c 81       	ldd	r25, Y+4	; 0x04
    2454:	88 30       	cpi	r24, 0x08	; 8
    2456:	91 05       	cpc	r25, r1
    2458:	09 f4       	brne	.+2      	; 0x245c <KEYPAD_4x4_adjustKeyNumber+0x26>
    245a:	70 c0       	rjmp	.+224    	; 0x253c <KEYPAD_4x4_adjustKeyNumber+0x106>
    245c:	2b 81       	ldd	r18, Y+3	; 0x03
    245e:	3c 81       	ldd	r19, Y+4	; 0x04
    2460:	29 30       	cpi	r18, 0x09	; 9
    2462:	31 05       	cpc	r19, r1
    2464:	5c f5       	brge	.+86     	; 0x24bc <KEYPAD_4x4_adjustKeyNumber+0x86>
    2466:	8b 81       	ldd	r24, Y+3	; 0x03
    2468:	9c 81       	ldd	r25, Y+4	; 0x04
    246a:	84 30       	cpi	r24, 0x04	; 4
    246c:	91 05       	cpc	r25, r1
    246e:	09 f4       	brne	.+2      	; 0x2472 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2470:	59 c0       	rjmp	.+178    	; 0x2524 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2472:	2b 81       	ldd	r18, Y+3	; 0x03
    2474:	3c 81       	ldd	r19, Y+4	; 0x04
    2476:	25 30       	cpi	r18, 0x05	; 5
    2478:	31 05       	cpc	r19, r1
    247a:	9c f4       	brge	.+38     	; 0x24a2 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    247c:	8b 81       	ldd	r24, Y+3	; 0x03
    247e:	9c 81       	ldd	r25, Y+4	; 0x04
    2480:	82 30       	cpi	r24, 0x02	; 2
    2482:	91 05       	cpc	r25, r1
    2484:	09 f4       	brne	.+2      	; 0x2488 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2486:	48 c0       	rjmp	.+144    	; 0x2518 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2488:	2b 81       	ldd	r18, Y+3	; 0x03
    248a:	3c 81       	ldd	r19, Y+4	; 0x04
    248c:	23 30       	cpi	r18, 0x03	; 3
    248e:	31 05       	cpc	r19, r1
    2490:	0c f0       	brlt	.+2      	; 0x2494 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2492:	45 c0       	rjmp	.+138    	; 0x251e <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2494:	8b 81       	ldd	r24, Y+3	; 0x03
    2496:	9c 81       	ldd	r25, Y+4	; 0x04
    2498:	81 30       	cpi	r24, 0x01	; 1
    249a:	91 05       	cpc	r25, r1
    249c:	09 f4       	brne	.+2      	; 0x24a0 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    249e:	39 c0       	rjmp	.+114    	; 0x2512 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    24a0:	67 c0       	rjmp	.+206    	; 0x2570 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    24a2:	2b 81       	ldd	r18, Y+3	; 0x03
    24a4:	3c 81       	ldd	r19, Y+4	; 0x04
    24a6:	26 30       	cpi	r18, 0x06	; 6
    24a8:	31 05       	cpc	r19, r1
    24aa:	09 f4       	brne	.+2      	; 0x24ae <KEYPAD_4x4_adjustKeyNumber+0x78>
    24ac:	41 c0       	rjmp	.+130    	; 0x2530 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    24ae:	8b 81       	ldd	r24, Y+3	; 0x03
    24b0:	9c 81       	ldd	r25, Y+4	; 0x04
    24b2:	87 30       	cpi	r24, 0x07	; 7
    24b4:	91 05       	cpc	r25, r1
    24b6:	0c f0       	brlt	.+2      	; 0x24ba <KEYPAD_4x4_adjustKeyNumber+0x84>
    24b8:	3e c0       	rjmp	.+124    	; 0x2536 <KEYPAD_4x4_adjustKeyNumber+0x100>
    24ba:	37 c0       	rjmp	.+110    	; 0x252a <KEYPAD_4x4_adjustKeyNumber+0xf4>
    24bc:	2b 81       	ldd	r18, Y+3	; 0x03
    24be:	3c 81       	ldd	r19, Y+4	; 0x04
    24c0:	2c 30       	cpi	r18, 0x0C	; 12
    24c2:	31 05       	cpc	r19, r1
    24c4:	09 f4       	brne	.+2      	; 0x24c8 <KEYPAD_4x4_adjustKeyNumber+0x92>
    24c6:	46 c0       	rjmp	.+140    	; 0x2554 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    24c8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ca:	9c 81       	ldd	r25, Y+4	; 0x04
    24cc:	8d 30       	cpi	r24, 0x0D	; 13
    24ce:	91 05       	cpc	r25, r1
    24d0:	5c f4       	brge	.+22     	; 0x24e8 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    24d2:	2b 81       	ldd	r18, Y+3	; 0x03
    24d4:	3c 81       	ldd	r19, Y+4	; 0x04
    24d6:	2a 30       	cpi	r18, 0x0A	; 10
    24d8:	31 05       	cpc	r19, r1
    24da:	b1 f1       	breq	.+108    	; 0x2548 <KEYPAD_4x4_adjustKeyNumber+0x112>
    24dc:	8b 81       	ldd	r24, Y+3	; 0x03
    24de:	9c 81       	ldd	r25, Y+4	; 0x04
    24e0:	8b 30       	cpi	r24, 0x0B	; 11
    24e2:	91 05       	cpc	r25, r1
    24e4:	a4 f5       	brge	.+104    	; 0x254e <KEYPAD_4x4_adjustKeyNumber+0x118>
    24e6:	2d c0       	rjmp	.+90     	; 0x2542 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    24e8:	2b 81       	ldd	r18, Y+3	; 0x03
    24ea:	3c 81       	ldd	r19, Y+4	; 0x04
    24ec:	2e 30       	cpi	r18, 0x0E	; 14
    24ee:	31 05       	cpc	r19, r1
    24f0:	b9 f1       	breq	.+110    	; 0x2560 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    24f2:	8b 81       	ldd	r24, Y+3	; 0x03
    24f4:	9c 81       	ldd	r25, Y+4	; 0x04
    24f6:	8e 30       	cpi	r24, 0x0E	; 14
    24f8:	91 05       	cpc	r25, r1
    24fa:	7c f1       	brlt	.+94     	; 0x255a <KEYPAD_4x4_adjustKeyNumber+0x124>
    24fc:	2b 81       	ldd	r18, Y+3	; 0x03
    24fe:	3c 81       	ldd	r19, Y+4	; 0x04
    2500:	2f 30       	cpi	r18, 0x0F	; 15
    2502:	31 05       	cpc	r19, r1
    2504:	79 f1       	breq	.+94     	; 0x2564 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2506:	8b 81       	ldd	r24, Y+3	; 0x03
    2508:	9c 81       	ldd	r25, Y+4	; 0x04
    250a:	80 31       	cpi	r24, 0x10	; 16
    250c:	91 05       	cpc	r25, r1
    250e:	69 f1       	breq	.+90     	; 0x256a <KEYPAD_4x4_adjustKeyNumber+0x134>
    2510:	2f c0       	rjmp	.+94     	; 0x2570 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
	case 1: keypad_button = 7;
    2512:	87 e0       	ldi	r24, 0x07	; 7
    2514:	89 83       	std	Y+1, r24	; 0x01
    2516:	2e c0       	rjmp	.+92     	; 0x2574 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 2: keypad_button = 8;
    2518:	88 e0       	ldi	r24, 0x08	; 8
    251a:	89 83       	std	Y+1, r24	; 0x01
    251c:	2b c0       	rjmp	.+86     	; 0x2574 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 3: keypad_button = 9;
    251e:	89 e0       	ldi	r24, 0x09	; 9
    2520:	89 83       	std	Y+1, r24	; 0x01
    2522:	28 c0       	rjmp	.+80     	; 0x2574 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 4: keypad_button = '%'; // ASCII Code of %
    2524:	85 e2       	ldi	r24, 0x25	; 37
    2526:	89 83       	std	Y+1, r24	; 0x01
    2528:	25 c0       	rjmp	.+74     	; 0x2574 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 5: keypad_button = 4;
    252a:	84 e0       	ldi	r24, 0x04	; 4
    252c:	89 83       	std	Y+1, r24	; 0x01
    252e:	22 c0       	rjmp	.+68     	; 0x2574 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 6: keypad_button = 5;
    2530:	85 e0       	ldi	r24, 0x05	; 5
    2532:	89 83       	std	Y+1, r24	; 0x01
    2534:	1f c0       	rjmp	.+62     	; 0x2574 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 7: keypad_button = 6;
    2536:	86 e0       	ldi	r24, 0x06	; 6
    2538:	89 83       	std	Y+1, r24	; 0x01
    253a:	1c c0       	rjmp	.+56     	; 0x2574 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 8: keypad_button = '*'; /* ASCII Code of '*' */
    253c:	8a e2       	ldi	r24, 0x2A	; 42
    253e:	89 83       	std	Y+1, r24	; 0x01
    2540:	19 c0       	rjmp	.+50     	; 0x2574 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 9: keypad_button = 1;
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	89 83       	std	Y+1, r24	; 0x01
    2546:	16 c0       	rjmp	.+44     	; 0x2574 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 10: keypad_button = 2;
    2548:	82 e0       	ldi	r24, 0x02	; 2
    254a:	89 83       	std	Y+1, r24	; 0x01
    254c:	13 c0       	rjmp	.+38     	; 0x2574 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 11: keypad_button = 3;
    254e:	83 e0       	ldi	r24, 0x03	; 3
    2550:	89 83       	std	Y+1, r24	; 0x01
    2552:	10 c0       	rjmp	.+32     	; 0x2574 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2554:	8d e2       	ldi	r24, 0x2D	; 45
    2556:	89 83       	std	Y+1, r24	; 0x01
    2558:	0d c0       	rjmp	.+26     	; 0x2574 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 13: keypad_button = '=';  /* ASCII of '=' */
    255a:	8d e3       	ldi	r24, 0x3D	; 61
    255c:	89 83       	std	Y+1, r24	; 0x01
    255e:	0a c0       	rjmp	.+20     	; 0x2574 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 14: keypad_button = 0;
    2560:	19 82       	std	Y+1, r1	; 0x01
    2562:	08 c0       	rjmp	.+16     	; 0x2574 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 15: keypad_button = '\r'; /* ASCII Code of Enter */
    2564:	8d e0       	ldi	r24, 0x0D	; 13
    2566:	89 83       	std	Y+1, r24	; 0x01
    2568:	05 c0       	rjmp	.+10     	; 0x2574 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 16: keypad_button = '+'; /* ASCII Code of '+' */
    256a:	8b e2       	ldi	r24, 0x2B	; 43
    256c:	89 83       	std	Y+1, r24	; 0x01
    256e:	02 c0       	rjmp	.+4      	; 0x2574 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	default: keypad_button = button_number;
    2570:	8a 81       	ldd	r24, Y+2	; 0x02
    2572:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return keypad_button;
    2574:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2576:	0f 90       	pop	r0
    2578:	0f 90       	pop	r0
    257a:	0f 90       	pop	r0
    257c:	0f 90       	pop	r0
    257e:	cf 91       	pop	r28
    2580:	df 91       	pop	r29
    2582:	08 95       	ret

00002584 <main>:
uint8 g_tick = 0;		/* Timer tick counter */
uint8 g_flag = 0;		/* Flag to indicate if password is set */
uint8 g_status_flag;	/* Flag to check password status */

int main(void)
{
    2584:	df 93       	push	r29
    2586:	cf 93       	push	r28
    2588:	cd b7       	in	r28, 0x3d	; 61
    258a:	de b7       	in	r29, 0x3e	; 62
	UART_init(BOUD_RATE);	/* Initialize UART communication */
    258c:	60 e8       	ldi	r22, 0x80	; 128
    258e:	75 e2       	ldi	r23, 0x25	; 37
    2590:	80 e0       	ldi	r24, 0x00	; 0
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>
	LCD_init();		/* Initialize the LCD display */
    2598:	0e 94 0c 0c 	call	0x1818	; 0x1818 <LCD_init>

	SREG |= (1 << 7);	/* Enable global interrupts */
    259c:	af e5       	ldi	r26, 0x5F	; 95
    259e:	b0 e0       	ldi	r27, 0x00	; 0
    25a0:	ef e5       	ldi	r30, 0x5F	; 95
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	80 81       	ld	r24, Z
    25a6:	80 68       	ori	r24, 0x80	; 128
    25a8:	8c 93       	st	X, r24

	/* Main application loop */
	while (1)
	{
		if (g_flag == 0)
    25aa:	80 91 55 01 	lds	r24, 0x0155
    25ae:	88 23       	and	r24, r24
    25b0:	19 f4       	brne	.+6      	; 0x25b8 <main+0x34>
		{
			Step1_CreatePassword();	/* Prompt for password creation */
    25b2:	0e 94 df 12 	call	0x25be	; 0x25be <Step1_CreatePassword>
    25b6:	f9 cf       	rjmp	.-14     	; 0x25aa <main+0x26>
		}
		else
		{
			Step2_MainOptions();	/* Show main options if password is set */
    25b8:	0e 94 26 14 	call	0x284c	; 0x284c <Step2_MainOptions>
    25bc:	f6 cf       	rjmp	.-20     	; 0x25aa <main+0x26>

000025be <Step1_CreatePassword>:
		}
	}
}

void Step1_CreatePassword(void)
{
    25be:	df 93       	push	r29
    25c0:	cf 93       	push	r28
    25c2:	cd b7       	in	r28, 0x3d	; 61
    25c4:	de b7       	in	r29, 0x3e	; 62
    25c6:	6c 97       	sbiw	r28, 0x1c	; 28
    25c8:	0f b6       	in	r0, 0x3f	; 63
    25ca:	f8 94       	cli
    25cc:	de bf       	out	0x3e, r29	; 62
    25ce:	0f be       	out	0x3f, r0	; 63
    25d0:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    25d2:	0e 94 2d 11 	call	0x225a	; 0x225a <LCD_clearScreen>
	LCD_displayString("PLZ enter Pass:");
    25d6:	80 e6       	ldi	r24, 0x60	; 96
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	0e 94 86 10 	call	0x210c	; 0x210c <LCD_displayString>
	LCD_moveCursor(1, 0);
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	60 e0       	ldi	r22, 0x00	; 0
    25e2:	0e 94 af 10 	call	0x215e	; 0x215e <LCD_moveCursor>
	receivePassword(password);	/* Get the password from the user */
    25e6:	86 e5       	ldi	r24, 0x56	; 86
    25e8:	91 e0       	ldi	r25, 0x01	; 1
    25ea:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <receivePassword>

	UART_sendByte(HMI_ECU_READY);
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	0e 94 ef 05 	call	0xbde	; 0xbde <UART_sendByte>
	transmittePassword(password);	/* Send the password to the Control ECU */
    25f4:	86 e5       	ldi	r24, 0x56	; 86
    25f6:	91 e0       	ldi	r25, 0x01	; 1
    25f8:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <transmittePassword>

	LCD_clearScreen();
    25fc:	0e 94 2d 11 	call	0x225a	; 0x225a <LCD_clearScreen>
	LCD_displayString("PLZ re-enter");
    2600:	80 e7       	ldi	r24, 0x70	; 112
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	0e 94 86 10 	call	0x210c	; 0x210c <LCD_displayString>
	LCD_displayStringRowColumn(1, 0, "same pass:");
    2608:	2d e7       	ldi	r18, 0x7D	; 125
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	60 e0       	ldi	r22, 0x00	; 0
    2610:	a9 01       	movw	r20, r18
    2612:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 10);
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	6a e0       	ldi	r22, 0x0A	; 10
    261a:	0e 94 af 10 	call	0x215e	; 0x215e <LCD_moveCursor>
	receivePassword(password_confirm);	/* Confirm the password */
    261e:	8b e5       	ldi	r24, 0x5B	; 91
    2620:	91 e0       	ldi	r25, 0x01	; 1
    2622:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <receivePassword>

	UART_sendByte(HMI_ECU_READY);
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	0e 94 ef 05 	call	0xbde	; 0xbde <UART_sendByte>
	transmittePassword(password_confirm);	/* Send the confirmed password */
    262c:	8b e5       	ldi	r24, 0x5B	; 91
    262e:	91 e0       	ldi	r25, 0x01	; 1
    2630:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <transmittePassword>

	/* Wait for the Control ECU to be ready and check password status */
	while (UART_recieveByte() != CONTROL_ECU_READY);
    2634:	0e 94 06 06 	call	0xc0c	; 0xc0c <UART_recieveByte>
    2638:	81 30       	cpi	r24, 0x01	; 1
    263a:	e1 f7       	brne	.-8      	; 0x2634 <Step1_CreatePassword+0x76>
	g_status_flag = UART_recieveByte();
    263c:	0e 94 06 06 	call	0xc0c	; 0xc0c <UART_recieveByte>
    2640:	80 93 60 01 	sts	0x0160, r24

	/* Check if passwords match and update the flag */
	if (g_status_flag == PASSWORD_MATCHED)
    2644:	80 91 60 01 	lds	r24, 0x0160
    2648:	81 30       	cpi	r24, 0x01	; 1
    264a:	09 f0       	breq	.+2      	; 0x264e <Step1_CreatePassword+0x90>
    264c:	7c c0       	rjmp	.+248    	; 0x2746 <Step1_CreatePassword+0x188>
	{
		LCD_clearScreen();
    264e:	0e 94 2d 11 	call	0x225a	; 0x225a <LCD_clearScreen>
		LCD_displayString("Password Stored");
    2652:	88 e8       	ldi	r24, 0x88	; 136
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	0e 94 86 10 	call	0x210c	; 0x210c <LCD_displayString>
    265a:	80 e0       	ldi	r24, 0x00	; 0
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	aa ef       	ldi	r26, 0xFA	; 250
    2660:	b3 e4       	ldi	r27, 0x43	; 67
    2662:	89 8f       	std	Y+25, r24	; 0x19
    2664:	9a 8f       	std	Y+26, r25	; 0x1a
    2666:	ab 8f       	std	Y+27, r26	; 0x1b
    2668:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    266a:	69 8d       	ldd	r22, Y+25	; 0x19
    266c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    266e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2670:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	4a ef       	ldi	r20, 0xFA	; 250
    2678:	54 e4       	ldi	r21, 0x44	; 68
    267a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    267e:	dc 01       	movw	r26, r24
    2680:	cb 01       	movw	r24, r22
    2682:	8d 8b       	std	Y+21, r24	; 0x15
    2684:	9e 8b       	std	Y+22, r25	; 0x16
    2686:	af 8b       	std	Y+23, r26	; 0x17
    2688:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    268a:	6d 89       	ldd	r22, Y+21	; 0x15
    268c:	7e 89       	ldd	r23, Y+22	; 0x16
    268e:	8f 89       	ldd	r24, Y+23	; 0x17
    2690:	98 8d       	ldd	r25, Y+24	; 0x18
    2692:	20 e0       	ldi	r18, 0x00	; 0
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	40 e8       	ldi	r20, 0x80	; 128
    2698:	5f e3       	ldi	r21, 0x3F	; 63
    269a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    269e:	88 23       	and	r24, r24
    26a0:	2c f4       	brge	.+10     	; 0x26ac <Step1_CreatePassword+0xee>
		__ticks = 1;
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	9c 8b       	std	Y+20, r25	; 0x14
    26a8:	8b 8b       	std	Y+19, r24	; 0x13
    26aa:	3f c0       	rjmp	.+126    	; 0x272a <Step1_CreatePassword+0x16c>
	else if (__tmp > 65535)
    26ac:	6d 89       	ldd	r22, Y+21	; 0x15
    26ae:	7e 89       	ldd	r23, Y+22	; 0x16
    26b0:	8f 89       	ldd	r24, Y+23	; 0x17
    26b2:	98 8d       	ldd	r25, Y+24	; 0x18
    26b4:	20 e0       	ldi	r18, 0x00	; 0
    26b6:	3f ef       	ldi	r19, 0xFF	; 255
    26b8:	4f e7       	ldi	r20, 0x7F	; 127
    26ba:	57 e4       	ldi	r21, 0x47	; 71
    26bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26c0:	18 16       	cp	r1, r24
    26c2:	4c f5       	brge	.+82     	; 0x2716 <Step1_CreatePassword+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c4:	69 8d       	ldd	r22, Y+25	; 0x19
    26c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	40 e2       	ldi	r20, 0x20	; 32
    26d2:	51 e4       	ldi	r21, 0x41	; 65
    26d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d8:	dc 01       	movw	r26, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	bc 01       	movw	r22, r24
    26de:	cd 01       	movw	r24, r26
    26e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e4:	dc 01       	movw	r26, r24
    26e6:	cb 01       	movw	r24, r22
    26e8:	9c 8b       	std	Y+20, r25	; 0x14
    26ea:	8b 8b       	std	Y+19, r24	; 0x13
    26ec:	0f c0       	rjmp	.+30     	; 0x270c <Step1_CreatePassword+0x14e>
    26ee:	88 ec       	ldi	r24, 0xC8	; 200
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	9a 8b       	std	Y+18, r25	; 0x12
    26f4:	89 8b       	std	Y+17, r24	; 0x11
    26f6:	89 89       	ldd	r24, Y+17	; 0x11
    26f8:	9a 89       	ldd	r25, Y+18	; 0x12
    26fa:	01 97       	sbiw	r24, 0x01	; 1
    26fc:	f1 f7       	brne	.-4      	; 0x26fa <Step1_CreatePassword+0x13c>
    26fe:	9a 8b       	std	Y+18, r25	; 0x12
    2700:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2702:	8b 89       	ldd	r24, Y+19	; 0x13
    2704:	9c 89       	ldd	r25, Y+20	; 0x14
    2706:	01 97       	sbiw	r24, 0x01	; 1
    2708:	9c 8b       	std	Y+20, r25	; 0x14
    270a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    270c:	8b 89       	ldd	r24, Y+19	; 0x13
    270e:	9c 89       	ldd	r25, Y+20	; 0x14
    2710:	00 97       	sbiw	r24, 0x00	; 0
    2712:	69 f7       	brne	.-38     	; 0x26ee <Step1_CreatePassword+0x130>
    2714:	14 c0       	rjmp	.+40     	; 0x273e <Step1_CreatePassword+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2716:	6d 89       	ldd	r22, Y+21	; 0x15
    2718:	7e 89       	ldd	r23, Y+22	; 0x16
    271a:	8f 89       	ldd	r24, Y+23	; 0x17
    271c:	98 8d       	ldd	r25, Y+24	; 0x18
    271e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2722:	dc 01       	movw	r26, r24
    2724:	cb 01       	movw	r24, r22
    2726:	9c 8b       	std	Y+20, r25	; 0x14
    2728:	8b 8b       	std	Y+19, r24	; 0x13
    272a:	8b 89       	ldd	r24, Y+19	; 0x13
    272c:	9c 89       	ldd	r25, Y+20	; 0x14
    272e:	98 8b       	std	Y+16, r25	; 0x10
    2730:	8f 87       	std	Y+15, r24	; 0x0f
    2732:	8f 85       	ldd	r24, Y+15	; 0x0f
    2734:	98 89       	ldd	r25, Y+16	; 0x10
    2736:	01 97       	sbiw	r24, 0x01	; 1
    2738:	f1 f7       	brne	.-4      	; 0x2736 <Step1_CreatePassword+0x178>
    273a:	98 8b       	std	Y+16, r25	; 0x10
    273c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		g_flag = 1;	/* Password set successfully */
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	80 93 55 01 	sts	0x0155, r24
    2744:	7a c0       	rjmp	.+244    	; 0x283a <Step1_CreatePassword+0x27c>
	}
	else
	{
		LCD_clearScreen();
    2746:	0e 94 2d 11 	call	0x225a	; 0x225a <LCD_clearScreen>
		LCD_displayString("Pass UnMatched");
    274a:	88 e9       	ldi	r24, 0x98	; 152
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	0e 94 86 10 	call	0x210c	; 0x210c <LCD_displayString>
    2752:	80 e0       	ldi	r24, 0x00	; 0
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	aa ef       	ldi	r26, 0xFA	; 250
    2758:	b3 e4       	ldi	r27, 0x43	; 67
    275a:	8b 87       	std	Y+11, r24	; 0x0b
    275c:	9c 87       	std	Y+12, r25	; 0x0c
    275e:	ad 87       	std	Y+13, r26	; 0x0d
    2760:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2762:	6b 85       	ldd	r22, Y+11	; 0x0b
    2764:	7c 85       	ldd	r23, Y+12	; 0x0c
    2766:	8d 85       	ldd	r24, Y+13	; 0x0d
    2768:	9e 85       	ldd	r25, Y+14	; 0x0e
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	4a ef       	ldi	r20, 0xFA	; 250
    2770:	54 e4       	ldi	r21, 0x44	; 68
    2772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	8f 83       	std	Y+7, r24	; 0x07
    277c:	98 87       	std	Y+8, r25	; 0x08
    277e:	a9 87       	std	Y+9, r26	; 0x09
    2780:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2782:	6f 81       	ldd	r22, Y+7	; 0x07
    2784:	78 85       	ldd	r23, Y+8	; 0x08
    2786:	89 85       	ldd	r24, Y+9	; 0x09
    2788:	9a 85       	ldd	r25, Y+10	; 0x0a
    278a:	20 e0       	ldi	r18, 0x00	; 0
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	40 e8       	ldi	r20, 0x80	; 128
    2790:	5f e3       	ldi	r21, 0x3F	; 63
    2792:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2796:	88 23       	and	r24, r24
    2798:	2c f4       	brge	.+10     	; 0x27a4 <Step1_CreatePassword+0x1e6>
		__ticks = 1;
    279a:	81 e0       	ldi	r24, 0x01	; 1
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	9e 83       	std	Y+6, r25	; 0x06
    27a0:	8d 83       	std	Y+5, r24	; 0x05
    27a2:	3f c0       	rjmp	.+126    	; 0x2822 <Step1_CreatePassword+0x264>
	else if (__tmp > 65535)
    27a4:	6f 81       	ldd	r22, Y+7	; 0x07
    27a6:	78 85       	ldd	r23, Y+8	; 0x08
    27a8:	89 85       	ldd	r24, Y+9	; 0x09
    27aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	3f ef       	ldi	r19, 0xFF	; 255
    27b0:	4f e7       	ldi	r20, 0x7F	; 127
    27b2:	57 e4       	ldi	r21, 0x47	; 71
    27b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27b8:	18 16       	cp	r1, r24
    27ba:	4c f5       	brge	.+82     	; 0x280e <Step1_CreatePassword+0x250>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    27be:	7c 85       	ldd	r23, Y+12	; 0x0c
    27c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    27c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	40 e2       	ldi	r20, 0x20	; 32
    27ca:	51 e4       	ldi	r21, 0x41	; 65
    27cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	bc 01       	movw	r22, r24
    27d6:	cd 01       	movw	r24, r26
    27d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27dc:	dc 01       	movw	r26, r24
    27de:	cb 01       	movw	r24, r22
    27e0:	9e 83       	std	Y+6, r25	; 0x06
    27e2:	8d 83       	std	Y+5, r24	; 0x05
    27e4:	0f c0       	rjmp	.+30     	; 0x2804 <Step1_CreatePassword+0x246>
    27e6:	88 ec       	ldi	r24, 0xC8	; 200
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	9c 83       	std	Y+4, r25	; 0x04
    27ec:	8b 83       	std	Y+3, r24	; 0x03
    27ee:	8b 81       	ldd	r24, Y+3	; 0x03
    27f0:	9c 81       	ldd	r25, Y+4	; 0x04
    27f2:	01 97       	sbiw	r24, 0x01	; 1
    27f4:	f1 f7       	brne	.-4      	; 0x27f2 <Step1_CreatePassword+0x234>
    27f6:	9c 83       	std	Y+4, r25	; 0x04
    27f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27fa:	8d 81       	ldd	r24, Y+5	; 0x05
    27fc:	9e 81       	ldd	r25, Y+6	; 0x06
    27fe:	01 97       	sbiw	r24, 0x01	; 1
    2800:	9e 83       	std	Y+6, r25	; 0x06
    2802:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2804:	8d 81       	ldd	r24, Y+5	; 0x05
    2806:	9e 81       	ldd	r25, Y+6	; 0x06
    2808:	00 97       	sbiw	r24, 0x00	; 0
    280a:	69 f7       	brne	.-38     	; 0x27e6 <Step1_CreatePassword+0x228>
    280c:	14 c0       	rjmp	.+40     	; 0x2836 <Step1_CreatePassword+0x278>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    280e:	6f 81       	ldd	r22, Y+7	; 0x07
    2810:	78 85       	ldd	r23, Y+8	; 0x08
    2812:	89 85       	ldd	r24, Y+9	; 0x09
    2814:	9a 85       	ldd	r25, Y+10	; 0x0a
    2816:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    281a:	dc 01       	movw	r26, r24
    281c:	cb 01       	movw	r24, r22
    281e:	9e 83       	std	Y+6, r25	; 0x06
    2820:	8d 83       	std	Y+5, r24	; 0x05
    2822:	8d 81       	ldd	r24, Y+5	; 0x05
    2824:	9e 81       	ldd	r25, Y+6	; 0x06
    2826:	9a 83       	std	Y+2, r25	; 0x02
    2828:	89 83       	std	Y+1, r24	; 0x01
    282a:	89 81       	ldd	r24, Y+1	; 0x01
    282c:	9a 81       	ldd	r25, Y+2	; 0x02
    282e:	01 97       	sbiw	r24, 0x01	; 1
    2830:	f1 f7       	brne	.-4      	; 0x282e <Step1_CreatePassword+0x270>
    2832:	9a 83       	std	Y+2, r25	; 0x02
    2834:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		g_flag = 0;	/* Password not set, stay in the loop */
    2836:	10 92 55 01 	sts	0x0155, r1
	}
}
    283a:	6c 96       	adiw	r28, 0x1c	; 28
    283c:	0f b6       	in	r0, 0x3f	; 63
    283e:	f8 94       	cli
    2840:	de bf       	out	0x3e, r29	; 62
    2842:	0f be       	out	0x3f, r0	; 63
    2844:	cd bf       	out	0x3d, r28	; 61
    2846:	cf 91       	pop	r28
    2848:	df 91       	pop	r29
    284a:	08 95       	ret

0000284c <Step2_MainOptions>:

void Step2_MainOptions(void)
{
    284c:	df 93       	push	r29
    284e:	cf 93       	push	r28
    2850:	cd b7       	in	r28, 0x3d	; 61
    2852:	de b7       	in	r29, 0x3e	; 62
    2854:	61 97       	sbiw	r28, 0x11	; 17
    2856:	0f b6       	in	r0, 0x3f	; 63
    2858:	f8 94       	cli
    285a:	de bf       	out	0x3e, r29	; 62
    285c:	0f be       	out	0x3f, r0	; 63
    285e:	cd bf       	out	0x3d, r28	; 61
	uint8 choice = 0;	/* Variable for user choice */
    2860:	1f 86       	std	Y+15, r1	; 0x0f

	LCD_clearScreen();
    2862:	0e 94 2d 11 	call	0x225a	; 0x225a <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "+ : open Door");
    2866:	27 ea       	ldi	r18, 0xA7	; 167
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	80 e0       	ldi	r24, 0x00	; 0
    286c:	60 e0       	ldi	r22, 0x00	; 0
    286e:	a9 01       	movw	r20, r18
    2870:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "- : change pass");
    2874:	25 eb       	ldi	r18, 0xB5	; 181
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	60 e0       	ldi	r22, 0x00	; 0
    287c:	a9 01       	movw	r20, r18
    287e:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <LCD_displayStringRowColumn>

	choice = KEYPAD_getPressedKey();	/* Get user choice from keypad */
    2882:	0e 94 37 11 	call	0x226e	; 0x226e <KEYPAD_getPressedKey>
    2886:	8f 87       	std	Y+15, r24	; 0x0f
    2888:	80 e0       	ldi	r24, 0x00	; 0
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	a8 e4       	ldi	r26, 0x48	; 72
    288e:	b3 e4       	ldi	r27, 0x43	; 67
    2890:	8b 87       	std	Y+11, r24	; 0x0b
    2892:	9c 87       	std	Y+12, r25	; 0x0c
    2894:	ad 87       	std	Y+13, r26	; 0x0d
    2896:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2898:	6b 85       	ldd	r22, Y+11	; 0x0b
    289a:	7c 85       	ldd	r23, Y+12	; 0x0c
    289c:	8d 85       	ldd	r24, Y+13	; 0x0d
    289e:	9e 85       	ldd	r25, Y+14	; 0x0e
    28a0:	20 e0       	ldi	r18, 0x00	; 0
    28a2:	30 e0       	ldi	r19, 0x00	; 0
    28a4:	4a ef       	ldi	r20, 0xFA	; 250
    28a6:	54 e4       	ldi	r21, 0x44	; 68
    28a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ac:	dc 01       	movw	r26, r24
    28ae:	cb 01       	movw	r24, r22
    28b0:	8f 83       	std	Y+7, r24	; 0x07
    28b2:	98 87       	std	Y+8, r25	; 0x08
    28b4:	a9 87       	std	Y+9, r26	; 0x09
    28b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28b8:	6f 81       	ldd	r22, Y+7	; 0x07
    28ba:	78 85       	ldd	r23, Y+8	; 0x08
    28bc:	89 85       	ldd	r24, Y+9	; 0x09
    28be:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c0:	20 e0       	ldi	r18, 0x00	; 0
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	40 e8       	ldi	r20, 0x80	; 128
    28c6:	5f e3       	ldi	r21, 0x3F	; 63
    28c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28cc:	88 23       	and	r24, r24
    28ce:	2c f4       	brge	.+10     	; 0x28da <Step2_MainOptions+0x8e>
		__ticks = 1;
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	9e 83       	std	Y+6, r25	; 0x06
    28d6:	8d 83       	std	Y+5, r24	; 0x05
    28d8:	3f c0       	rjmp	.+126    	; 0x2958 <Step2_MainOptions+0x10c>
	else if (__tmp > 65535)
    28da:	6f 81       	ldd	r22, Y+7	; 0x07
    28dc:	78 85       	ldd	r23, Y+8	; 0x08
    28de:	89 85       	ldd	r24, Y+9	; 0x09
    28e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	3f ef       	ldi	r19, 0xFF	; 255
    28e6:	4f e7       	ldi	r20, 0x7F	; 127
    28e8:	57 e4       	ldi	r21, 0x47	; 71
    28ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28ee:	18 16       	cp	r1, r24
    28f0:	4c f5       	brge	.+82     	; 0x2944 <Step2_MainOptions+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    28f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    28f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    28f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	40 e2       	ldi	r20, 0x20	; 32
    2900:	51 e4       	ldi	r21, 0x41	; 65
    2902:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	bc 01       	movw	r22, r24
    290c:	cd 01       	movw	r24, r26
    290e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2912:	dc 01       	movw	r26, r24
    2914:	cb 01       	movw	r24, r22
    2916:	9e 83       	std	Y+6, r25	; 0x06
    2918:	8d 83       	std	Y+5, r24	; 0x05
    291a:	0f c0       	rjmp	.+30     	; 0x293a <Step2_MainOptions+0xee>
    291c:	88 ec       	ldi	r24, 0xC8	; 200
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	9c 83       	std	Y+4, r25	; 0x04
    2922:	8b 83       	std	Y+3, r24	; 0x03
    2924:	8b 81       	ldd	r24, Y+3	; 0x03
    2926:	9c 81       	ldd	r25, Y+4	; 0x04
    2928:	01 97       	sbiw	r24, 0x01	; 1
    292a:	f1 f7       	brne	.-4      	; 0x2928 <Step2_MainOptions+0xdc>
    292c:	9c 83       	std	Y+4, r25	; 0x04
    292e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2930:	8d 81       	ldd	r24, Y+5	; 0x05
    2932:	9e 81       	ldd	r25, Y+6	; 0x06
    2934:	01 97       	sbiw	r24, 0x01	; 1
    2936:	9e 83       	std	Y+6, r25	; 0x06
    2938:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    293a:	8d 81       	ldd	r24, Y+5	; 0x05
    293c:	9e 81       	ldd	r25, Y+6	; 0x06
    293e:	00 97       	sbiw	r24, 0x00	; 0
    2940:	69 f7       	brne	.-38     	; 0x291c <Step2_MainOptions+0xd0>
    2942:	14 c0       	rjmp	.+40     	; 0x296c <Step2_MainOptions+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2944:	6f 81       	ldd	r22, Y+7	; 0x07
    2946:	78 85       	ldd	r23, Y+8	; 0x08
    2948:	89 85       	ldd	r24, Y+9	; 0x09
    294a:	9a 85       	ldd	r25, Y+10	; 0x0a
    294c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	9e 83       	std	Y+6, r25	; 0x06
    2956:	8d 83       	std	Y+5, r24	; 0x05
    2958:	8d 81       	ldd	r24, Y+5	; 0x05
    295a:	9e 81       	ldd	r25, Y+6	; 0x06
    295c:	9a 83       	std	Y+2, r25	; 0x02
    295e:	89 83       	std	Y+1, r24	; 0x01
    2960:	89 81       	ldd	r24, Y+1	; 0x01
    2962:	9a 81       	ldd	r25, Y+2	; 0x02
    2964:	01 97       	sbiw	r24, 0x01	; 1
    2966:	f1 f7       	brne	.-4      	; 0x2964 <Step2_MainOptions+0x118>
    2968:	9a 83       	std	Y+2, r25	; 0x02
    296a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);	/* Debounce delay */

	/* Execute action based on user choice */
	switch (choice)
    296c:	8f 85       	ldd	r24, Y+15	; 0x0f
    296e:	28 2f       	mov	r18, r24
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	39 8b       	std	Y+17, r19	; 0x11
    2974:	28 8b       	std	Y+16, r18	; 0x10
    2976:	88 89       	ldd	r24, Y+16	; 0x10
    2978:	99 89       	ldd	r25, Y+17	; 0x11
    297a:	8b 32       	cpi	r24, 0x2B	; 43
    297c:	91 05       	cpc	r25, r1
    297e:	31 f0       	breq	.+12     	; 0x298c <Step2_MainOptions+0x140>
    2980:	28 89       	ldd	r18, Y+16	; 0x10
    2982:	39 89       	ldd	r19, Y+17	; 0x11
    2984:	2d 32       	cpi	r18, 0x2D	; 45
    2986:	31 05       	cpc	r19, r1
    2988:	21 f0       	breq	.+8      	; 0x2992 <Step2_MainOptions+0x146>
    298a:	05 c0       	rjmp	.+10     	; 0x2996 <Step2_MainOptions+0x14a>
	{
	case '+':
		Step3_UnlockDoor();	/* Open door option */
    298c:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <Step3_UnlockDoor>
    2990:	02 c0       	rjmp	.+4      	; 0x2996 <Step2_MainOptions+0x14a>
		break;
	case '-':
		Step4_ChangePassword();	/* Change password option */
    2992:	0e 94 5d 15 	call	0x2aba	; 0x2aba <Step4_ChangePassword>
		break;
	}
}
    2996:	61 96       	adiw	r28, 0x11	; 17
    2998:	0f b6       	in	r0, 0x3f	; 63
    299a:	f8 94       	cli
    299c:	de bf       	out	0x3e, r29	; 62
    299e:	0f be       	out	0x3f, r0	; 63
    29a0:	cd bf       	out	0x3d, r28	; 61
    29a2:	cf 91       	pop	r28
    29a4:	df 91       	pop	r29
    29a6:	08 95       	ret

000029a8 <Step3_UnlockDoor>:

void Step3_UnlockDoor(void)
{
    29a8:	df 93       	push	r29
    29aa:	cf 93       	push	r28
    29ac:	00 d0       	rcall	.+0      	; 0x29ae <Step3_UnlockDoor+0x6>
    29ae:	cd b7       	in	r28, 0x3d	; 61
    29b0:	de b7       	in	r29, 0x3e	; 62
	uint8 PIR_flag = 0;	/* Flag for PIR sensor detection */
    29b2:	1a 82       	std	Y+2, r1	; 0x02
	uint8 count;

	/* Allow a maximum number of tries to unlock the door */
	for (count = 0; count < MAX_TRY_COUNTER; count++)
    29b4:	19 82       	std	Y+1, r1	; 0x01
    29b6:	72 c0       	rjmp	.+228    	; 0x2a9c <Step3_UnlockDoor+0xf4>
	{
		UART_sendByte(HMI_ECU_READY);
    29b8:	81 e0       	ldi	r24, 0x01	; 1
    29ba:	0e 94 ef 05 	call	0xbde	; 0xbde <UART_sendByte>
		UART_sendByte(0);	/* Request to open the door */
    29be:	80 e0       	ldi	r24, 0x00	; 0
    29c0:	0e 94 ef 05 	call	0xbde	; 0xbde <UART_sendByte>

		LCD_clearScreen();
    29c4:	0e 94 2d 11 	call	0x225a	; 0x225a <LCD_clearScreen>
		LCD_displayString("Enter Pass:");
    29c8:	85 ec       	ldi	r24, 0xC5	; 197
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	0e 94 86 10 	call	0x210c	; 0x210c <LCD_displayString>
		LCD_moveCursor(1, 0);
    29d0:	81 e0       	ldi	r24, 0x01	; 1
    29d2:	60 e0       	ldi	r22, 0x00	; 0
    29d4:	0e 94 af 10 	call	0x215e	; 0x215e <LCD_moveCursor>
		receivePassword(password);	/* Get password for unlocking */
    29d8:	86 e5       	ldi	r24, 0x56	; 86
    29da:	91 e0       	ldi	r25, 0x01	; 1
    29dc:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <receivePassword>

		UART_sendByte(HMI_ECU_READY);
    29e0:	81 e0       	ldi	r24, 0x01	; 1
    29e2:	0e 94 ef 05 	call	0xbde	; 0xbde <UART_sendByte>
		transmittePassword(password);	/* Send password to Control ECU */
    29e6:	86 e5       	ldi	r24, 0x56	; 86
    29e8:	91 e0       	ldi	r25, 0x01	; 1
    29ea:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <transmittePassword>

		/* Check if the password matches */
		while (UART_recieveByte() != CONTROL_ECU_READY);
    29ee:	0e 94 06 06 	call	0xc0c	; 0xc0c <UART_recieveByte>
    29f2:	81 30       	cpi	r24, 0x01	; 1
    29f4:	e1 f7       	brne	.-8      	; 0x29ee <Step3_UnlockDoor+0x46>
		g_status_flag = UART_recieveByte();
    29f6:	0e 94 06 06 	call	0xc0c	; 0xc0c <UART_recieveByte>
    29fa:	80 93 60 01 	sts	0x0160, r24

		if (g_status_flag == PASSWORD_MATCHED)
    29fe:	80 91 60 01 	lds	r24, 0x0160
    2a02:	81 30       	cpi	r24, 0x01	; 1
    2a04:	09 f0       	breq	.+2      	; 0x2a08 <Step3_UnlockDoor+0x60>
    2a06:	41 c0       	rjmp	.+130    	; 0x2a8a <Step3_UnlockDoor+0xe2>
		{
			LCD_clearScreen();
    2a08:	0e 94 2d 11 	call	0x225a	; 0x225a <LCD_clearScreen>
			LCD_displayString("Door Unlocking");
    2a0c:	81 ed       	ldi	r24, 0xD1	; 209
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	0e 94 86 10 	call	0x210c	; 0x210c <LCD_displayString>
			LCD_displayStringRowColumn(1, 2, "Please wait");
    2a14:	20 ee       	ldi	r18, 0xE0	; 224
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	81 e0       	ldi	r24, 0x01	; 1
    2a1a:	62 e0       	ldi	r22, 0x02	; 2
    2a1c:	a9 01       	movw	r20, r18
    2a1e:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <LCD_displayStringRowColumn>

			/* Wait for PIR sensor status */
			while (UART_recieveByte() != CONTROL_ECU_READY);
    2a22:	0e 94 06 06 	call	0xc0c	; 0xc0c <UART_recieveByte>
    2a26:	81 30       	cpi	r24, 0x01	; 1
    2a28:	e1 f7       	brne	.-8      	; 0x2a22 <Step3_UnlockDoor+0x7a>
			PIR_flag = UART_recieveByte();	/* Get PIR sensor status */
    2a2a:	0e 94 06 06 	call	0xc0c	; 0xc0c <UART_recieveByte>
    2a2e:	8a 83       	std	Y+2, r24	; 0x02

			/* If motion is detected, wait for people to enter */
			if (1 == PIR_flag)
    2a30:	8a 81       	ldd	r24, Y+2	; 0x02
    2a32:	81 30       	cpi	r24, 0x01	; 1
    2a34:	91 f4       	brne	.+36     	; 0x2a5a <Step3_UnlockDoor+0xb2>
			{
				LCD_clearScreen();
    2a36:	0e 94 2d 11 	call	0x225a	; 0x225a <LCD_clearScreen>
				LCD_displayString("Wait for people");
    2a3a:	8c ee       	ldi	r24, 0xEC	; 236
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	0e 94 86 10 	call	0x210c	; 0x210c <LCD_displayString>
				LCD_displayStringRowColumn(1, 2, "To Enter");
    2a42:	2c ef       	ldi	r18, 0xFC	; 252
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	62 e0       	ldi	r22, 0x02	; 2
    2a4a:	a9 01       	movw	r20, r18
    2a4c:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <LCD_displayStringRowColumn>
				while (UART_recieveByte() == 1);
    2a50:	0e 94 06 06 	call	0xc0c	; 0xc0c <UART_recieveByte>
    2a54:	81 30       	cpi	r24, 0x01	; 1
    2a56:	e1 f3       	breq	.-8      	; 0x2a50 <Step3_UnlockDoor+0xa8>
				PIR_flag = 0;
    2a58:	1a 82       	std	Y+2, r1	; 0x02
			}
			Timer_setCallBack(timer_increase_ticks, TIMER1);
    2a5a:	89 e0       	ldi	r24, 0x09	; 9
    2a5c:	97 e1       	ldi	r25, 0x17	; 23
    2a5e:	61 e0       	ldi	r22, 0x01	; 1
    2a60:	0e 94 b3 07 	call	0xf66	; 0xf66 <Timer_setCallBack>
			Timer_init(&timer1_configurations);	/* Initialize the timer */
    2a64:	86 e4       	ldi	r24, 0x46	; 70
    2a66:	91 e0       	ldi	r25, 0x01	; 1
    2a68:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <Timer_init>

			LCD_clearScreen();
    2a6c:	0e 94 2d 11 	call	0x225a	; 0x225a <LCD_clearScreen>
			LCD_displayString("Door is locking");
    2a70:	85 e0       	ldi	r24, 0x05	; 5
    2a72:	91 e0       	ldi	r25, 0x01	; 1
    2a74:	0e 94 86 10 	call	0x210c	; 0x210c <LCD_displayString>
			g_tick = 0;	/* Reset tick counter */
    2a78:	10 92 54 01 	sts	0x0154, r1
			while (g_tick < 15);	/* Wait for 15 seconds */
    2a7c:	80 91 54 01 	lds	r24, 0x0154
    2a80:	8f 30       	cpi	r24, 0x0F	; 15
    2a82:	e0 f3       	brcs	.-8      	; 0x2a7c <Step3_UnlockDoor+0xd4>
			Timer_deInit();	/* Deinitialize the timer */
    2a84:	0e 94 a7 08 	call	0x114e	; 0x114e <Timer_deInit>
    2a88:	0d c0       	rjmp	.+26     	; 0x2aa4 <Step3_UnlockDoor+0xfc>
			break;
		}

		UART_sendByte(HMI_ECU_READY);
    2a8a:	81 e0       	ldi	r24, 0x01	; 1
    2a8c:	0e 94 ef 05 	call	0xbde	; 0xbde <UART_sendByte>
		UART_sendByte(1);	/* To continue */
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	0e 94 ef 05 	call	0xbde	; 0xbde <UART_sendByte>
{
	uint8 PIR_flag = 0;	/* Flag for PIR sensor detection */
	uint8 count;

	/* Allow a maximum number of tries to unlock the door */
	for (count = 0; count < MAX_TRY_COUNTER; count++)
    2a96:	89 81       	ldd	r24, Y+1	; 0x01
    2a98:	8f 5f       	subi	r24, 0xFF	; 255
    2a9a:	89 83       	std	Y+1, r24	; 0x01
    2a9c:	89 81       	ldd	r24, Y+1	; 0x01
    2a9e:	83 30       	cpi	r24, 0x03	; 3
    2aa0:	08 f4       	brcc	.+2      	; 0x2aa4 <Step3_UnlockDoor+0xfc>
    2aa2:	8a cf       	rjmp	.-236    	; 0x29b8 <Step3_UnlockDoor+0x10>

		UART_sendByte(HMI_ECU_READY);
		UART_sendByte(1);	/* To continue */
	}

	if (g_status_flag == PASSWORD_UNMATCHED)
    2aa4:	80 91 60 01 	lds	r24, 0x0160
    2aa8:	88 23       	and	r24, r24
    2aaa:	11 f4       	brne	.+4      	; 0x2ab0 <Step3_UnlockDoor+0x108>
	{
		Step5_UnmatchedPasswordHandling();	/* Handle unmatched password */
    2aac:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <Step5_UnmatchedPasswordHandling>
	}
}
    2ab0:	0f 90       	pop	r0
    2ab2:	0f 90       	pop	r0
    2ab4:	cf 91       	pop	r28
    2ab6:	df 91       	pop	r29
    2ab8:	08 95       	ret

00002aba <Step4_ChangePassword>:

void Step4_ChangePassword(void)
{
    2aba:	df 93       	push	r29
    2abc:	cf 93       	push	r28
    2abe:	0f 92       	push	r0
    2ac0:	cd b7       	in	r28, 0x3d	; 61
    2ac2:	de b7       	in	r29, 0x3e	; 62
	uint8 count;
	/* Allow a maximum number of tries to change the password */
	for (count = 0; count < MAX_TRY_COUNTER; count++)
    2ac4:	19 82       	std	Y+1, r1	; 0x01
    2ac6:	39 c0       	rjmp	.+114    	; 0x2b3a <Step4_ChangePassword+0x80>
	{
		UART_sendByte(HMI_ECU_READY);
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	0e 94 ef 05 	call	0xbde	; 0xbde <UART_sendByte>
		UART_sendByte(1);	/* Request to change password */
    2ace:	81 e0       	ldi	r24, 0x01	; 1
    2ad0:	0e 94 ef 05 	call	0xbde	; 0xbde <UART_sendByte>

		LCD_clearScreen();
    2ad4:	0e 94 2d 11 	call	0x225a	; 0x225a <LCD_clearScreen>
		LCD_displayString("Enter old Pass:");
    2ad8:	85 e1       	ldi	r24, 0x15	; 21
    2ada:	91 e0       	ldi	r25, 0x01	; 1
    2adc:	0e 94 86 10 	call	0x210c	; 0x210c <LCD_displayString>
		LCD_moveCursor(1, 0);
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
    2ae2:	60 e0       	ldi	r22, 0x00	; 0
    2ae4:	0e 94 af 10 	call	0x215e	; 0x215e <LCD_moveCursor>
		receivePassword(password);	/* Get the old password */
    2ae8:	86 e5       	ldi	r24, 0x56	; 86
    2aea:	91 e0       	ldi	r25, 0x01	; 1
    2aec:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <receivePassword>

		UART_sendByte(HMI_ECU_READY);
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	0e 94 ef 05 	call	0xbde	; 0xbde <UART_sendByte>
		transmittePassword(password);	/* Send old password to Control ECU */
    2af6:	86 e5       	ldi	r24, 0x56	; 86
    2af8:	91 e0       	ldi	r25, 0x01	; 1
    2afa:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <transmittePassword>

		/* Check if the old password matches */
		while (UART_recieveByte() != CONTROL_ECU_READY);
    2afe:	0e 94 06 06 	call	0xc0c	; 0xc0c <UART_recieveByte>
    2b02:	81 30       	cpi	r24, 0x01	; 1
    2b04:	e1 f7       	brne	.-8      	; 0x2afe <Step4_ChangePassword+0x44>
		g_status_flag = UART_recieveByte();
    2b06:	0e 94 06 06 	call	0xc0c	; 0xc0c <UART_recieveByte>
    2b0a:	80 93 60 01 	sts	0x0160, r24

		if (g_status_flag == PASSWORD_MATCHED)
    2b0e:	80 91 60 01 	lds	r24, 0x0160
    2b12:	81 30       	cpi	r24, 0x01	; 1
    2b14:	49 f4       	brne	.+18     	; 0x2b28 <Step4_ChangePassword+0x6e>
		{
			UART_sendByte(HMI_ECU_READY);
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	0e 94 ef 05 	call	0xbde	; 0xbde <UART_sendByte>
			UART_sendByte(0);	/* Restart the password setting process */
    2b1c:	80 e0       	ldi	r24, 0x00	; 0
    2b1e:	0e 94 ef 05 	call	0xbde	; 0xbde <UART_sendByte>
			g_flag = 0;	/* Reset the password flag */
    2b22:	10 92 55 01 	sts	0x0155, r1
    2b26:	0c c0       	rjmp	.+24     	; 0x2b40 <Step4_ChangePassword+0x86>
			break;
		}

		UART_sendByte(HMI_ECU_READY);
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	0e 94 ef 05 	call	0xbde	; 0xbde <UART_sendByte>
		UART_sendByte(1);	/* To continue */
    2b2e:	81 e0       	ldi	r24, 0x01	; 1
    2b30:	0e 94 ef 05 	call	0xbde	; 0xbde <UART_sendByte>

void Step4_ChangePassword(void)
{
	uint8 count;
	/* Allow a maximum number of tries to change the password */
	for (count = 0; count < MAX_TRY_COUNTER; count++)
    2b34:	89 81       	ldd	r24, Y+1	; 0x01
    2b36:	8f 5f       	subi	r24, 0xFF	; 255
    2b38:	89 83       	std	Y+1, r24	; 0x01
    2b3a:	89 81       	ldd	r24, Y+1	; 0x01
    2b3c:	83 30       	cpi	r24, 0x03	; 3
    2b3e:	20 f2       	brcs	.-120    	; 0x2ac8 <Step4_ChangePassword+0xe>

		UART_sendByte(HMI_ECU_READY);
		UART_sendByte(1);	/* To continue */
	}

	if (g_flag != 0)
    2b40:	80 91 55 01 	lds	r24, 0x0155
    2b44:	88 23       	and	r24, r24
    2b46:	11 f0       	breq	.+4      	; 0x2b4c <Step4_ChangePassword+0x92>
	{
		Step5_UnmatchedPasswordHandling();	/* Handle unmatched password */
    2b48:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <Step5_UnmatchedPasswordHandling>
	}
}
    2b4c:	0f 90       	pop	r0
    2b4e:	cf 91       	pop	r28
    2b50:	df 91       	pop	r29
    2b52:	08 95       	ret

00002b54 <Step5_UnmatchedPasswordHandling>:

void Step5_UnmatchedPasswordHandling(void)
{
    2b54:	df 93       	push	r29
    2b56:	cf 93       	push	r28
    2b58:	cd b7       	in	r28, 0x3d	; 61
    2b5a:	de b7       	in	r29, 0x3e	; 62
	Timer_setCallBack(timer_increase_ticks, TIMER1);
    2b5c:	89 e0       	ldi	r24, 0x09	; 9
    2b5e:	97 e1       	ldi	r25, 0x17	; 23
    2b60:	61 e0       	ldi	r22, 0x01	; 1
    2b62:	0e 94 b3 07 	call	0xf66	; 0xf66 <Timer_setCallBack>
	Timer_init(&timer1_configurations); 	/* Initialize the timer */
    2b66:	86 e4       	ldi	r24, 0x46	; 70
    2b68:	91 e0       	ldi	r25, 0x01	; 1
    2b6a:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <Timer_init>

	LCD_clearScreen();
    2b6e:	0e 94 2d 11 	call	0x225a	; 0x225a <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "System Locked");
    2b72:	25 e2       	ldi	r18, 0x25	; 37
    2b74:	31 e0       	ldi	r19, 0x01	; 1
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	60 e0       	ldi	r22, 0x00	; 0
    2b7a:	a9 01       	movw	r20, r18
    2b7c:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "for 1 min.");
    2b80:	23 e3       	ldi	r18, 0x33	; 51
    2b82:	31 e0       	ldi	r19, 0x01	; 1
    2b84:	81 e0       	ldi	r24, 0x01	; 1
    2b86:	60 e0       	ldi	r22, 0x00	; 0
    2b88:	a9 01       	movw	r20, r18
    2b8a:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <LCD_displayStringRowColumn>

	g_tick = 0;	/* Reset tick counter */
    2b8e:	10 92 54 01 	sts	0x0154, r1
	while (g_tick < 60);	/* Wait for 60 seconds */
    2b92:	80 91 54 01 	lds	r24, 0x0154
    2b96:	8c 33       	cpi	r24, 0x3C	; 60
    2b98:	e0 f3       	brcs	.-8      	; 0x2b92 <Step5_UnmatchedPasswordHandling+0x3e>
	Timer_deInit();	/* Deinitialize the timer */
    2b9a:	0e 94 a7 08 	call	0x114e	; 0x114e <Timer_deInit>
}
    2b9e:	cf 91       	pop	r28
    2ba0:	df 91       	pop	r29
    2ba2:	08 95       	ret

00002ba4 <transmittePassword>:

void transmittePassword(uint8 *pass)
{
    2ba4:	df 93       	push	r29
    2ba6:	cf 93       	push	r28
    2ba8:	00 d0       	rcall	.+0      	; 0x2baa <transmittePassword+0x6>
    2baa:	0f 92       	push	r0
    2bac:	cd b7       	in	r28, 0x3d	; 61
    2bae:	de b7       	in	r29, 0x3e	; 62
    2bb0:	9b 83       	std	Y+3, r25	; 0x03
    2bb2:	8a 83       	std	Y+2, r24	; 0x02
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
    2bb4:	19 82       	std	Y+1, r1	; 0x01
    2bb6:	0e c0       	rjmp	.+28     	; 0x2bd4 <transmittePassword+0x30>
	{
		UART_sendByte(pass[i]);	/* Send each character of the password */
    2bb8:	89 81       	ldd	r24, Y+1	; 0x01
    2bba:	28 2f       	mov	r18, r24
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc0:	9b 81       	ldd	r25, Y+3	; 0x03
    2bc2:	fc 01       	movw	r30, r24
    2bc4:	e2 0f       	add	r30, r18
    2bc6:	f3 1f       	adc	r31, r19
    2bc8:	80 81       	ld	r24, Z
    2bca:	0e 94 ef 05 	call	0xbde	; 0xbde <UART_sendByte>
	Timer_deInit();	/* Deinitialize the timer */
}

void transmittePassword(uint8 *pass)
{
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
    2bce:	89 81       	ldd	r24, Y+1	; 0x01
    2bd0:	8f 5f       	subi	r24, 0xFF	; 255
    2bd2:	89 83       	std	Y+1, r24	; 0x01
    2bd4:	89 81       	ldd	r24, Y+1	; 0x01
    2bd6:	85 30       	cpi	r24, 0x05	; 5
    2bd8:	78 f3       	brcs	.-34     	; 0x2bb8 <transmittePassword+0x14>
	{
		UART_sendByte(pass[i]);	/* Send each character of the password */
	}
}
    2bda:	0f 90       	pop	r0
    2bdc:	0f 90       	pop	r0
    2bde:	0f 90       	pop	r0
    2be0:	cf 91       	pop	r28
    2be2:	df 91       	pop	r29
    2be4:	08 95       	ret

00002be6 <receivePassword>:

void receivePassword(uint8 *password)
{
    2be6:	df 93       	push	r29
    2be8:	cf 93       	push	r28
    2bea:	cd b7       	in	r28, 0x3d	; 61
    2bec:	de b7       	in	r29, 0x3e	; 62
    2bee:	a0 97       	sbiw	r28, 0x20	; 32
    2bf0:	0f b6       	in	r0, 0x3f	; 63
    2bf2:	f8 94       	cli
    2bf4:	de bf       	out	0x3e, r29	; 62
    2bf6:	0f be       	out	0x3f, r0	; 63
    2bf8:	cd bf       	out	0x3d, r28	; 61
    2bfa:	98 a3       	std	Y+32, r25	; 0x20
    2bfc:	8f 8f       	std	Y+31, r24	; 0x1f
	uint8 Buffer;	/* Variable to store pressed key */

	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
    2bfe:	1d 8e       	std	Y+29, r1	; 0x1d
    2c00:	85 c0       	rjmp	.+266    	; 0x2d0c <receivePassword+0x126>
	{
		Buffer = KEYPAD_getPressedKey();	/* Get the pressed key */
    2c02:	0e 94 37 11 	call	0x226e	; 0x226e <KEYPAD_getPressedKey>
    2c06:	8e 8f       	std	Y+30, r24	; 0x1e
		password[i] = Buffer;	/* Store the pressed key */
    2c08:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c0a:	28 2f       	mov	r18, r24
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c10:	98 a1       	ldd	r25, Y+32	; 0x20
    2c12:	fc 01       	movw	r30, r24
    2c14:	e2 0f       	add	r30, r18
    2c16:	f3 1f       	adc	r31, r19
    2c18:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c1a:	80 83       	st	Z, r24
		LCD_displayCharacter('*');	/* Display '*' for privacy */
    2c1c:	8a e2       	ldi	r24, 0x2A	; 42
    2c1e:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <LCD_displayCharacter>
    2c22:	80 e0       	ldi	r24, 0x00	; 0
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	a8 e4       	ldi	r26, 0x48	; 72
    2c28:	b3 e4       	ldi	r27, 0x43	; 67
    2c2a:	89 8f       	std	Y+25, r24	; 0x19
    2c2c:	9a 8f       	std	Y+26, r25	; 0x1a
    2c2e:	ab 8f       	std	Y+27, r26	; 0x1b
    2c30:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c32:	69 8d       	ldd	r22, Y+25	; 0x19
    2c34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c3a:	20 e0       	ldi	r18, 0x00	; 0
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	4a ef       	ldi	r20, 0xFA	; 250
    2c40:	54 e4       	ldi	r21, 0x44	; 68
    2c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c46:	dc 01       	movw	r26, r24
    2c48:	cb 01       	movw	r24, r22
    2c4a:	8d 8b       	std	Y+21, r24	; 0x15
    2c4c:	9e 8b       	std	Y+22, r25	; 0x16
    2c4e:	af 8b       	std	Y+23, r26	; 0x17
    2c50:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c52:	6d 89       	ldd	r22, Y+21	; 0x15
    2c54:	7e 89       	ldd	r23, Y+22	; 0x16
    2c56:	8f 89       	ldd	r24, Y+23	; 0x17
    2c58:	98 8d       	ldd	r25, Y+24	; 0x18
    2c5a:	20 e0       	ldi	r18, 0x00	; 0
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	40 e8       	ldi	r20, 0x80	; 128
    2c60:	5f e3       	ldi	r21, 0x3F	; 63
    2c62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c66:	88 23       	and	r24, r24
    2c68:	2c f4       	brge	.+10     	; 0x2c74 <receivePassword+0x8e>
		__ticks = 1;
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	9c 8b       	std	Y+20, r25	; 0x14
    2c70:	8b 8b       	std	Y+19, r24	; 0x13
    2c72:	3f c0       	rjmp	.+126    	; 0x2cf2 <receivePassword+0x10c>
	else if (__tmp > 65535)
    2c74:	6d 89       	ldd	r22, Y+21	; 0x15
    2c76:	7e 89       	ldd	r23, Y+22	; 0x16
    2c78:	8f 89       	ldd	r24, Y+23	; 0x17
    2c7a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c7c:	20 e0       	ldi	r18, 0x00	; 0
    2c7e:	3f ef       	ldi	r19, 0xFF	; 255
    2c80:	4f e7       	ldi	r20, 0x7F	; 127
    2c82:	57 e4       	ldi	r21, 0x47	; 71
    2c84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c88:	18 16       	cp	r1, r24
    2c8a:	4c f5       	brge	.+82     	; 0x2cde <receivePassword+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c8c:	69 8d       	ldd	r22, Y+25	; 0x19
    2c8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c94:	20 e0       	ldi	r18, 0x00	; 0
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	40 e2       	ldi	r20, 0x20	; 32
    2c9a:	51 e4       	ldi	r21, 0x41	; 65
    2c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca0:	dc 01       	movw	r26, r24
    2ca2:	cb 01       	movw	r24, r22
    2ca4:	bc 01       	movw	r22, r24
    2ca6:	cd 01       	movw	r24, r26
    2ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	9c 8b       	std	Y+20, r25	; 0x14
    2cb2:	8b 8b       	std	Y+19, r24	; 0x13
    2cb4:	0f c0       	rjmp	.+30     	; 0x2cd4 <receivePassword+0xee>
    2cb6:	88 ec       	ldi	r24, 0xC8	; 200
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	9a 8b       	std	Y+18, r25	; 0x12
    2cbc:	89 8b       	std	Y+17, r24	; 0x11
    2cbe:	89 89       	ldd	r24, Y+17	; 0x11
    2cc0:	9a 89       	ldd	r25, Y+18	; 0x12
    2cc2:	01 97       	sbiw	r24, 0x01	; 1
    2cc4:	f1 f7       	brne	.-4      	; 0x2cc2 <receivePassword+0xdc>
    2cc6:	9a 8b       	std	Y+18, r25	; 0x12
    2cc8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cca:	8b 89       	ldd	r24, Y+19	; 0x13
    2ccc:	9c 89       	ldd	r25, Y+20	; 0x14
    2cce:	01 97       	sbiw	r24, 0x01	; 1
    2cd0:	9c 8b       	std	Y+20, r25	; 0x14
    2cd2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cd4:	8b 89       	ldd	r24, Y+19	; 0x13
    2cd6:	9c 89       	ldd	r25, Y+20	; 0x14
    2cd8:	00 97       	sbiw	r24, 0x00	; 0
    2cda:	69 f7       	brne	.-38     	; 0x2cb6 <receivePassword+0xd0>
    2cdc:	14 c0       	rjmp	.+40     	; 0x2d06 <receivePassword+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cde:	6d 89       	ldd	r22, Y+21	; 0x15
    2ce0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ce2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ce4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ce6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cea:	dc 01       	movw	r26, r24
    2cec:	cb 01       	movw	r24, r22
    2cee:	9c 8b       	std	Y+20, r25	; 0x14
    2cf0:	8b 8b       	std	Y+19, r24	; 0x13
    2cf2:	8b 89       	ldd	r24, Y+19	; 0x13
    2cf4:	9c 89       	ldd	r25, Y+20	; 0x14
    2cf6:	98 8b       	std	Y+16, r25	; 0x10
    2cf8:	8f 87       	std	Y+15, r24	; 0x0f
    2cfa:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cfc:	98 89       	ldd	r25, Y+16	; 0x10
    2cfe:	01 97       	sbiw	r24, 0x01	; 1
    2d00:	f1 f7       	brne	.-4      	; 0x2cfe <receivePassword+0x118>
    2d02:	98 8b       	std	Y+16, r25	; 0x10
    2d04:	8f 87       	std	Y+15, r24	; 0x0f

void receivePassword(uint8 *password)
{
	uint8 Buffer;	/* Variable to store pressed key */

	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
    2d06:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d08:	8f 5f       	subi	r24, 0xFF	; 255
    2d0a:	8d 8f       	std	Y+29, r24	; 0x1d
    2d0c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d0e:	85 30       	cpi	r24, 0x05	; 5
    2d10:	08 f4       	brcc	.+2      	; 0x2d14 <receivePassword+0x12e>
    2d12:	77 cf       	rjmp	.-274    	; 0x2c02 <receivePassword+0x1c>
		Buffer = KEYPAD_getPressedKey();	/* Get the pressed key */
		password[i] = Buffer;	/* Store the pressed key */
		LCD_displayCharacter('*');	/* Display '*' for privacy */
		_delay_ms(200);		/* Short delay for keypress */
	}
	while (KEYPAD_getPressedKey() != '\r'); /* Wait for enter key */
    2d14:	0e 94 37 11 	call	0x226e	; 0x226e <KEYPAD_getPressedKey>
    2d18:	8d 30       	cpi	r24, 0x0D	; 13
    2d1a:	e1 f7       	brne	.-8      	; 0x2d14 <receivePassword+0x12e>
    2d1c:	80 e0       	ldi	r24, 0x00	; 0
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	a8 e4       	ldi	r26, 0x48	; 72
    2d22:	b3 e4       	ldi	r27, 0x43	; 67
    2d24:	8b 87       	std	Y+11, r24	; 0x0b
    2d26:	9c 87       	std	Y+12, r25	; 0x0c
    2d28:	ad 87       	std	Y+13, r26	; 0x0d
    2d2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d30:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d32:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d34:	20 e0       	ldi	r18, 0x00	; 0
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	4a ef       	ldi	r20, 0xFA	; 250
    2d3a:	54 e4       	ldi	r21, 0x44	; 68
    2d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d40:	dc 01       	movw	r26, r24
    2d42:	cb 01       	movw	r24, r22
    2d44:	8f 83       	std	Y+7, r24	; 0x07
    2d46:	98 87       	std	Y+8, r25	; 0x08
    2d48:	a9 87       	std	Y+9, r26	; 0x09
    2d4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d4e:	78 85       	ldd	r23, Y+8	; 0x08
    2d50:	89 85       	ldd	r24, Y+9	; 0x09
    2d52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d54:	20 e0       	ldi	r18, 0x00	; 0
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	40 e8       	ldi	r20, 0x80	; 128
    2d5a:	5f e3       	ldi	r21, 0x3F	; 63
    2d5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d60:	88 23       	and	r24, r24
    2d62:	2c f4       	brge	.+10     	; 0x2d6e <receivePassword+0x188>
		__ticks = 1;
    2d64:	81 e0       	ldi	r24, 0x01	; 1
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	9e 83       	std	Y+6, r25	; 0x06
    2d6a:	8d 83       	std	Y+5, r24	; 0x05
    2d6c:	3f c0       	rjmp	.+126    	; 0x2dec <receivePassword+0x206>
	else if (__tmp > 65535)
    2d6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d70:	78 85       	ldd	r23, Y+8	; 0x08
    2d72:	89 85       	ldd	r24, Y+9	; 0x09
    2d74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d76:	20 e0       	ldi	r18, 0x00	; 0
    2d78:	3f ef       	ldi	r19, 0xFF	; 255
    2d7a:	4f e7       	ldi	r20, 0x7F	; 127
    2d7c:	57 e4       	ldi	r21, 0x47	; 71
    2d7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d82:	18 16       	cp	r1, r24
    2d84:	4c f5       	brge	.+82     	; 0x2dd8 <receivePassword+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d86:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d88:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d8e:	20 e0       	ldi	r18, 0x00	; 0
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	40 e2       	ldi	r20, 0x20	; 32
    2d94:	51 e4       	ldi	r21, 0x41	; 65
    2d96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	cb 01       	movw	r24, r22
    2d9e:	bc 01       	movw	r22, r24
    2da0:	cd 01       	movw	r24, r26
    2da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	9e 83       	std	Y+6, r25	; 0x06
    2dac:	8d 83       	std	Y+5, r24	; 0x05
    2dae:	0f c0       	rjmp	.+30     	; 0x2dce <receivePassword+0x1e8>
    2db0:	88 ec       	ldi	r24, 0xC8	; 200
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	9c 83       	std	Y+4, r25	; 0x04
    2db6:	8b 83       	std	Y+3, r24	; 0x03
    2db8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dba:	9c 81       	ldd	r25, Y+4	; 0x04
    2dbc:	01 97       	sbiw	r24, 0x01	; 1
    2dbe:	f1 f7       	brne	.-4      	; 0x2dbc <receivePassword+0x1d6>
    2dc0:	9c 83       	std	Y+4, r25	; 0x04
    2dc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dc4:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc6:	9e 81       	ldd	r25, Y+6	; 0x06
    2dc8:	01 97       	sbiw	r24, 0x01	; 1
    2dca:	9e 83       	std	Y+6, r25	; 0x06
    2dcc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dce:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd0:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd2:	00 97       	sbiw	r24, 0x00	; 0
    2dd4:	69 f7       	brne	.-38     	; 0x2db0 <receivePassword+0x1ca>
    2dd6:	14 c0       	rjmp	.+40     	; 0x2e00 <receivePassword+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dd8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dda:	78 85       	ldd	r23, Y+8	; 0x08
    2ddc:	89 85       	ldd	r24, Y+9	; 0x09
    2dde:	9a 85       	ldd	r25, Y+10	; 0x0a
    2de0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de4:	dc 01       	movw	r26, r24
    2de6:	cb 01       	movw	r24, r22
    2de8:	9e 83       	std	Y+6, r25	; 0x06
    2dea:	8d 83       	std	Y+5, r24	; 0x05
    2dec:	8d 81       	ldd	r24, Y+5	; 0x05
    2dee:	9e 81       	ldd	r25, Y+6	; 0x06
    2df0:	9a 83       	std	Y+2, r25	; 0x02
    2df2:	89 83       	std	Y+1, r24	; 0x01
    2df4:	89 81       	ldd	r24, Y+1	; 0x01
    2df6:	9a 81       	ldd	r25, Y+2	; 0x02
    2df8:	01 97       	sbiw	r24, 0x01	; 1
    2dfa:	f1 f7       	brne	.-4      	; 0x2df8 <receivePassword+0x212>
    2dfc:	9a 83       	std	Y+2, r25	; 0x02
    2dfe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);	/* Delay for button release */
}
    2e00:	a0 96       	adiw	r28, 0x20	; 32
    2e02:	0f b6       	in	r0, 0x3f	; 63
    2e04:	f8 94       	cli
    2e06:	de bf       	out	0x3e, r29	; 62
    2e08:	0f be       	out	0x3f, r0	; 63
    2e0a:	cd bf       	out	0x3d, r28	; 61
    2e0c:	cf 91       	pop	r28
    2e0e:	df 91       	pop	r29
    2e10:	08 95       	ret

00002e12 <timer_increase_ticks>:

void timer_increase_ticks(void)
{
    2e12:	df 93       	push	r29
    2e14:	cf 93       	push	r28
    2e16:	cd b7       	in	r28, 0x3d	; 61
    2e18:	de b7       	in	r29, 0x3e	; 62
	g_tick++; 	/* Increment the tick count */
    2e1a:	80 91 54 01 	lds	r24, 0x0154
    2e1e:	8f 5f       	subi	r24, 0xFF	; 255
    2e20:	80 93 54 01 	sts	0x0154, r24
}
    2e24:	cf 91       	pop	r28
    2e26:	df 91       	pop	r29
    2e28:	08 95       	ret

00002e2a <__udivmodsi4>:
    2e2a:	a1 e2       	ldi	r26, 0x21	; 33
    2e2c:	1a 2e       	mov	r1, r26
    2e2e:	aa 1b       	sub	r26, r26
    2e30:	bb 1b       	sub	r27, r27
    2e32:	fd 01       	movw	r30, r26
    2e34:	0d c0       	rjmp	.+26     	; 0x2e50 <__udivmodsi4_ep>

00002e36 <__udivmodsi4_loop>:
    2e36:	aa 1f       	adc	r26, r26
    2e38:	bb 1f       	adc	r27, r27
    2e3a:	ee 1f       	adc	r30, r30
    2e3c:	ff 1f       	adc	r31, r31
    2e3e:	a2 17       	cp	r26, r18
    2e40:	b3 07       	cpc	r27, r19
    2e42:	e4 07       	cpc	r30, r20
    2e44:	f5 07       	cpc	r31, r21
    2e46:	20 f0       	brcs	.+8      	; 0x2e50 <__udivmodsi4_ep>
    2e48:	a2 1b       	sub	r26, r18
    2e4a:	b3 0b       	sbc	r27, r19
    2e4c:	e4 0b       	sbc	r30, r20
    2e4e:	f5 0b       	sbc	r31, r21

00002e50 <__udivmodsi4_ep>:
    2e50:	66 1f       	adc	r22, r22
    2e52:	77 1f       	adc	r23, r23
    2e54:	88 1f       	adc	r24, r24
    2e56:	99 1f       	adc	r25, r25
    2e58:	1a 94       	dec	r1
    2e5a:	69 f7       	brne	.-38     	; 0x2e36 <__udivmodsi4_loop>
    2e5c:	60 95       	com	r22
    2e5e:	70 95       	com	r23
    2e60:	80 95       	com	r24
    2e62:	90 95       	com	r25
    2e64:	9b 01       	movw	r18, r22
    2e66:	ac 01       	movw	r20, r24
    2e68:	bd 01       	movw	r22, r26
    2e6a:	cf 01       	movw	r24, r30
    2e6c:	08 95       	ret

00002e6e <__prologue_saves__>:
    2e6e:	2f 92       	push	r2
    2e70:	3f 92       	push	r3
    2e72:	4f 92       	push	r4
    2e74:	5f 92       	push	r5
    2e76:	6f 92       	push	r6
    2e78:	7f 92       	push	r7
    2e7a:	8f 92       	push	r8
    2e7c:	9f 92       	push	r9
    2e7e:	af 92       	push	r10
    2e80:	bf 92       	push	r11
    2e82:	cf 92       	push	r12
    2e84:	df 92       	push	r13
    2e86:	ef 92       	push	r14
    2e88:	ff 92       	push	r15
    2e8a:	0f 93       	push	r16
    2e8c:	1f 93       	push	r17
    2e8e:	cf 93       	push	r28
    2e90:	df 93       	push	r29
    2e92:	cd b7       	in	r28, 0x3d	; 61
    2e94:	de b7       	in	r29, 0x3e	; 62
    2e96:	ca 1b       	sub	r28, r26
    2e98:	db 0b       	sbc	r29, r27
    2e9a:	0f b6       	in	r0, 0x3f	; 63
    2e9c:	f8 94       	cli
    2e9e:	de bf       	out	0x3e, r29	; 62
    2ea0:	0f be       	out	0x3f, r0	; 63
    2ea2:	cd bf       	out	0x3d, r28	; 61
    2ea4:	09 94       	ijmp

00002ea6 <__epilogue_restores__>:
    2ea6:	2a 88       	ldd	r2, Y+18	; 0x12
    2ea8:	39 88       	ldd	r3, Y+17	; 0x11
    2eaa:	48 88       	ldd	r4, Y+16	; 0x10
    2eac:	5f 84       	ldd	r5, Y+15	; 0x0f
    2eae:	6e 84       	ldd	r6, Y+14	; 0x0e
    2eb0:	7d 84       	ldd	r7, Y+13	; 0x0d
    2eb2:	8c 84       	ldd	r8, Y+12	; 0x0c
    2eb4:	9b 84       	ldd	r9, Y+11	; 0x0b
    2eb6:	aa 84       	ldd	r10, Y+10	; 0x0a
    2eb8:	b9 84       	ldd	r11, Y+9	; 0x09
    2eba:	c8 84       	ldd	r12, Y+8	; 0x08
    2ebc:	df 80       	ldd	r13, Y+7	; 0x07
    2ebe:	ee 80       	ldd	r14, Y+6	; 0x06
    2ec0:	fd 80       	ldd	r15, Y+5	; 0x05
    2ec2:	0c 81       	ldd	r16, Y+4	; 0x04
    2ec4:	1b 81       	ldd	r17, Y+3	; 0x03
    2ec6:	aa 81       	ldd	r26, Y+2	; 0x02
    2ec8:	b9 81       	ldd	r27, Y+1	; 0x01
    2eca:	ce 0f       	add	r28, r30
    2ecc:	d1 1d       	adc	r29, r1
    2ece:	0f b6       	in	r0, 0x3f	; 63
    2ed0:	f8 94       	cli
    2ed2:	de bf       	out	0x3e, r29	; 62
    2ed4:	0f be       	out	0x3f, r0	; 63
    2ed6:	cd bf       	out	0x3d, r28	; 61
    2ed8:	ed 01       	movw	r28, r26
    2eda:	08 95       	ret

00002edc <itoa>:
    2edc:	fb 01       	movw	r30, r22
    2ede:	9f 01       	movw	r18, r30
    2ee0:	e8 94       	clt
    2ee2:	42 30       	cpi	r20, 0x02	; 2
    2ee4:	c4 f0       	brlt	.+48     	; 0x2f16 <itoa+0x3a>
    2ee6:	45 32       	cpi	r20, 0x25	; 37
    2ee8:	b4 f4       	brge	.+44     	; 0x2f16 <itoa+0x3a>
    2eea:	4a 30       	cpi	r20, 0x0A	; 10
    2eec:	29 f4       	brne	.+10     	; 0x2ef8 <itoa+0x1c>
    2eee:	97 fb       	bst	r25, 7
    2ef0:	1e f4       	brtc	.+6      	; 0x2ef8 <itoa+0x1c>
    2ef2:	90 95       	com	r25
    2ef4:	81 95       	neg	r24
    2ef6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ef8:	64 2f       	mov	r22, r20
    2efa:	77 27       	eor	r23, r23
    2efc:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__udivmodhi4>
    2f00:	80 5d       	subi	r24, 0xD0	; 208
    2f02:	8a 33       	cpi	r24, 0x3A	; 58
    2f04:	0c f0       	brlt	.+2      	; 0x2f08 <itoa+0x2c>
    2f06:	89 5d       	subi	r24, 0xD9	; 217
    2f08:	81 93       	st	Z+, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	00 97       	sbiw	r24, 0x00	; 0
    2f0e:	a1 f7       	brne	.-24     	; 0x2ef8 <itoa+0x1c>
    2f10:	16 f4       	brtc	.+4      	; 0x2f16 <itoa+0x3a>
    2f12:	5d e2       	ldi	r21, 0x2D	; 45
    2f14:	51 93       	st	Z+, r21
    2f16:	10 82       	st	Z, r1
    2f18:	c9 01       	movw	r24, r18
    2f1a:	0c 94 8f 17 	jmp	0x2f1e	; 0x2f1e <strrev>

00002f1e <strrev>:
    2f1e:	dc 01       	movw	r26, r24
    2f20:	fc 01       	movw	r30, r24
    2f22:	67 2f       	mov	r22, r23
    2f24:	71 91       	ld	r23, Z+
    2f26:	77 23       	and	r23, r23
    2f28:	e1 f7       	brne	.-8      	; 0x2f22 <strrev+0x4>
    2f2a:	32 97       	sbiw	r30, 0x02	; 2
    2f2c:	04 c0       	rjmp	.+8      	; 0x2f36 <strrev+0x18>
    2f2e:	7c 91       	ld	r23, X
    2f30:	6d 93       	st	X+, r22
    2f32:	70 83       	st	Z, r23
    2f34:	62 91       	ld	r22, -Z
    2f36:	ae 17       	cp	r26, r30
    2f38:	bf 07       	cpc	r27, r31
    2f3a:	c8 f3       	brcs	.-14     	; 0x2f2e <strrev+0x10>
    2f3c:	08 95       	ret

00002f3e <__udivmodhi4>:
    2f3e:	aa 1b       	sub	r26, r26
    2f40:	bb 1b       	sub	r27, r27
    2f42:	51 e1       	ldi	r21, 0x11	; 17
    2f44:	07 c0       	rjmp	.+14     	; 0x2f54 <__udivmodhi4_ep>

00002f46 <__udivmodhi4_loop>:
    2f46:	aa 1f       	adc	r26, r26
    2f48:	bb 1f       	adc	r27, r27
    2f4a:	a6 17       	cp	r26, r22
    2f4c:	b7 07       	cpc	r27, r23
    2f4e:	10 f0       	brcs	.+4      	; 0x2f54 <__udivmodhi4_ep>
    2f50:	a6 1b       	sub	r26, r22
    2f52:	b7 0b       	sbc	r27, r23

00002f54 <__udivmodhi4_ep>:
    2f54:	88 1f       	adc	r24, r24
    2f56:	99 1f       	adc	r25, r25
    2f58:	5a 95       	dec	r21
    2f5a:	a9 f7       	brne	.-22     	; 0x2f46 <__udivmodhi4_loop>
    2f5c:	80 95       	com	r24
    2f5e:	90 95       	com	r25
    2f60:	bc 01       	movw	r22, r24
    2f62:	cd 01       	movw	r24, r26
    2f64:	08 95       	ret

00002f66 <_exit>:
    2f66:	f8 94       	cli

00002f68 <__stop_program>:
    2f68:	ff cf       	rjmp	.-2      	; 0x2f68 <__stop_program>
