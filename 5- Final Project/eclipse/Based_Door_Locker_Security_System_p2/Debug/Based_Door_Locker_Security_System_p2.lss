
Based_Door_Locker_Security_System_p2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000022f2  00002386  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800070  00800070  00002396  2**0
                  ALLOC
  3 .stab         00003060  00000000  00000000  00002398  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000220b  00000000  00000000  000053f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007603  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007743  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000078b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000094fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a3e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b194  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b2f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b581  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bd4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 80 07 	jmp	0xf00	; 0xf00 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 e7 06 	jmp	0xdce	; 0xdce <__vector_6>
      1c:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ef       	ldi	r30, 0xF2	; 242
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 38       	cpi	r26, 0x89	; 137
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <main>
      8a:	0c 94 77 11 	jmp	0x22ee	; 0x22ee <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 50 11 	jmp	0x22a0	; 0x22a0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 6c 11 	jmp	0x22d8	; 0x22d8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(uint32 baud_rate)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <UART_init+0x8>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <UART_init+0xa>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	6b 83       	std	Y+3, r22	; 0x03
     b56:	7c 83       	std	Y+4, r23	; 0x04
     b58:	8d 83       	std	Y+5, r24	; 0x05
     b5a:	9e 83       	std	Y+6, r25	; 0x06
	uint16 ubrr_value = 0;
     b5c:	1a 82       	std	Y+2, r1	; 0x02
     b5e:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA_REG = (1<<U2X);
     b60:	eb e2       	ldi	r30, 0x2B	; 43
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	82 e0       	ldi	r24, 0x02	; 2
     b66:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB_REG = (1<<RXEN) | (1<<TXEN);
     b68:	ea e2       	ldi	r30, 0x2A	; 42
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	88 e1       	ldi	r24, 0x18	; 24
     b6e:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC_REG = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
     b70:	e0 e4       	ldi	r30, 0x40	; 64
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	86 e8       	ldi	r24, 0x86	; 134
     b76:	80 83       	st	Z, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
     b78:	8b 81       	ldd	r24, Y+3	; 0x03
     b7a:	9c 81       	ldd	r25, Y+4	; 0x04
     b7c:	ad 81       	ldd	r26, Y+5	; 0x05
     b7e:	be 81       	ldd	r27, Y+6	; 0x06
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	aa 1f       	adc	r26, r26
     b86:	bb 1f       	adc	r27, r27
     b88:	88 0f       	add	r24, r24
     b8a:	99 1f       	adc	r25, r25
     b8c:	aa 1f       	adc	r26, r26
     b8e:	bb 1f       	adc	r27, r27
     b90:	88 0f       	add	r24, r24
     b92:	99 1f       	adc	r25, r25
     b94:	aa 1f       	adc	r26, r26
     b96:	bb 1f       	adc	r27, r27
     b98:	9c 01       	movw	r18, r24
     b9a:	ad 01       	movw	r20, r26
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	92 e1       	ldi	r25, 0x12	; 18
     ba0:	aa e7       	ldi	r26, 0x7A	; 122
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	bc 01       	movw	r22, r24
     ba6:	cd 01       	movw	r24, r26
     ba8:	0e 94 0a 11 	call	0x2214	; 0x2214 <__udivmodsi4>
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	01 97       	sbiw	r24, 0x01	; 1
     bb2:	9a 83       	std	Y+2, r25	; 0x02
     bb4:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH_REG = ubrr_value>>8;
     bb6:	e0 e4       	ldi	r30, 0x40	; 64
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	9a 81       	ldd	r25, Y+2	; 0x02
     bbe:	89 2f       	mov	r24, r25
     bc0:	99 27       	eor	r25, r25
     bc2:	80 83       	st	Z, r24
	UBRRL_REG = ubrr_value;
     bc4:	e9 e2       	ldi	r30, 0x29	; 41
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	80 83       	st	Z, r24
}
     bcc:	26 96       	adiw	r28, 0x06	; 6
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	f8 94       	cli
     bd2:	de bf       	out	0x3e, r29	; 62
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	cd bf       	out	0x3d, r28	; 61
     bd8:	cf 91       	pop	r28
     bda:	df 91       	pop	r29
     bdc:	08 95       	ret

00000bde <UART_sendByte>:

void UART_sendByte(const uint8 data)
{
     bde:	df 93       	push	r29
     be0:	cf 93       	push	r28
     be2:	0f 92       	push	r0
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
     be8:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA_REG, UDRE)){}
     bea:	eb e2       	ldi	r30, 0x2B	; 43
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	88 2f       	mov	r24, r24
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	80 72       	andi	r24, 0x20	; 32
     bf6:	90 70       	andi	r25, 0x00	; 0
     bf8:	00 97       	sbiw	r24, 0x00	; 0
     bfa:	b9 f3       	breq	.-18     	; 0xbea <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR_REG = data;
     bfc:	ec e2       	ldi	r30, 0x2C	; 44
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	89 81       	ldd	r24, Y+1	; 0x01
     c02:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
     c04:	0f 90       	pop	r0
     c06:	cf 91       	pop	r28
     c08:	df 91       	pop	r29
     c0a:	08 95       	ret

00000c0c <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
     c0c:	df 93       	push	r29
     c0e:	cf 93       	push	r28
     c10:	cd b7       	in	r28, 0x3d	; 61
     c12:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA_REG, RXC)){}
     c14:	eb e2       	ldi	r30, 0x2B	; 43
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	88 23       	and	r24, r24
     c1c:	dc f7       	brge	.-10     	; 0xc14 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR_REG;
     c1e:	ec e2       	ldi	r30, 0x2C	; 44
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
}
     c24:	cf 91       	pop	r28
     c26:	df 91       	pop	r29
     c28:	08 95       	ret

00000c2a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
     c2a:	df 93       	push	r29
     c2c:	cf 93       	push	r28
     c2e:	00 d0       	rcall	.+0      	; 0xc30 <UART_sendString+0x6>
     c30:	0f 92       	push	r0
     c32:	cd b7       	in	r28, 0x3d	; 61
     c34:	de b7       	in	r29, 0x3e	; 62
     c36:	9b 83       	std	Y+3, r25	; 0x03
     c38:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     c3a:	19 82       	std	Y+1, r1	; 0x01
     c3c:	0e c0       	rjmp	.+28     	; 0xc5a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	28 2f       	mov	r18, r24
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	8a 81       	ldd	r24, Y+2	; 0x02
     c46:	9b 81       	ldd	r25, Y+3	; 0x03
     c48:	fc 01       	movw	r30, r24
     c4a:	e2 0f       	add	r30, r18
     c4c:	f3 1f       	adc	r31, r19
     c4e:	80 81       	ld	r24, Z
     c50:	0e 94 ef 05 	call	0xbde	; 0xbde <UART_sendByte>
		i++;
     c54:	89 81       	ldd	r24, Y+1	; 0x01
     c56:	8f 5f       	subi	r24, 0xFF	; 255
     c58:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	28 2f       	mov	r18, r24
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	8a 81       	ldd	r24, Y+2	; 0x02
     c62:	9b 81       	ldd	r25, Y+3	; 0x03
     c64:	fc 01       	movw	r30, r24
     c66:	e2 0f       	add	r30, r18
     c68:	f3 1f       	adc	r31, r19
     c6a:	80 81       	ld	r24, Z
     c6c:	88 23       	and	r24, r24
     c6e:	39 f7       	brne	.-50     	; 0xc3e <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
     c74:	0f 90       	pop	r0
     c76:	cf 91       	pop	r28
     c78:	df 91       	pop	r29
     c7a:	08 95       	ret

00000c7c <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
     c7c:	0f 93       	push	r16
     c7e:	1f 93       	push	r17
     c80:	df 93       	push	r29
     c82:	cf 93       	push	r28
     c84:	00 d0       	rcall	.+0      	; 0xc86 <UART_receiveString+0xa>
     c86:	0f 92       	push	r0
     c88:	cd b7       	in	r28, 0x3d	; 61
     c8a:	de b7       	in	r29, 0x3e	; 62
     c8c:	9b 83       	std	Y+3, r25	; 0x03
     c8e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     c90:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	28 2f       	mov	r18, r24
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	9b 81       	ldd	r25, Y+3	; 0x03
     c9c:	8c 01       	movw	r16, r24
     c9e:	02 0f       	add	r16, r18
     ca0:	13 1f       	adc	r17, r19
     ca2:	0e 94 06 06 	call	0xc0c	; 0xc0c <UART_recieveByte>
     ca6:	f8 01       	movw	r30, r16
     ca8:	80 83       	st	Z, r24
     caa:	0f c0       	rjmp	.+30     	; 0xcca <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	8f 5f       	subi	r24, 0xFF	; 255
     cb0:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	9b 81       	ldd	r25, Y+3	; 0x03
     cbc:	8c 01       	movw	r16, r24
     cbe:	02 0f       	add	r16, r18
     cc0:	13 1f       	adc	r17, r19
     cc2:	0e 94 06 06 	call	0xc0c	; 0xc0c <UART_recieveByte>
     cc6:	f8 01       	movw	r30, r16
     cc8:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	28 2f       	mov	r18, r24
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	8a 81       	ldd	r24, Y+2	; 0x02
     cd2:	9b 81       	ldd	r25, Y+3	; 0x03
     cd4:	fc 01       	movw	r30, r24
     cd6:	e2 0f       	add	r30, r18
     cd8:	f3 1f       	adc	r31, r19
     cda:	80 81       	ld	r24, Z
     cdc:	83 32       	cpi	r24, 0x23	; 35
     cde:	31 f7       	brne	.-52     	; 0xcac <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	8a 81       	ldd	r24, Y+2	; 0x02
     ce8:	9b 81       	ldd	r25, Y+3	; 0x03
     cea:	fc 01       	movw	r30, r24
     cec:	e2 0f       	add	r30, r18
     cee:	f3 1f       	adc	r31, r19
     cf0:	10 82       	st	Z, r1
}
     cf2:	0f 90       	pop	r0
     cf4:	0f 90       	pop	r0
     cf6:	0f 90       	pop	r0
     cf8:	cf 91       	pop	r28
     cfa:	df 91       	pop	r29
     cfc:	1f 91       	pop	r17
     cfe:	0f 91       	pop	r16
     d00:	08 95       	ret

00000d02 <TIMER0_CAPT_vect>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
/* Timer 0 Capture Interrupt Service Routine */
ISR(TIMER0_CAPT_vect)
{
     d02:	1f 92       	push	r1
     d04:	0f 92       	push	r0
     d06:	0f b6       	in	r0, 0x3f	; 63
     d08:	0f 92       	push	r0
     d0a:	11 24       	eor	r1, r1
     d0c:	2f 93       	push	r18
     d0e:	3f 93       	push	r19
     d10:	4f 93       	push	r20
     d12:	5f 93       	push	r21
     d14:	6f 93       	push	r22
     d16:	7f 93       	push	r23
     d18:	8f 93       	push	r24
     d1a:	9f 93       	push	r25
     d1c:	af 93       	push	r26
     d1e:	bf 93       	push	r27
     d20:	ef 93       	push	r30
     d22:	ff 93       	push	r31
     d24:	df 93       	push	r29
     d26:	cf 93       	push	r28
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer0 != NULL_PTR)
     d2c:	80 91 70 00 	lds	r24, 0x0070
     d30:	90 91 71 00 	lds	r25, 0x0071
     d34:	00 97       	sbiw	r24, 0x00	; 0
     d36:	29 f0       	breq	.+10     	; 0xd42 <TIMER0_CAPT_vect+0x40>
	{
		(*g_callBackPtr_timer0)();
     d38:	e0 91 70 00 	lds	r30, 0x0070
     d3c:	f0 91 71 00 	lds	r31, 0x0071
     d40:	09 95       	icall
	}
}
     d42:	cf 91       	pop	r28
     d44:	df 91       	pop	r29
     d46:	ff 91       	pop	r31
     d48:	ef 91       	pop	r30
     d4a:	bf 91       	pop	r27
     d4c:	af 91       	pop	r26
     d4e:	9f 91       	pop	r25
     d50:	8f 91       	pop	r24
     d52:	7f 91       	pop	r23
     d54:	6f 91       	pop	r22
     d56:	5f 91       	pop	r21
     d58:	4f 91       	pop	r20
     d5a:	3f 91       	pop	r19
     d5c:	2f 91       	pop	r18
     d5e:	0f 90       	pop	r0
     d60:	0f be       	out	0x3f, r0	; 63
     d62:	0f 90       	pop	r0
     d64:	1f 90       	pop	r1
     d66:	18 95       	reti

00000d68 <__vector_10>:

/* Timer 0 Compare Match Interrupt Service Routine */
ISR(TIMER0_COMP_vect)
{
     d68:	1f 92       	push	r1
     d6a:	0f 92       	push	r0
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	0f 92       	push	r0
     d70:	11 24       	eor	r1, r1
     d72:	2f 93       	push	r18
     d74:	3f 93       	push	r19
     d76:	4f 93       	push	r20
     d78:	5f 93       	push	r21
     d7a:	6f 93       	push	r22
     d7c:	7f 93       	push	r23
     d7e:	8f 93       	push	r24
     d80:	9f 93       	push	r25
     d82:	af 93       	push	r26
     d84:	bf 93       	push	r27
     d86:	ef 93       	push	r30
     d88:	ff 93       	push	r31
     d8a:	df 93       	push	r29
     d8c:	cf 93       	push	r28
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer0 != NULL_PTR)
     d92:	80 91 70 00 	lds	r24, 0x0070
     d96:	90 91 71 00 	lds	r25, 0x0071
     d9a:	00 97       	sbiw	r24, 0x00	; 0
     d9c:	29 f0       	breq	.+10     	; 0xda8 <__vector_10+0x40>
	{
		(*g_callBackPtr_timer0)();
     d9e:	e0 91 70 00 	lds	r30, 0x0070
     da2:	f0 91 71 00 	lds	r31, 0x0071
     da6:	09 95       	icall
	}
}
     da8:	cf 91       	pop	r28
     daa:	df 91       	pop	r29
     dac:	ff 91       	pop	r31
     dae:	ef 91       	pop	r30
     db0:	bf 91       	pop	r27
     db2:	af 91       	pop	r26
     db4:	9f 91       	pop	r25
     db6:	8f 91       	pop	r24
     db8:	7f 91       	pop	r23
     dba:	6f 91       	pop	r22
     dbc:	5f 91       	pop	r21
     dbe:	4f 91       	pop	r20
     dc0:	3f 91       	pop	r19
     dc2:	2f 91       	pop	r18
     dc4:	0f 90       	pop	r0
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	0f 90       	pop	r0
     dca:	1f 90       	pop	r1
     dcc:	18 95       	reti

00000dce <__vector_6>:

/* Timer 1 Capture Interrupt Service Routine */
ISR(TIMER1_CAPT_vect)
{
     dce:	1f 92       	push	r1
     dd0:	0f 92       	push	r0
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	0f 92       	push	r0
     dd6:	11 24       	eor	r1, r1
     dd8:	2f 93       	push	r18
     dda:	3f 93       	push	r19
     ddc:	4f 93       	push	r20
     dde:	5f 93       	push	r21
     de0:	6f 93       	push	r22
     de2:	7f 93       	push	r23
     de4:	8f 93       	push	r24
     de6:	9f 93       	push	r25
     de8:	af 93       	push	r26
     dea:	bf 93       	push	r27
     dec:	ef 93       	push	r30
     dee:	ff 93       	push	r31
     df0:	df 93       	push	r29
     df2:	cf 93       	push	r28
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer1 != NULL_PTR)
     df8:	80 91 72 00 	lds	r24, 0x0072
     dfc:	90 91 73 00 	lds	r25, 0x0073
     e00:	00 97       	sbiw	r24, 0x00	; 0
     e02:	29 f0       	breq	.+10     	; 0xe0e <__vector_6+0x40>
	{
		(*g_callBackPtr_timer1)();
     e04:	e0 91 72 00 	lds	r30, 0x0072
     e08:	f0 91 73 00 	lds	r31, 0x0073
     e0c:	09 95       	icall
	}
}
     e0e:	cf 91       	pop	r28
     e10:	df 91       	pop	r29
     e12:	ff 91       	pop	r31
     e14:	ef 91       	pop	r30
     e16:	bf 91       	pop	r27
     e18:	af 91       	pop	r26
     e1a:	9f 91       	pop	r25
     e1c:	8f 91       	pop	r24
     e1e:	7f 91       	pop	r23
     e20:	6f 91       	pop	r22
     e22:	5f 91       	pop	r21
     e24:	4f 91       	pop	r20
     e26:	3f 91       	pop	r19
     e28:	2f 91       	pop	r18
     e2a:	0f 90       	pop	r0
     e2c:	0f be       	out	0x3f, r0	; 63
     e2e:	0f 90       	pop	r0
     e30:	1f 90       	pop	r1
     e32:	18 95       	reti

00000e34 <__vector_7>:

/* Timer 1 Compare Match Interrupt Service Routine */
ISR(TIMER1_COMPA_vect)
{
     e34:	1f 92       	push	r1
     e36:	0f 92       	push	r0
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	0f 92       	push	r0
     e3c:	11 24       	eor	r1, r1
     e3e:	2f 93       	push	r18
     e40:	3f 93       	push	r19
     e42:	4f 93       	push	r20
     e44:	5f 93       	push	r21
     e46:	6f 93       	push	r22
     e48:	7f 93       	push	r23
     e4a:	8f 93       	push	r24
     e4c:	9f 93       	push	r25
     e4e:	af 93       	push	r26
     e50:	bf 93       	push	r27
     e52:	ef 93       	push	r30
     e54:	ff 93       	push	r31
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer1 != NULL_PTR)
     e5e:	80 91 72 00 	lds	r24, 0x0072
     e62:	90 91 73 00 	lds	r25, 0x0073
     e66:	00 97       	sbiw	r24, 0x00	; 0
     e68:	29 f0       	breq	.+10     	; 0xe74 <__vector_7+0x40>
	{
		(*g_callBackPtr_timer1)();
     e6a:	e0 91 72 00 	lds	r30, 0x0072
     e6e:	f0 91 73 00 	lds	r31, 0x0073
     e72:	09 95       	icall
	}
}
     e74:	cf 91       	pop	r28
     e76:	df 91       	pop	r29
     e78:	ff 91       	pop	r31
     e7a:	ef 91       	pop	r30
     e7c:	bf 91       	pop	r27
     e7e:	af 91       	pop	r26
     e80:	9f 91       	pop	r25
     e82:	8f 91       	pop	r24
     e84:	7f 91       	pop	r23
     e86:	6f 91       	pop	r22
     e88:	5f 91       	pop	r21
     e8a:	4f 91       	pop	r20
     e8c:	3f 91       	pop	r19
     e8e:	2f 91       	pop	r18
     e90:	0f 90       	pop	r0
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	0f 90       	pop	r0
     e96:	1f 90       	pop	r1
     e98:	18 95       	reti

00000e9a <TIMER2_CAPT_vect>:

/* Timer 2 Capture Interrupt Service Routine */
ISR(TIMER2_CAPT_vect)
{
     e9a:	1f 92       	push	r1
     e9c:	0f 92       	push	r0
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	0f 92       	push	r0
     ea2:	11 24       	eor	r1, r1
     ea4:	2f 93       	push	r18
     ea6:	3f 93       	push	r19
     ea8:	4f 93       	push	r20
     eaa:	5f 93       	push	r21
     eac:	6f 93       	push	r22
     eae:	7f 93       	push	r23
     eb0:	8f 93       	push	r24
     eb2:	9f 93       	push	r25
     eb4:	af 93       	push	r26
     eb6:	bf 93       	push	r27
     eb8:	ef 93       	push	r30
     eba:	ff 93       	push	r31
     ebc:	df 93       	push	r29
     ebe:	cf 93       	push	r28
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer2 != NULL_PTR)
     ec4:	80 91 74 00 	lds	r24, 0x0074
     ec8:	90 91 75 00 	lds	r25, 0x0075
     ecc:	00 97       	sbiw	r24, 0x00	; 0
     ece:	29 f0       	breq	.+10     	; 0xeda <TIMER2_CAPT_vect+0x40>
	{
		(*g_callBackPtr_timer2)();
     ed0:	e0 91 74 00 	lds	r30, 0x0074
     ed4:	f0 91 75 00 	lds	r31, 0x0075
     ed8:	09 95       	icall
	}
}
     eda:	cf 91       	pop	r28
     edc:	df 91       	pop	r29
     ede:	ff 91       	pop	r31
     ee0:	ef 91       	pop	r30
     ee2:	bf 91       	pop	r27
     ee4:	af 91       	pop	r26
     ee6:	9f 91       	pop	r25
     ee8:	8f 91       	pop	r24
     eea:	7f 91       	pop	r23
     eec:	6f 91       	pop	r22
     eee:	5f 91       	pop	r21
     ef0:	4f 91       	pop	r20
     ef2:	3f 91       	pop	r19
     ef4:	2f 91       	pop	r18
     ef6:	0f 90       	pop	r0
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	0f 90       	pop	r0
     efc:	1f 90       	pop	r1
     efe:	18 95       	reti

00000f00 <__vector_4>:

/* Timer 2 Compare Match Interrupt Service Routine */
ISR(TIMER2_COMP_vect)
{
     f00:	1f 92       	push	r1
     f02:	0f 92       	push	r0
     f04:	0f b6       	in	r0, 0x3f	; 63
     f06:	0f 92       	push	r0
     f08:	11 24       	eor	r1, r1
     f0a:	2f 93       	push	r18
     f0c:	3f 93       	push	r19
     f0e:	4f 93       	push	r20
     f10:	5f 93       	push	r21
     f12:	6f 93       	push	r22
     f14:	7f 93       	push	r23
     f16:	8f 93       	push	r24
     f18:	9f 93       	push	r25
     f1a:	af 93       	push	r26
     f1c:	bf 93       	push	r27
     f1e:	ef 93       	push	r30
     f20:	ff 93       	push	r31
     f22:	df 93       	push	r29
     f24:	cf 93       	push	r28
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer2 != NULL_PTR)
     f2a:	80 91 74 00 	lds	r24, 0x0074
     f2e:	90 91 75 00 	lds	r25, 0x0075
     f32:	00 97       	sbiw	r24, 0x00	; 0
     f34:	29 f0       	breq	.+10     	; 0xf40 <__vector_4+0x40>
	{
		(*g_callBackPtr_timer2)();
     f36:	e0 91 74 00 	lds	r30, 0x0074
     f3a:	f0 91 75 00 	lds	r31, 0x0075
     f3e:	09 95       	icall
	}
}
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	ff 91       	pop	r31
     f46:	ef 91       	pop	r30
     f48:	bf 91       	pop	r27
     f4a:	af 91       	pop	r26
     f4c:	9f 91       	pop	r25
     f4e:	8f 91       	pop	r24
     f50:	7f 91       	pop	r23
     f52:	6f 91       	pop	r22
     f54:	5f 91       	pop	r21
     f56:	4f 91       	pop	r20
     f58:	3f 91       	pop	r19
     f5a:	2f 91       	pop	r18
     f5c:	0f 90       	pop	r0
     f5e:	0f be       	out	0x3f, r0	; 63
     f60:	0f 90       	pop	r0
     f62:	1f 90       	pop	r1
     f64:	18 95       	reti

00000f66 <Timer_setCallBack>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type timer_ID)
{
     f66:	df 93       	push	r29
     f68:	cf 93       	push	r28
     f6a:	00 d0       	rcall	.+0      	; 0xf6c <Timer_setCallBack+0x6>
     f6c:	00 d0       	rcall	.+0      	; 0xf6e <Timer_setCallBack+0x8>
     f6e:	0f 92       	push	r0
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
     f74:	9a 83       	std	Y+2, r25	; 0x02
     f76:	89 83       	std	Y+1, r24	; 0x01
     f78:	6b 83       	std	Y+3, r22	; 0x03
	switch (timer_ID)
     f7a:	8b 81       	ldd	r24, Y+3	; 0x03
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	3d 83       	std	Y+5, r19	; 0x05
     f82:	2c 83       	std	Y+4, r18	; 0x04
     f84:	8c 81       	ldd	r24, Y+4	; 0x04
     f86:	9d 81       	ldd	r25, Y+5	; 0x05
     f88:	81 30       	cpi	r24, 0x01	; 1
     f8a:	91 05       	cpc	r25, r1
     f8c:	81 f0       	breq	.+32     	; 0xfae <Timer_setCallBack+0x48>
     f8e:	2c 81       	ldd	r18, Y+4	; 0x04
     f90:	3d 81       	ldd	r19, Y+5	; 0x05
     f92:	22 30       	cpi	r18, 0x02	; 2
     f94:	31 05       	cpc	r19, r1
     f96:	91 f0       	breq	.+36     	; 0xfbc <Timer_setCallBack+0x56>
     f98:	8c 81       	ldd	r24, Y+4	; 0x04
     f9a:	9d 81       	ldd	r25, Y+5	; 0x05
     f9c:	00 97       	sbiw	r24, 0x00	; 0
     f9e:	a1 f4       	brne	.+40     	; 0xfc8 <Timer_setCallBack+0x62>
	{
	case TIMER0:
		g_callBackPtr_timer0 = a_ptr;  /* Set the callback for Timer 0 */
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	9a 81       	ldd	r25, Y+2	; 0x02
     fa4:	90 93 71 00 	sts	0x0071, r25
     fa8:	80 93 70 00 	sts	0x0070, r24
     fac:	0d c0       	rjmp	.+26     	; 0xfc8 <Timer_setCallBack+0x62>
		break;
	case TIMER1:
		g_callBackPtr_timer1 = a_ptr;  /* Set the callback for Timer 1 */
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	9a 81       	ldd	r25, Y+2	; 0x02
     fb2:	90 93 73 00 	sts	0x0073, r25
     fb6:	80 93 72 00 	sts	0x0072, r24
     fba:	06 c0       	rjmp	.+12     	; 0xfc8 <Timer_setCallBack+0x62>
		break;
	case TIMER2:
		g_callBackPtr_timer2 = a_ptr;  /* Set the callback for Timer 2 */
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	9a 81       	ldd	r25, Y+2	; 0x02
     fc0:	90 93 75 00 	sts	0x0075, r25
     fc4:	80 93 74 00 	sts	0x0074, r24
		break;
	default:
		break;
	}
}
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	0f 90       	pop	r0
     fd2:	cf 91       	pop	r28
     fd4:	df 91       	pop	r29
     fd6:	08 95       	ret

00000fd8 <Timer_init>:

void Timer_init(const Timer_ConfigType * Config_Ptr)
{
     fd8:	df 93       	push	r29
     fda:	cf 93       	push	r28
     fdc:	00 d0       	rcall	.+0      	; 0xfde <Timer_init+0x6>
     fde:	00 d0       	rcall	.+0      	; 0xfe0 <Timer_init+0x8>
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
     fe4:	9a 83       	std	Y+2, r25	; 0x02
     fe6:	89 83       	std	Y+1, r24	; 0x01
	/* Initialize the timer counter based on the timer ID */
	switch (Config_Ptr->timer_ID)
     fe8:	e9 81       	ldd	r30, Y+1	; 0x01
     fea:	fa 81       	ldd	r31, Y+2	; 0x02
     fec:	84 81       	ldd	r24, Z+4	; 0x04
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	3c 83       	std	Y+4, r19	; 0x04
     ff4:	2b 83       	std	Y+3, r18	; 0x03
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	9c 81       	ldd	r25, Y+4	; 0x04
     ffa:	81 30       	cpi	r24, 0x01	; 1
     ffc:	91 05       	cpc	r25, r1
     ffe:	c1 f1       	breq	.+112    	; 0x1070 <Timer_init+0x98>
    1000:	2b 81       	ldd	r18, Y+3	; 0x03
    1002:	3c 81       	ldd	r19, Y+4	; 0x04
    1004:	22 30       	cpi	r18, 0x02	; 2
    1006:	31 05       	cpc	r19, r1
    1008:	09 f4       	brne	.+2      	; 0x100c <Timer_init+0x34>
    100a:	6e c0       	rjmp	.+220    	; 0x10e8 <Timer_init+0x110>
    100c:	8b 81       	ldd	r24, Y+3	; 0x03
    100e:	9c 81       	ldd	r25, Y+4	; 0x04
    1010:	00 97       	sbiw	r24, 0x00	; 0
    1012:	09 f0       	breq	.+2      	; 0x1016 <Timer_init+0x3e>
    1014:	95 c0       	rjmp	.+298    	; 0x1140 <Timer_init+0x168>
	{
	case TIMER0:
		TCNT0 = Config_Ptr->timer_InitialValue;	/* Set initial value for Timer 0 */
    1016:	a2 e5       	ldi	r26, 0x52	; 82
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e9 81       	ldd	r30, Y+1	; 0x01
    101c:	fa 81       	ldd	r31, Y+2	; 0x02
    101e:	80 81       	ld	r24, Z
    1020:	91 81       	ldd	r25, Z+1	; 0x01
    1022:	8c 93       	st	X, r24
		if (Config_Ptr->timer_mode == TIMER_COMP_MODE)
    1024:	e9 81       	ldd	r30, Y+1	; 0x01
    1026:	fa 81       	ldd	r31, Y+2	; 0x02
    1028:	86 81       	ldd	r24, Z+6	; 0x06
    102a:	81 30       	cpi	r24, 0x01	; 1
    102c:	79 f4       	brne	.+30     	; 0x104c <Timer_init+0x74>
		{
			OCR0 = Config_Ptr->timer_compare_value;	/* Set compare value for Timer 0 */
    102e:	ac e5       	ldi	r26, 0x5C	; 92
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e9 81       	ldd	r30, Y+1	; 0x01
    1034:	fa 81       	ldd	r31, Y+2	; 0x02
    1036:	82 81       	ldd	r24, Z+2	; 0x02
    1038:	93 81       	ldd	r25, Z+3	; 0x03
    103a:	8c 93       	st	X, r24
			TIMSK |= (1<<OCIE0);		/* Enable Timer 0 Compare Match Interrupt */
    103c:	a9 e5       	ldi	r26, 0x59	; 89
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e9 e5       	ldi	r30, 0x59	; 89
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	82 60       	ori	r24, 0x02	; 2
    1048:	8c 93       	st	X, r24
    104a:	07 c0       	rjmp	.+14     	; 0x105a <Timer_init+0x82>
		}
		else
		{
			TIMSK |= (1<<TOIE0);		/* Enable Timer 0 Overflow Interrupt */
    104c:	a9 e5       	ldi	r26, 0x59	; 89
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e9 e5       	ldi	r30, 0x59	; 89
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	81 60       	ori	r24, 0x01	; 1
    1058:	8c 93       	st	X, r24
		}
		TCCR0 |= (Config_Ptr->prescaler);		/* Set prescaler for Timer 0 */
    105a:	a3 e5       	ldi	r26, 0x53	; 83
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e3 e5       	ldi	r30, 0x53	; 83
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	90 81       	ld	r25, Z
    1064:	e9 81       	ldd	r30, Y+1	; 0x01
    1066:	fa 81       	ldd	r31, Y+2	; 0x02
    1068:	85 81       	ldd	r24, Z+5	; 0x05
    106a:	89 2b       	or	r24, r25
    106c:	8c 93       	st	X, r24
    106e:	68 c0       	rjmp	.+208    	; 0x1140 <Timer_init+0x168>
		break;

	case TIMER1:
		TCNT1 = Config_Ptr->timer_InitialValue;	/* Set initial value for Timer 1 */
    1070:	ac e4       	ldi	r26, 0x4C	; 76
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	e9 81       	ldd	r30, Y+1	; 0x01
    1076:	fa 81       	ldd	r31, Y+2	; 0x02
    1078:	80 81       	ld	r24, Z
    107a:	91 81       	ldd	r25, Z+1	; 0x01
    107c:	11 96       	adiw	r26, 0x01	; 1
    107e:	9c 93       	st	X, r25
    1080:	8e 93       	st	-X, r24
		if (Config_Ptr->timer_mode == TIMER_COMP_MODE)
    1082:	e9 81       	ldd	r30, Y+1	; 0x01
    1084:	fa 81       	ldd	r31, Y+2	; 0x02
    1086:	86 81       	ldd	r24, Z+6	; 0x06
    1088:	81 30       	cpi	r24, 0x01	; 1
    108a:	c1 f4       	brne	.+48     	; 0x10bc <Timer_init+0xe4>
		{
			OCR1A = Config_Ptr->timer_compare_value;	/* Set compare value for Timer 1 */
    108c:	aa e4       	ldi	r26, 0x4A	; 74
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e9 81       	ldd	r30, Y+1	; 0x01
    1092:	fa 81       	ldd	r31, Y+2	; 0x02
    1094:	82 81       	ldd	r24, Z+2	; 0x02
    1096:	93 81       	ldd	r25, Z+3	; 0x03
    1098:	11 96       	adiw	r26, 0x01	; 1
    109a:	9c 93       	st	X, r25
    109c:	8e 93       	st	-X, r24
			TIMSK |= (1<<OCIE1A);		/* Enable Timer 1 Compare Match Interrupt */
    109e:	a9 e5       	ldi	r26, 0x59	; 89
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e9 e5       	ldi	r30, 0x59	; 89
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	80 61       	ori	r24, 0x10	; 16
    10aa:	8c 93       	st	X, r24
			TCCR1B |= (1<<WGM12);		/* Set CTC mode for Timer 1 */
    10ac:	ae e4       	ldi	r26, 0x4E	; 78
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	ee e4       	ldi	r30, 0x4E	; 78
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	88 60       	ori	r24, 0x08	; 8
    10b8:	8c 93       	st	X, r24
    10ba:	07 c0       	rjmp	.+14     	; 0x10ca <Timer_init+0xf2>
		}
		else
		{
			TIMSK |= (1<<TOIE1);		/* Enable Timer 1 Overflow Interrupt */
    10bc:	a9 e5       	ldi	r26, 0x59	; 89
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e9 e5       	ldi	r30, 0x59	; 89
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	84 60       	ori	r24, 0x04	; 4
    10c8:	8c 93       	st	X, r24
		}
		TCCR1B |= (Config_Ptr->prescaler);		/* Set prescaler for Timer 1 */
    10ca:	ae e4       	ldi	r26, 0x4E	; 78
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	ee e4       	ldi	r30, 0x4E	; 78
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	90 81       	ld	r25, Z
    10d4:	e9 81       	ldd	r30, Y+1	; 0x01
    10d6:	fa 81       	ldd	r31, Y+2	; 0x02
    10d8:	85 81       	ldd	r24, Z+5	; 0x05
    10da:	89 2b       	or	r24, r25
    10dc:	8c 93       	st	X, r24
		TCCR1A = (1<<FOC1A) | (1<<FOC1B);		/* Set Fast PWM mode for Timer 1 */
    10de:	ef e4       	ldi	r30, 0x4F	; 79
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	8c e0       	ldi	r24, 0x0C	; 12
    10e4:	80 83       	st	Z, r24
    10e6:	2c c0       	rjmp	.+88     	; 0x1140 <Timer_init+0x168>
		break;

	case TIMER2:
		TCNT2 = Config_Ptr->timer_InitialValue;		/* Set initial value for Timer 2 */
    10e8:	a4 e4       	ldi	r26, 0x44	; 68
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e9 81       	ldd	r30, Y+1	; 0x01
    10ee:	fa 81       	ldd	r31, Y+2	; 0x02
    10f0:	80 81       	ld	r24, Z
    10f2:	91 81       	ldd	r25, Z+1	; 0x01
    10f4:	8c 93       	st	X, r24
		if (Config_Ptr->timer_mode == TIMER_COMP_MODE)
    10f6:	e9 81       	ldd	r30, Y+1	; 0x01
    10f8:	fa 81       	ldd	r31, Y+2	; 0x02
    10fa:	86 81       	ldd	r24, Z+6	; 0x06
    10fc:	81 30       	cpi	r24, 0x01	; 1
    10fe:	79 f4       	brne	.+30     	; 0x111e <Timer_init+0x146>
		{
			OCR2 = Config_Ptr->timer_compare_value;		/* Set compare value for Timer 2 */
    1100:	a3 e4       	ldi	r26, 0x43	; 67
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e9 81       	ldd	r30, Y+1	; 0x01
    1106:	fa 81       	ldd	r31, Y+2	; 0x02
    1108:	82 81       	ldd	r24, Z+2	; 0x02
    110a:	93 81       	ldd	r25, Z+3	; 0x03
    110c:	8c 93       	st	X, r24
			TIMSK |= (1<<OCIE2);		/* Enable Timer 2 Compare Match Interrupt */
    110e:	a9 e5       	ldi	r26, 0x59	; 89
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e9 e5       	ldi	r30, 0x59	; 89
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	80 68       	ori	r24, 0x80	; 128
    111a:	8c 93       	st	X, r24
    111c:	07 c0       	rjmp	.+14     	; 0x112c <Timer_init+0x154>
		}
		else
		{
			TIMSK |= (1<<TOIE2);		/* Enable Timer 2 Overflow Interrupt */
    111e:	a9 e5       	ldi	r26, 0x59	; 89
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e9 e5       	ldi	r30, 0x59	; 89
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	80 64       	ori	r24, 0x40	; 64
    112a:	8c 93       	st	X, r24
		}
		TCCR2 |= (Config_Ptr->prescaler);		/* Set prescaler for Timer 2 */
    112c:	a5 e4       	ldi	r26, 0x45	; 69
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e5 e4       	ldi	r30, 0x45	; 69
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	90 81       	ld	r25, Z
    1136:	e9 81       	ldd	r30, Y+1	; 0x01
    1138:	fa 81       	ldd	r31, Y+2	; 0x02
    113a:	85 81       	ldd	r24, Z+5	; 0x05
    113c:	89 2b       	or	r24, r25
    113e:	8c 93       	st	X, r24
		break;

	default:
		break;
	}
}
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <Timer_deInit>:

void Timer_deInit(void)
{
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
	/* Reset the settings for Timer 0 */
	TCNT0 = 0;		/* Reset Timer 0 Counter */
    1156:	e2 e5       	ldi	r30, 0x52	; 82
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	10 82       	st	Z, r1
	TCCR0 = 0;		/* Clear Timer 0 Control Register */
    115c:	e3 e5       	ldi	r30, 0x53	; 83
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	10 82       	st	Z, r1
	TIMSK &= ~(1<<TOIE0);	/* Disable Timer 0 Overflow Interrupt */
    1162:	a9 e5       	ldi	r26, 0x59	; 89
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e9 e5       	ldi	r30, 0x59	; 89
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	8e 7f       	andi	r24, 0xFE	; 254
    116e:	8c 93       	st	X, r24
	TIMSK &= ~(1<<OCIE0);	/* Disable Timer 0 Compare Match Interrupt */
    1170:	a9 e5       	ldi	r26, 0x59	; 89
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	e9 e5       	ldi	r30, 0x59	; 89
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	8d 7f       	andi	r24, 0xFD	; 253
    117c:	8c 93       	st	X, r24

	/* Reset the settings for Timer 1 */
	TCNT1 = 0;		/* Reset Timer 1 Counter */
    117e:	ec e4       	ldi	r30, 0x4C	; 76
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	11 82       	std	Z+1, r1	; 0x01
    1184:	10 82       	st	Z, r1
	OCR1A = 0;		/* Reset Timer 1 Compare Match Value */
    1186:	ea e4       	ldi	r30, 0x4A	; 74
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	11 82       	std	Z+1, r1	; 0x01
    118c:	10 82       	st	Z, r1
	TCCR1A = 0;		/* Clear Timer 1 Control Register A */
    118e:	ef e4       	ldi	r30, 0x4F	; 79
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	10 82       	st	Z, r1
	TCCR1B = 0;		/* Clear Timer 1 Control Register B */
    1194:	ee e4       	ldi	r30, 0x4E	; 78
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	10 82       	st	Z, r1
	TIMSK &= ~(1<<TOIE1);	/* Disable Timer 1 Overflow Interrupt */
    119a:	a9 e5       	ldi	r26, 0x59	; 89
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	e9 e5       	ldi	r30, 0x59	; 89
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	8b 7f       	andi	r24, 0xFB	; 251
    11a6:	8c 93       	st	X, r24
	TIMSK &= ~(1<<OCIE1A);	/* Disable Timer 1 Compare Match Interrupt */
    11a8:	a9 e5       	ldi	r26, 0x59	; 89
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e9 e5       	ldi	r30, 0x59	; 89
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	8f 7e       	andi	r24, 0xEF	; 239
    11b4:	8c 93       	st	X, r24

	/* Reset the settings for Timer 2 */
	TCNT2 = 0;		/* Reset Timer 2 Counter */
    11b6:	e4 e4       	ldi	r30, 0x44	; 68
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	10 82       	st	Z, r1
	OCR2 = 0;		/* Reset Timer 2 Compare Match Value */
    11bc:	e3 e4       	ldi	r30, 0x43	; 67
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	10 82       	st	Z, r1
	TCCR2 = 0;		/* Clear Timer 2 Control Register */
    11c2:	e5 e4       	ldi	r30, 0x45	; 69
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	10 82       	st	Z, r1
	TIMSK &= ~(1<<TOIE2);	/* Disable Timer 2 Overflow Interrupt */
    11c8:	a9 e5       	ldi	r26, 0x59	; 89
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	e9 e5       	ldi	r30, 0x59	; 89
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	8f 7b       	andi	r24, 0xBF	; 191
    11d4:	8c 93       	st	X, r24
	TIMSK &= ~(1<<OCIE2);	/* Disable Timer 2 Compare Match Interrupt */
    11d6:	a9 e5       	ldi	r26, 0x59	; 89
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e9 e5       	ldi	r30, 0x59	; 89
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	8f 77       	andi	r24, 0x7F	; 127
    11e2:	8c 93       	st	X, r24
}
    11e4:	cf 91       	pop	r28
    11e6:	df 91       	pop	r29
    11e8:	08 95       	ret

000011ea <PWM_Timer0_Start>:
 * Description	: Source file for the PWM AVR driver
 ************************************************************************************/
#include "pwm.h"

void PWM_Timer0_Start(uint8_t duty_cycle)
{
    11ea:	df 93       	push	r29
    11ec:	cf 93       	push	r28
    11ee:	0f 92       	push	r0
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
    11f4:	89 83       	std	Y+1, r24	; 0x01
    /* Set OC0 (PB3) as output */
    DDRB |= (1 << PB3);
    11f6:	a7 e3       	ldi	r26, 0x37	; 55
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	e7 e3       	ldi	r30, 0x37	; 55
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	88 60       	ori	r24, 0x08	; 8
    1202:	8c 93       	st	X, r24

    /* Set Fast PWM mode, non-inverting */
    TCCR0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS01) | (1 << CS00); // Prescaler F_CPU/64
    1204:	e3 e5       	ldi	r30, 0x53	; 83
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	8b e6       	ldi	r24, 0x6B	; 107
    120a:	80 83       	st	Z, r24

    /* Set the duty cycle */
    /* 0% -> 0, 100% -> 255 */
    if (duty_cycle <= 100) {
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	85 36       	cpi	r24, 0x65	; 101
    1210:	d8 f4       	brcc	.+54     	; 0x1248 <PWM_Timer0_Start+0x5e>
        OCR0 = (duty_cycle * 255) / 100;
    1212:	ec e5       	ldi	r30, 0x5C	; 92
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	48 2f       	mov	r20, r24
    121a:	50 e0       	ldi	r21, 0x00	; 0
    121c:	ca 01       	movw	r24, r20
    121e:	9c 01       	movw	r18, r24
    1220:	22 0f       	add	r18, r18
    1222:	33 1f       	adc	r19, r19
    1224:	c9 01       	movw	r24, r18
    1226:	96 95       	lsr	r25
    1228:	98 2f       	mov	r25, r24
    122a:	88 27       	eor	r24, r24
    122c:	97 95       	ror	r25
    122e:	87 95       	ror	r24
    1230:	82 1b       	sub	r24, r18
    1232:	93 0b       	sbc	r25, r19
    1234:	84 0f       	add	r24, r20
    1236:	95 1f       	adc	r25, r21
    1238:	24 e6       	ldi	r18, 0x64	; 100
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	b9 01       	movw	r22, r18
    123e:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__divmodhi4>
    1242:	cb 01       	movw	r24, r22
    1244:	80 83       	st	Z, r24
    1246:	04 c0       	rjmp	.+8      	; 0x1250 <PWM_Timer0_Start+0x66>
    } else {
        OCR0 = 255; /* Maximum duty cycle if value exceeds 100% */
    1248:	ec e5       	ldi	r30, 0x5C	; 92
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	8f ef       	ldi	r24, 0xFF	; 255
    124e:	80 83       	st	Z, r24
    }
}
    1250:	0f 90       	pop	r0
    1252:	cf 91       	pop	r28
    1254:	df 91       	pop	r29
    1256:	08 95       	ret

00001258 <TWI_init>:
 * Description: Source file for the I2C(TWI) AVR driver
 *******************************************************************************/
#include "i2c.h"

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    1258:	df 93       	push	r29
    125a:	cf 93       	push	r28
    125c:	00 d0       	rcall	.+0      	; 0x125e <TWI_init+0x6>
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	9a 83       	std	Y+2, r25	; 0x02
    1264:	89 83       	std	Y+1, r24	; 0x01
	// Set the TWI Bit Rate based on the configuration structure
	TWBR = Config_Ptr->bit_rate;  // Bit Rate: Set based on configuration
    1266:	a0 e2       	ldi	r26, 0x20	; 32
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e9 81       	ldd	r30, Y+1	; 0x01
    126c:	fa 81       	ldd	r31, Y+2	; 0x02
    126e:	81 81       	ldd	r24, Z+1	; 0x01
    1270:	92 81       	ldd	r25, Z+2	; 0x02
    1272:	8c 93       	st	X, r24
	TWSR = 0x00;                   // Prescaler value (0)
    1274:	e1 e2       	ldi	r30, 0x21	; 33
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	10 82       	st	Z, r1

	// Set the Two Wire Bus address based on the configuration structure
	TWAR = Config_Ptr->address;    // Set TWI address from configuration
    127a:	a2 e2       	ldi	r26, 0x22	; 34
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	e9 81       	ldd	r30, Y+1	; 0x01
    1280:	fa 81       	ldd	r31, Y+2	; 0x02
    1282:	80 81       	ld	r24, Z
    1284:	8c 93       	st	X, r24

	TWCR = (1 << TWEN);            // Enable TWI
    1286:	e6 e5       	ldi	r30, 0x56	; 86
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	84 e0       	ldi	r24, 0x04	; 4
    128c:	80 83       	st	Z, r24
}
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	cf 91       	pop	r28
    1294:	df 91       	pop	r29
    1296:	08 95       	ret

00001298 <TWI_start>:

void TWI_start(void)
{
    1298:	df 93       	push	r29
    129a:	cf 93       	push	r28
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
	// Clear the TWINT flag before sending the start bit
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    12a0:	e6 e5       	ldi	r30, 0x56	; 86
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	84 ea       	ldi	r24, 0xA4	; 164
    12a6:	80 83       	st	Z, r24

	// Wait for TWINT flag set in TWCR Register (start bit is sent successfully)
	while (BIT_IS_CLEAR(TWCR, TWINT));
    12a8:	e6 e5       	ldi	r30, 0x56	; 86
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	88 23       	and	r24, r24
    12b0:	dc f7       	brge	.-10     	; 0x12a8 <TWI_start+0x10>
}
    12b2:	cf 91       	pop	r28
    12b4:	df 91       	pop	r29
    12b6:	08 95       	ret

000012b8 <TWI_stop>:

void TWI_stop(void)
{
    12b8:	df 93       	push	r29
    12ba:	cf 93       	push	r28
    12bc:	cd b7       	in	r28, 0x3d	; 61
    12be:	de b7       	in	r29, 0x3e	; 62
	// Clear the TWINT flag before sending the stop bit
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    12c0:	e6 e5       	ldi	r30, 0x56	; 86
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	84 e9       	ldi	r24, 0x94	; 148
    12c6:	80 83       	st	Z, r24
}
    12c8:	cf 91       	pop	r28
    12ca:	df 91       	pop	r29
    12cc:	08 95       	ret

000012ce <TWI_writeByte>:

void TWI_writeByte(uint8_t data)
{
    12ce:	df 93       	push	r29
    12d0:	cf 93       	push	r28
    12d2:	0f 92       	push	r0
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
    12d8:	89 83       	std	Y+1, r24	; 0x01
	// Put data on TWI data Register
	TWDR = data;
    12da:	e3 e2       	ldi	r30, 0x23	; 35
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	89 81       	ldd	r24, Y+1	; 0x01
    12e0:	80 83       	st	Z, r24

	// Clear the TWINT flag before sending the data
	TWCR = (1 << TWINT) | (1 << TWEN);
    12e2:	e6 e5       	ldi	r30, 0x56	; 86
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	84 e8       	ldi	r24, 0x84	; 132
    12e8:	80 83       	st	Z, r24

	// Wait for TWINT flag set in TWCR Register (data is sent successfully)
	while (BIT_IS_CLEAR(TWCR, TWINT));
    12ea:	e6 e5       	ldi	r30, 0x56	; 86
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	88 23       	and	r24, r24
    12f2:	dc f7       	brge	.-10     	; 0x12ea <TWI_writeByte+0x1c>
}
    12f4:	0f 90       	pop	r0
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	08 95       	ret

000012fc <TWI_readByteWithACK>:

uint8_t TWI_readByteWithACK(void)
{
    12fc:	df 93       	push	r29
    12fe:	cf 93       	push	r28
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
	// Clear the TWINT flag before reading the data and enable ACK
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1304:	e6 e5       	ldi	r30, 0x56	; 86
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	84 ec       	ldi	r24, 0xC4	; 196
    130a:	80 83       	st	Z, r24

	// Wait for TWINT flag set in TWCR Register (data received successfully)
	while (BIT_IS_CLEAR(TWCR, TWINT));
    130c:	e6 e5       	ldi	r30, 0x56	; 86
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	88 23       	and	r24, r24
    1314:	dc f7       	brge	.-10     	; 0x130c <TWI_readByteWithACK+0x10>

	// Read Data
	return TWDR;
    1316:	e3 e2       	ldi	r30, 0x23	; 35
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
}
    131c:	cf 91       	pop	r28
    131e:	df 91       	pop	r29
    1320:	08 95       	ret

00001322 <TWI_readByteWithNACK>:

uint8_t TWI_readByteWithNACK(void)
{
    1322:	df 93       	push	r29
    1324:	cf 93       	push	r28
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
	// Clear the TWINT flag before reading the data
	TWCR = (1 << TWINT) | (1 << TWEN);
    132a:	e6 e5       	ldi	r30, 0x56	; 86
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	84 e8       	ldi	r24, 0x84	; 132
    1330:	80 83       	st	Z, r24

	// Wait for TWINT flag set in TWCR Register (data received successfully)
	while (BIT_IS_CLEAR(TWCR, TWINT));
    1332:	e6 e5       	ldi	r30, 0x56	; 86
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	88 23       	and	r24, r24
    133a:	dc f7       	brge	.-10     	; 0x1332 <TWI_readByteWithNACK+0x10>

	// Read Data
	return TWDR;
    133c:	e3 e2       	ldi	r30, 0x23	; 35
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
}
    1342:	cf 91       	pop	r28
    1344:	df 91       	pop	r29
    1346:	08 95       	ret

00001348 <TWI_getStatus>:

uint8_t TWI_getStatus(void)
{
    1348:	df 93       	push	r29
    134a:	cf 93       	push	r28
    134c:	0f 92       	push	r0
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
	uint8_t status;

	// Masking to eliminate first 3 bits and get the last 5 bits (status bits)
	status = TWSR & 0xF8;
    1352:	e1 e2       	ldi	r30, 0x21	; 33
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	88 7f       	andi	r24, 0xF8	; 248
    135a:	89 83       	std	Y+1, r24	; 0x01
	return status;
    135c:	89 81       	ldd	r24, Y+1	; 0x01
}
    135e:	0f 90       	pop	r0
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	08 95       	ret

00001366 <GPIO_setupPinDirection>:
 * Description	: GPIO Driver
 ************************************************************************************/
#include "gpio.h"

void GPIO_setupPinDirection(GPIO_PORT_ID port_id, GPIO_PIN_ID pin_id, GPIO_PinDirection direction)
{
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
    136e:	27 97       	sbiw	r28, 0x07	; 7
    1370:	0f b6       	in	r0, 0x3f	; 63
    1372:	f8 94       	cli
    1374:	de bf       	out	0x3e, r29	; 62
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	cd bf       	out	0x3d, r28	; 61
    137a:	89 83       	std	Y+1, r24	; 0x01
    137c:	6a 83       	std	Y+2, r22	; 0x02
    137e:	4b 83       	std	Y+3, r20	; 0x03
	if((NUM_OF_PORTS <= port_id) && (NUM_OF_PINS_PER_PORT <= pin_id))
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	84 30       	cpi	r24, 0x04	; 4
    1384:	20 f0       	brcs	.+8      	; 0x138e <GPIO_setupPinDirection+0x28>
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	88 30       	cpi	r24, 0x08	; 8
    138a:	08 f0       	brcs	.+2      	; 0x138e <GPIO_setupPinDirection+0x28>
    138c:	ea c0       	rjmp	.+468    	; 0x1562 <GPIO_setupPinDirection+0x1fc>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		if(PIN_OUTPUT == direction)
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	81 30       	cpi	r24, 0x01	; 1
    1392:	09 f0       	breq	.+2      	; 0x1396 <GPIO_setupPinDirection+0x30>
    1394:	6f c0       	rjmp	.+222    	; 0x1474 <GPIO_setupPinDirection+0x10e>
		{
			switch(port_id)
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	3f 83       	std	Y+7, r19	; 0x07
    139e:	2e 83       	std	Y+6, r18	; 0x06
    13a0:	8e 81       	ldd	r24, Y+6	; 0x06
    13a2:	9f 81       	ldd	r25, Y+7	; 0x07
    13a4:	81 30       	cpi	r24, 0x01	; 1
    13a6:	91 05       	cpc	r25, r1
    13a8:	49 f1       	breq	.+82     	; 0x13fc <GPIO_setupPinDirection+0x96>
    13aa:	2e 81       	ldd	r18, Y+6	; 0x06
    13ac:	3f 81       	ldd	r19, Y+7	; 0x07
    13ae:	22 30       	cpi	r18, 0x02	; 2
    13b0:	31 05       	cpc	r19, r1
    13b2:	2c f4       	brge	.+10     	; 0x13be <GPIO_setupPinDirection+0x58>
    13b4:	8e 81       	ldd	r24, Y+6	; 0x06
    13b6:	9f 81       	ldd	r25, Y+7	; 0x07
    13b8:	00 97       	sbiw	r24, 0x00	; 0
    13ba:	61 f0       	breq	.+24     	; 0x13d4 <GPIO_setupPinDirection+0x6e>
    13bc:	d2 c0       	rjmp	.+420    	; 0x1562 <GPIO_setupPinDirection+0x1fc>
    13be:	2e 81       	ldd	r18, Y+6	; 0x06
    13c0:	3f 81       	ldd	r19, Y+7	; 0x07
    13c2:	22 30       	cpi	r18, 0x02	; 2
    13c4:	31 05       	cpc	r19, r1
    13c6:	71 f1       	breq	.+92     	; 0x1424 <GPIO_setupPinDirection+0xbe>
    13c8:	8e 81       	ldd	r24, Y+6	; 0x06
    13ca:	9f 81       	ldd	r25, Y+7	; 0x07
    13cc:	83 30       	cpi	r24, 0x03	; 3
    13ce:	91 05       	cpc	r25, r1
    13d0:	e9 f1       	breq	.+122    	; 0x144c <GPIO_setupPinDirection+0xe6>
    13d2:	c7 c0       	rjmp	.+398    	; 0x1562 <GPIO_setupPinDirection+0x1fc>
			{
			case PORTA_ID:
				SET_BIT(DDRA_REG, pin_id);
    13d4:	aa e3       	ldi	r26, 0x3A	; 58
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	ea e3       	ldi	r30, 0x3A	; 58
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	48 2f       	mov	r20, r24
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	28 2f       	mov	r18, r24
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	02 2e       	mov	r0, r18
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <GPIO_setupPinDirection+0x8c>
    13ee:	88 0f       	add	r24, r24
    13f0:	99 1f       	adc	r25, r25
    13f2:	0a 94       	dec	r0
    13f4:	e2 f7       	brpl	.-8      	; 0x13ee <GPIO_setupPinDirection+0x88>
    13f6:	84 2b       	or	r24, r20
    13f8:	8c 93       	st	X, r24
    13fa:	b3 c0       	rjmp	.+358    	; 0x1562 <GPIO_setupPinDirection+0x1fc>
				break;
			case PORTB_ID:
				SET_BIT(DDRB_REG, pin_id);
    13fc:	a7 e3       	ldi	r26, 0x37	; 55
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	e7 e3       	ldi	r30, 0x37	; 55
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	48 2f       	mov	r20, r24
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	02 2e       	mov	r0, r18
    1414:	02 c0       	rjmp	.+4      	; 0x141a <GPIO_setupPinDirection+0xb4>
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	0a 94       	dec	r0
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <GPIO_setupPinDirection+0xb0>
    141e:	84 2b       	or	r24, r20
    1420:	8c 93       	st	X, r24
    1422:	9f c0       	rjmp	.+318    	; 0x1562 <GPIO_setupPinDirection+0x1fc>
				break;
			case PORTC_ID:
				SET_BIT(DDRC_REG, pin_id);
    1424:	a4 e3       	ldi	r26, 0x34	; 52
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	e4 e3       	ldi	r30, 0x34	; 52
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	48 2f       	mov	r20, r24
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	02 2e       	mov	r0, r18
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <GPIO_setupPinDirection+0xdc>
    143e:	88 0f       	add	r24, r24
    1440:	99 1f       	adc	r25, r25
    1442:	0a 94       	dec	r0
    1444:	e2 f7       	brpl	.-8      	; 0x143e <GPIO_setupPinDirection+0xd8>
    1446:	84 2b       	or	r24, r20
    1448:	8c 93       	st	X, r24
    144a:	8b c0       	rjmp	.+278    	; 0x1562 <GPIO_setupPinDirection+0x1fc>
				break;
			case PORTD_ID:
				SET_BIT(DDRD_REG, pin_id);
    144c:	a1 e3       	ldi	r26, 0x31	; 49
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	e1 e3       	ldi	r30, 0x31	; 49
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	48 2f       	mov	r20, r24
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	28 2f       	mov	r18, r24
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	02 2e       	mov	r0, r18
    1464:	02 c0       	rjmp	.+4      	; 0x146a <GPIO_setupPinDirection+0x104>
    1466:	88 0f       	add	r24, r24
    1468:	99 1f       	adc	r25, r25
    146a:	0a 94       	dec	r0
    146c:	e2 f7       	brpl	.-8      	; 0x1466 <GPIO_setupPinDirection+0x100>
    146e:	84 2b       	or	r24, r20
    1470:	8c 93       	st	X, r24
    1472:	77 c0       	rjmp	.+238    	; 0x1562 <GPIO_setupPinDirection+0x1fc>
				break;
			}
		}
		else if(PIN_INPUT == direction)
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	88 23       	and	r24, r24
    1478:	09 f0       	breq	.+2      	; 0x147c <GPIO_setupPinDirection+0x116>
    147a:	73 c0       	rjmp	.+230    	; 0x1562 <GPIO_setupPinDirection+0x1fc>
		{
			switch(port_id)
    147c:	89 81       	ldd	r24, Y+1	; 0x01
    147e:	28 2f       	mov	r18, r24
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	3d 83       	std	Y+5, r19	; 0x05
    1484:	2c 83       	std	Y+4, r18	; 0x04
    1486:	8c 81       	ldd	r24, Y+4	; 0x04
    1488:	9d 81       	ldd	r25, Y+5	; 0x05
    148a:	81 30       	cpi	r24, 0x01	; 1
    148c:	91 05       	cpc	r25, r1
    148e:	59 f1       	breq	.+86     	; 0x14e6 <GPIO_setupPinDirection+0x180>
    1490:	2c 81       	ldd	r18, Y+4	; 0x04
    1492:	3d 81       	ldd	r19, Y+5	; 0x05
    1494:	22 30       	cpi	r18, 0x02	; 2
    1496:	31 05       	cpc	r19, r1
    1498:	2c f4       	brge	.+10     	; 0x14a4 <GPIO_setupPinDirection+0x13e>
    149a:	8c 81       	ldd	r24, Y+4	; 0x04
    149c:	9d 81       	ldd	r25, Y+5	; 0x05
    149e:	00 97       	sbiw	r24, 0x00	; 0
    14a0:	69 f0       	breq	.+26     	; 0x14bc <GPIO_setupPinDirection+0x156>
    14a2:	5f c0       	rjmp	.+190    	; 0x1562 <GPIO_setupPinDirection+0x1fc>
    14a4:	2c 81       	ldd	r18, Y+4	; 0x04
    14a6:	3d 81       	ldd	r19, Y+5	; 0x05
    14a8:	22 30       	cpi	r18, 0x02	; 2
    14aa:	31 05       	cpc	r19, r1
    14ac:	89 f1       	breq	.+98     	; 0x1510 <GPIO_setupPinDirection+0x1aa>
    14ae:	8c 81       	ldd	r24, Y+4	; 0x04
    14b0:	9d 81       	ldd	r25, Y+5	; 0x05
    14b2:	83 30       	cpi	r24, 0x03	; 3
    14b4:	91 05       	cpc	r25, r1
    14b6:	09 f4       	brne	.+2      	; 0x14ba <GPIO_setupPinDirection+0x154>
    14b8:	40 c0       	rjmp	.+128    	; 0x153a <GPIO_setupPinDirection+0x1d4>
    14ba:	53 c0       	rjmp	.+166    	; 0x1562 <GPIO_setupPinDirection+0x1fc>
			{
			case PORTA_ID:
				CLEAR_BIT(DDRA_REG, pin_id);
    14bc:	aa e3       	ldi	r26, 0x3A	; 58
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	ea e3       	ldi	r30, 0x3A	; 58
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	48 2f       	mov	r20, r24
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	02 2e       	mov	r0, r18
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <GPIO_setupPinDirection+0x174>
    14d6:	88 0f       	add	r24, r24
    14d8:	99 1f       	adc	r25, r25
    14da:	0a 94       	dec	r0
    14dc:	e2 f7       	brpl	.-8      	; 0x14d6 <GPIO_setupPinDirection+0x170>
    14de:	80 95       	com	r24
    14e0:	84 23       	and	r24, r20
    14e2:	8c 93       	st	X, r24
    14e4:	3e c0       	rjmp	.+124    	; 0x1562 <GPIO_setupPinDirection+0x1fc>
				break;
			case PORTB_ID:
				CLEAR_BIT(DDRB_REG, pin_id);
    14e6:	a7 e3       	ldi	r26, 0x37	; 55
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e7 e3       	ldi	r30, 0x37	; 55
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	48 2f       	mov	r20, r24
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	28 2f       	mov	r18, r24
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	02 2e       	mov	r0, r18
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <GPIO_setupPinDirection+0x19e>
    1500:	88 0f       	add	r24, r24
    1502:	99 1f       	adc	r25, r25
    1504:	0a 94       	dec	r0
    1506:	e2 f7       	brpl	.-8      	; 0x1500 <GPIO_setupPinDirection+0x19a>
    1508:	80 95       	com	r24
    150a:	84 23       	and	r24, r20
    150c:	8c 93       	st	X, r24
    150e:	29 c0       	rjmp	.+82     	; 0x1562 <GPIO_setupPinDirection+0x1fc>
				break;
			case PORTC_ID:
				CLEAR_BIT(DDRC_REG, pin_id);
    1510:	a4 e3       	ldi	r26, 0x34	; 52
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	e4 e3       	ldi	r30, 0x34	; 52
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	48 2f       	mov	r20, r24
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	02 2e       	mov	r0, r18
    1528:	02 c0       	rjmp	.+4      	; 0x152e <GPIO_setupPinDirection+0x1c8>
    152a:	88 0f       	add	r24, r24
    152c:	99 1f       	adc	r25, r25
    152e:	0a 94       	dec	r0
    1530:	e2 f7       	brpl	.-8      	; 0x152a <GPIO_setupPinDirection+0x1c4>
    1532:	80 95       	com	r24
    1534:	84 23       	and	r24, r20
    1536:	8c 93       	st	X, r24
    1538:	14 c0       	rjmp	.+40     	; 0x1562 <GPIO_setupPinDirection+0x1fc>
				break;
			case PORTD_ID:
				CLEAR_BIT(DDRD_REG, pin_id);
    153a:	a1 e3       	ldi	r26, 0x31	; 49
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	e1 e3       	ldi	r30, 0x31	; 49
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	48 2f       	mov	r20, r24
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	28 2f       	mov	r18, r24
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	02 2e       	mov	r0, r18
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <GPIO_setupPinDirection+0x1f2>
    1554:	88 0f       	add	r24, r24
    1556:	99 1f       	adc	r25, r25
    1558:	0a 94       	dec	r0
    155a:	e2 f7       	brpl	.-8      	; 0x1554 <GPIO_setupPinDirection+0x1ee>
    155c:	80 95       	com	r24
    155e:	84 23       	and	r24, r20
    1560:	8c 93       	st	X, r24
				break;
			}
		}

	}
}
    1562:	27 96       	adiw	r28, 0x07	; 7
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	f8 94       	cli
    1568:	de bf       	out	0x3e, r29	; 62
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	cd bf       	out	0x3d, r28	; 61
    156e:	cf 91       	pop	r28
    1570:	df 91       	pop	r29
    1572:	08 95       	ret

00001574 <GPIO_writePin>:

void GPIO_writePin(GPIO_PORT_ID port_id, GPIO_PIN_ID pin_id, STD_Value value)
{
    1574:	df 93       	push	r29
    1576:	cf 93       	push	r28
    1578:	cd b7       	in	r28, 0x3d	; 61
    157a:	de b7       	in	r29, 0x3e	; 62
    157c:	27 97       	sbiw	r28, 0x07	; 7
    157e:	0f b6       	in	r0, 0x3f	; 63
    1580:	f8 94       	cli
    1582:	de bf       	out	0x3e, r29	; 62
    1584:	0f be       	out	0x3f, r0	; 63
    1586:	cd bf       	out	0x3d, r28	; 61
    1588:	89 83       	std	Y+1, r24	; 0x01
    158a:	6a 83       	std	Y+2, r22	; 0x02
    158c:	4b 83       	std	Y+3, r20	; 0x03
	if((NUM_OF_PORTS <= port_id) && (NUM_OF_PINS_PER_PORT <= pin_id))
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	84 30       	cpi	r24, 0x04	; 4
    1592:	20 f0       	brcs	.+8      	; 0x159c <GPIO_writePin+0x28>
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	88 30       	cpi	r24, 0x08	; 8
    1598:	08 f0       	brcs	.+2      	; 0x159c <GPIO_writePin+0x28>
    159a:	ea c0       	rjmp	.+468    	; 0x1770 <GPIO_writePin+0x1fc>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		if(LOGIC_HIGH == value)
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	81 30       	cpi	r24, 0x01	; 1
    15a0:	09 f0       	breq	.+2      	; 0x15a4 <GPIO_writePin+0x30>
    15a2:	6f c0       	rjmp	.+222    	; 0x1682 <GPIO_writePin+0x10e>
		{
			switch(port_id)
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	3f 83       	std	Y+7, r19	; 0x07
    15ac:	2e 83       	std	Y+6, r18	; 0x06
    15ae:	8e 81       	ldd	r24, Y+6	; 0x06
    15b0:	9f 81       	ldd	r25, Y+7	; 0x07
    15b2:	81 30       	cpi	r24, 0x01	; 1
    15b4:	91 05       	cpc	r25, r1
    15b6:	49 f1       	breq	.+82     	; 0x160a <GPIO_writePin+0x96>
    15b8:	2e 81       	ldd	r18, Y+6	; 0x06
    15ba:	3f 81       	ldd	r19, Y+7	; 0x07
    15bc:	22 30       	cpi	r18, 0x02	; 2
    15be:	31 05       	cpc	r19, r1
    15c0:	2c f4       	brge	.+10     	; 0x15cc <GPIO_writePin+0x58>
    15c2:	8e 81       	ldd	r24, Y+6	; 0x06
    15c4:	9f 81       	ldd	r25, Y+7	; 0x07
    15c6:	00 97       	sbiw	r24, 0x00	; 0
    15c8:	61 f0       	breq	.+24     	; 0x15e2 <GPIO_writePin+0x6e>
    15ca:	d2 c0       	rjmp	.+420    	; 0x1770 <GPIO_writePin+0x1fc>
    15cc:	2e 81       	ldd	r18, Y+6	; 0x06
    15ce:	3f 81       	ldd	r19, Y+7	; 0x07
    15d0:	22 30       	cpi	r18, 0x02	; 2
    15d2:	31 05       	cpc	r19, r1
    15d4:	71 f1       	breq	.+92     	; 0x1632 <GPIO_writePin+0xbe>
    15d6:	8e 81       	ldd	r24, Y+6	; 0x06
    15d8:	9f 81       	ldd	r25, Y+7	; 0x07
    15da:	83 30       	cpi	r24, 0x03	; 3
    15dc:	91 05       	cpc	r25, r1
    15de:	e9 f1       	breq	.+122    	; 0x165a <GPIO_writePin+0xe6>
    15e0:	c7 c0       	rjmp	.+398    	; 0x1770 <GPIO_writePin+0x1fc>
			{
			case PORTA_ID:
				SET_BIT(PORTA_REG, pin_id);
    15e2:	ab e3       	ldi	r26, 0x3B	; 59
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	eb e3       	ldi	r30, 0x3B	; 59
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	48 2f       	mov	r20, r24
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	02 2e       	mov	r0, r18
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <GPIO_writePin+0x8c>
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	0a 94       	dec	r0
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <GPIO_writePin+0x88>
    1604:	84 2b       	or	r24, r20
    1606:	8c 93       	st	X, r24
    1608:	b3 c0       	rjmp	.+358    	; 0x1770 <GPIO_writePin+0x1fc>
				break;
			case PORTB_ID:
				SET_BIT(PORTB_REG, pin_id);
    160a:	a8 e3       	ldi	r26, 0x38	; 56
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	e8 e3       	ldi	r30, 0x38	; 56
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	48 2f       	mov	r20, r24
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	02 2e       	mov	r0, r18
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <GPIO_writePin+0xb4>
    1624:	88 0f       	add	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	0a 94       	dec	r0
    162a:	e2 f7       	brpl	.-8      	; 0x1624 <GPIO_writePin+0xb0>
    162c:	84 2b       	or	r24, r20
    162e:	8c 93       	st	X, r24
    1630:	9f c0       	rjmp	.+318    	; 0x1770 <GPIO_writePin+0x1fc>
				break;
			case PORTC_ID:
				SET_BIT(PORTC_REG, pin_id);
    1632:	a5 e3       	ldi	r26, 0x35	; 53
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	e5 e3       	ldi	r30, 0x35	; 53
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	48 2f       	mov	r20, r24
    163e:	8a 81       	ldd	r24, Y+2	; 0x02
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	02 2e       	mov	r0, r18
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <GPIO_writePin+0xdc>
    164c:	88 0f       	add	r24, r24
    164e:	99 1f       	adc	r25, r25
    1650:	0a 94       	dec	r0
    1652:	e2 f7       	brpl	.-8      	; 0x164c <GPIO_writePin+0xd8>
    1654:	84 2b       	or	r24, r20
    1656:	8c 93       	st	X, r24
    1658:	8b c0       	rjmp	.+278    	; 0x1770 <GPIO_writePin+0x1fc>
				break;
			case PORTD_ID:
				SET_BIT(PORTD_REG, pin_id);
    165a:	a2 e3       	ldi	r26, 0x32	; 50
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	e2 e3       	ldi	r30, 0x32	; 50
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	48 2f       	mov	r20, r24
    1666:	8a 81       	ldd	r24, Y+2	; 0x02
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	02 2e       	mov	r0, r18
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <GPIO_writePin+0x104>
    1674:	88 0f       	add	r24, r24
    1676:	99 1f       	adc	r25, r25
    1678:	0a 94       	dec	r0
    167a:	e2 f7       	brpl	.-8      	; 0x1674 <GPIO_writePin+0x100>
    167c:	84 2b       	or	r24, r20
    167e:	8c 93       	st	X, r24
    1680:	77 c0       	rjmp	.+238    	; 0x1770 <GPIO_writePin+0x1fc>
				break;
			}
		}
		else if(LOGIC_LOW == value)
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	88 23       	and	r24, r24
    1686:	09 f0       	breq	.+2      	; 0x168a <GPIO_writePin+0x116>
    1688:	73 c0       	rjmp	.+230    	; 0x1770 <GPIO_writePin+0x1fc>
		{
			switch(port_id)
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	28 2f       	mov	r18, r24
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	3d 83       	std	Y+5, r19	; 0x05
    1692:	2c 83       	std	Y+4, r18	; 0x04
    1694:	8c 81       	ldd	r24, Y+4	; 0x04
    1696:	9d 81       	ldd	r25, Y+5	; 0x05
    1698:	81 30       	cpi	r24, 0x01	; 1
    169a:	91 05       	cpc	r25, r1
    169c:	59 f1       	breq	.+86     	; 0x16f4 <GPIO_writePin+0x180>
    169e:	2c 81       	ldd	r18, Y+4	; 0x04
    16a0:	3d 81       	ldd	r19, Y+5	; 0x05
    16a2:	22 30       	cpi	r18, 0x02	; 2
    16a4:	31 05       	cpc	r19, r1
    16a6:	2c f4       	brge	.+10     	; 0x16b2 <GPIO_writePin+0x13e>
    16a8:	8c 81       	ldd	r24, Y+4	; 0x04
    16aa:	9d 81       	ldd	r25, Y+5	; 0x05
    16ac:	00 97       	sbiw	r24, 0x00	; 0
    16ae:	69 f0       	breq	.+26     	; 0x16ca <GPIO_writePin+0x156>
    16b0:	5f c0       	rjmp	.+190    	; 0x1770 <GPIO_writePin+0x1fc>
    16b2:	2c 81       	ldd	r18, Y+4	; 0x04
    16b4:	3d 81       	ldd	r19, Y+5	; 0x05
    16b6:	22 30       	cpi	r18, 0x02	; 2
    16b8:	31 05       	cpc	r19, r1
    16ba:	89 f1       	breq	.+98     	; 0x171e <GPIO_writePin+0x1aa>
    16bc:	8c 81       	ldd	r24, Y+4	; 0x04
    16be:	9d 81       	ldd	r25, Y+5	; 0x05
    16c0:	83 30       	cpi	r24, 0x03	; 3
    16c2:	91 05       	cpc	r25, r1
    16c4:	09 f4       	brne	.+2      	; 0x16c8 <GPIO_writePin+0x154>
    16c6:	40 c0       	rjmp	.+128    	; 0x1748 <GPIO_writePin+0x1d4>
    16c8:	53 c0       	rjmp	.+166    	; 0x1770 <GPIO_writePin+0x1fc>
			{
			case PORTA_ID:
				CLEAR_BIT(PORTA_REG, pin_id);
    16ca:	ab e3       	ldi	r26, 0x3B	; 59
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	eb e3       	ldi	r30, 0x3B	; 59
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	48 2f       	mov	r20, r24
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	28 2f       	mov	r18, r24
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	02 2e       	mov	r0, r18
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <GPIO_writePin+0x174>
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	0a 94       	dec	r0
    16ea:	e2 f7       	brpl	.-8      	; 0x16e4 <GPIO_writePin+0x170>
    16ec:	80 95       	com	r24
    16ee:	84 23       	and	r24, r20
    16f0:	8c 93       	st	X, r24
    16f2:	3e c0       	rjmp	.+124    	; 0x1770 <GPIO_writePin+0x1fc>
				break;
			case PORTB_ID:
				CLEAR_BIT(PORTB_REG, pin_id);
    16f4:	a8 e3       	ldi	r26, 0x38	; 56
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	e8 e3       	ldi	r30, 0x38	; 56
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	48 2f       	mov	r20, r24
    1700:	8a 81       	ldd	r24, Y+2	; 0x02
    1702:	28 2f       	mov	r18, r24
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	02 2e       	mov	r0, r18
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <GPIO_writePin+0x19e>
    170e:	88 0f       	add	r24, r24
    1710:	99 1f       	adc	r25, r25
    1712:	0a 94       	dec	r0
    1714:	e2 f7       	brpl	.-8      	; 0x170e <GPIO_writePin+0x19a>
    1716:	80 95       	com	r24
    1718:	84 23       	and	r24, r20
    171a:	8c 93       	st	X, r24
    171c:	29 c0       	rjmp	.+82     	; 0x1770 <GPIO_writePin+0x1fc>
				break;
			case PORTC_ID:
				CLEAR_BIT(PORTC_REG, pin_id);
    171e:	a5 e3       	ldi	r26, 0x35	; 53
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e5 e3       	ldi	r30, 0x35	; 53
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	48 2f       	mov	r20, r24
    172a:	8a 81       	ldd	r24, Y+2	; 0x02
    172c:	28 2f       	mov	r18, r24
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	02 2e       	mov	r0, r18
    1736:	02 c0       	rjmp	.+4      	; 0x173c <GPIO_writePin+0x1c8>
    1738:	88 0f       	add	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	0a 94       	dec	r0
    173e:	e2 f7       	brpl	.-8      	; 0x1738 <GPIO_writePin+0x1c4>
    1740:	80 95       	com	r24
    1742:	84 23       	and	r24, r20
    1744:	8c 93       	st	X, r24
    1746:	14 c0       	rjmp	.+40     	; 0x1770 <GPIO_writePin+0x1fc>
				break;
			case PORTD_ID:
				CLEAR_BIT(PORTD_REG, pin_id);
    1748:	a2 e3       	ldi	r26, 0x32	; 50
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	e2 e3       	ldi	r30, 0x32	; 50
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	48 2f       	mov	r20, r24
    1754:	8a 81       	ldd	r24, Y+2	; 0x02
    1756:	28 2f       	mov	r18, r24
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	02 2e       	mov	r0, r18
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <GPIO_writePin+0x1f2>
    1762:	88 0f       	add	r24, r24
    1764:	99 1f       	adc	r25, r25
    1766:	0a 94       	dec	r0
    1768:	e2 f7       	brpl	.-8      	; 0x1762 <GPIO_writePin+0x1ee>
    176a:	80 95       	com	r24
    176c:	84 23       	and	r24, r20
    176e:	8c 93       	st	X, r24
				break;
			}
		}
	}
}
    1770:	27 96       	adiw	r28, 0x07	; 7
    1772:	0f b6       	in	r0, 0x3f	; 63
    1774:	f8 94       	cli
    1776:	de bf       	out	0x3e, r29	; 62
    1778:	0f be       	out	0x3f, r0	; 63
    177a:	cd bf       	out	0x3d, r28	; 61
    177c:	cf 91       	pop	r28
    177e:	df 91       	pop	r29
    1780:	08 95       	ret

00001782 <GPIO_readPin>:

STD_Value GPIO_readPin(GPIO_PORT_ID port_id, GPIO_PIN_ID pin_id)
{
    1782:	df 93       	push	r29
    1784:	cf 93       	push	r28
    1786:	00 d0       	rcall	.+0      	; 0x1788 <GPIO_readPin+0x6>
    1788:	00 d0       	rcall	.+0      	; 0x178a <GPIO_readPin+0x8>
    178a:	0f 92       	push	r0
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
    1790:	8a 83       	std	Y+2, r24	; 0x02
    1792:	6b 83       	std	Y+3, r22	; 0x03
	STD_Value pin_value = LOGIC_LOW;
    1794:	19 82       	std	Y+1, r1	; 0x01

	if((NUM_OF_PORTS <= port_id) && (NUM_OF_PINS_PER_PORT <= pin_id))
    1796:	8a 81       	ldd	r24, Y+2	; 0x02
    1798:	84 30       	cpi	r24, 0x04	; 4
    179a:	20 f0       	brcs	.+8      	; 0x17a4 <GPIO_readPin+0x22>
    179c:	8b 81       	ldd	r24, Y+3	; 0x03
    179e:	88 30       	cpi	r24, 0x08	; 8
    17a0:	08 f0       	brcs	.+2      	; 0x17a4 <GPIO_readPin+0x22>
    17a2:	67 c0       	rjmp	.+206    	; 0x1872 <GPIO_readPin+0xf0>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_id)
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	3d 83       	std	Y+5, r19	; 0x05
    17ac:	2c 83       	std	Y+4, r18	; 0x04
    17ae:	4c 81       	ldd	r20, Y+4	; 0x04
    17b0:	5d 81       	ldd	r21, Y+5	; 0x05
    17b2:	41 30       	cpi	r20, 0x01	; 1
    17b4:	51 05       	cpc	r21, r1
    17b6:	41 f1       	breq	.+80     	; 0x1808 <GPIO_readPin+0x86>
    17b8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ba:	9d 81       	ldd	r25, Y+5	; 0x05
    17bc:	82 30       	cpi	r24, 0x02	; 2
    17be:	91 05       	cpc	r25, r1
    17c0:	34 f4       	brge	.+12     	; 0x17ce <GPIO_readPin+0x4c>
    17c2:	2c 81       	ldd	r18, Y+4	; 0x04
    17c4:	3d 81       	ldd	r19, Y+5	; 0x05
    17c6:	21 15       	cp	r18, r1
    17c8:	31 05       	cpc	r19, r1
    17ca:	61 f0       	breq	.+24     	; 0x17e4 <GPIO_readPin+0x62>
    17cc:	52 c0       	rjmp	.+164    	; 0x1872 <GPIO_readPin+0xf0>
    17ce:	4c 81       	ldd	r20, Y+4	; 0x04
    17d0:	5d 81       	ldd	r21, Y+5	; 0x05
    17d2:	42 30       	cpi	r20, 0x02	; 2
    17d4:	51 05       	cpc	r21, r1
    17d6:	51 f1       	breq	.+84     	; 0x182c <GPIO_readPin+0xaa>
    17d8:	8c 81       	ldd	r24, Y+4	; 0x04
    17da:	9d 81       	ldd	r25, Y+5	; 0x05
    17dc:	83 30       	cpi	r24, 0x03	; 3
    17de:	91 05       	cpc	r25, r1
    17e0:	b9 f1       	breq	.+110    	; 0x1850 <GPIO_readPin+0xce>
    17e2:	47 c0       	rjmp	.+142    	; 0x1872 <GPIO_readPin+0xf0>
		{
		case PORTA_ID:
			pin_value = GET_BIT(PINA_REG, pin_id);
    17e4:	e9 e3       	ldi	r30, 0x39	; 57
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	28 2f       	mov	r18, r24
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	88 2f       	mov	r24, r24
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	a9 01       	movw	r20, r18
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <GPIO_readPin+0x7a>
    17f8:	55 95       	asr	r21
    17fa:	47 95       	ror	r20
    17fc:	8a 95       	dec	r24
    17fe:	e2 f7       	brpl	.-8      	; 0x17f8 <GPIO_readPin+0x76>
    1800:	ca 01       	movw	r24, r20
    1802:	81 70       	andi	r24, 0x01	; 1
    1804:	89 83       	std	Y+1, r24	; 0x01
    1806:	35 c0       	rjmp	.+106    	; 0x1872 <GPIO_readPin+0xf0>
			break;
		case PORTB_ID:
			pin_value = GET_BIT(PINB_REG, pin_id);
    1808:	e6 e3       	ldi	r30, 0x36	; 54
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	28 2f       	mov	r18, r24
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	88 2f       	mov	r24, r24
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	a9 01       	movw	r20, r18
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <GPIO_readPin+0x9e>
    181c:	55 95       	asr	r21
    181e:	47 95       	ror	r20
    1820:	8a 95       	dec	r24
    1822:	e2 f7       	brpl	.-8      	; 0x181c <GPIO_readPin+0x9a>
    1824:	ca 01       	movw	r24, r20
    1826:	81 70       	andi	r24, 0x01	; 1
    1828:	89 83       	std	Y+1, r24	; 0x01
    182a:	23 c0       	rjmp	.+70     	; 0x1872 <GPIO_readPin+0xf0>
			break;
		case PORTC_ID:
			pin_value = GET_BIT(PINC_REG, pin_id);
    182c:	e3 e3       	ldi	r30, 0x33	; 51
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	28 2f       	mov	r18, r24
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	8b 81       	ldd	r24, Y+3	; 0x03
    1838:	88 2f       	mov	r24, r24
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	a9 01       	movw	r20, r18
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <GPIO_readPin+0xc2>
    1840:	55 95       	asr	r21
    1842:	47 95       	ror	r20
    1844:	8a 95       	dec	r24
    1846:	e2 f7       	brpl	.-8      	; 0x1840 <GPIO_readPin+0xbe>
    1848:	ca 01       	movw	r24, r20
    184a:	81 70       	andi	r24, 0x01	; 1
    184c:	89 83       	std	Y+1, r24	; 0x01
    184e:	11 c0       	rjmp	.+34     	; 0x1872 <GPIO_readPin+0xf0>
			break;
		case PORTD_ID:
			pin_value = GET_BIT(PIND_REG, pin_id);
    1850:	e0 e3       	ldi	r30, 0x30	; 48
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	88 2f       	mov	r24, r24
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	a9 01       	movw	r20, r18
    1862:	02 c0       	rjmp	.+4      	; 0x1868 <GPIO_readPin+0xe6>
    1864:	55 95       	asr	r21
    1866:	47 95       	ror	r20
    1868:	8a 95       	dec	r24
    186a:	e2 f7       	brpl	.-8      	; 0x1864 <GPIO_readPin+0xe2>
    186c:	ca 01       	movw	r24, r20
    186e:	81 70       	andi	r24, 0x01	; 1
    1870:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return pin_value;
    1872:	89 81       	ldd	r24, Y+1	; 0x01
}
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	cf 91       	pop	r28
    1880:	df 91       	pop	r29
    1882:	08 95       	ret

00001884 <GPIO_setupPortDirection>:

void GPIO_setupPortDirection(GPIO_PORT_ID port_id, GPIO_PortDirection direction)
{
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	00 d0       	rcall	.+0      	; 0x188a <GPIO_setupPortDirection+0x6>
    188a:	00 d0       	rcall	.+0      	; 0x188c <GPIO_setupPortDirection+0x8>
    188c:	cd b7       	in	r28, 0x3d	; 61
    188e:	de b7       	in	r29, 0x3e	; 62
    1890:	89 83       	std	Y+1, r24	; 0x01
    1892:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(NUM_OF_PORTS <= port_id)
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	84 30       	cpi	r24, 0x04	; 4
    1898:	90 f5       	brcc	.+100    	; 0x18fe <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_id)
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	28 2f       	mov	r18, r24
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	3c 83       	std	Y+4, r19	; 0x04
    18a2:	2b 83       	std	Y+3, r18	; 0x03
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	9c 81       	ldd	r25, Y+4	; 0x04
    18a8:	81 30       	cpi	r24, 0x01	; 1
    18aa:	91 05       	cpc	r25, r1
    18ac:	d1 f0       	breq	.+52     	; 0x18e2 <GPIO_setupPortDirection+0x5e>
    18ae:	2b 81       	ldd	r18, Y+3	; 0x03
    18b0:	3c 81       	ldd	r19, Y+4	; 0x04
    18b2:	22 30       	cpi	r18, 0x02	; 2
    18b4:	31 05       	cpc	r19, r1
    18b6:	2c f4       	brge	.+10     	; 0x18c2 <GPIO_setupPortDirection+0x3e>
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	9c 81       	ldd	r25, Y+4	; 0x04
    18bc:	00 97       	sbiw	r24, 0x00	; 0
    18be:	61 f0       	breq	.+24     	; 0x18d8 <GPIO_setupPortDirection+0x54>
    18c0:	1e c0       	rjmp	.+60     	; 0x18fe <GPIO_setupPortDirection+0x7a>
    18c2:	2b 81       	ldd	r18, Y+3	; 0x03
    18c4:	3c 81       	ldd	r19, Y+4	; 0x04
    18c6:	22 30       	cpi	r18, 0x02	; 2
    18c8:	31 05       	cpc	r19, r1
    18ca:	81 f0       	breq	.+32     	; 0x18ec <GPIO_setupPortDirection+0x68>
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	9c 81       	ldd	r25, Y+4	; 0x04
    18d0:	83 30       	cpi	r24, 0x03	; 3
    18d2:	91 05       	cpc	r25, r1
    18d4:	81 f0       	breq	.+32     	; 0x18f6 <GPIO_setupPortDirection+0x72>
    18d6:	13 c0       	rjmp	.+38     	; 0x18fe <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA_REG = direction;
    18d8:	ea e3       	ldi	r30, 0x3A	; 58
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	80 83       	st	Z, r24
    18e0:	0e c0       	rjmp	.+28     	; 0x18fe <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB_REG = direction;
    18e2:	e7 e3       	ldi	r30, 0x37	; 55
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	8a 81       	ldd	r24, Y+2	; 0x02
    18e8:	80 83       	st	Z, r24
    18ea:	09 c0       	rjmp	.+18     	; 0x18fe <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC_REG = direction;
    18ec:	e4 e3       	ldi	r30, 0x34	; 52
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	8a 81       	ldd	r24, Y+2	; 0x02
    18f2:	80 83       	st	Z, r24
    18f4:	04 c0       	rjmp	.+8      	; 0x18fe <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD_REG = direction;
    18f6:	e1 e3       	ldi	r30, 0x31	; 49
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	8a 81       	ldd	r24, Y+2	; 0x02
    18fc:	80 83       	st	Z, r24
			break;
		}
	}
}
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	cf 91       	pop	r28
    1908:	df 91       	pop	r29
    190a:	08 95       	ret

0000190c <GPIO_writePort>:

void GPIO_writePort(GPIO_PORT_ID port_id, uint8 value)
{
    190c:	df 93       	push	r29
    190e:	cf 93       	push	r28
    1910:	00 d0       	rcall	.+0      	; 0x1912 <GPIO_writePort+0x6>
    1912:	00 d0       	rcall	.+0      	; 0x1914 <GPIO_writePort+0x8>
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
    1918:	89 83       	std	Y+1, r24	; 0x01
    191a:	6a 83       	std	Y+2, r22	; 0x02
	if(NUM_OF_PORTS <= port_id)
    191c:	89 81       	ldd	r24, Y+1	; 0x01
    191e:	84 30       	cpi	r24, 0x04	; 4
    1920:	90 f5       	brcc	.+100    	; 0x1986 <GPIO_writePort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_id)
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	28 2f       	mov	r18, r24
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	3c 83       	std	Y+4, r19	; 0x04
    192a:	2b 83       	std	Y+3, r18	; 0x03
    192c:	8b 81       	ldd	r24, Y+3	; 0x03
    192e:	9c 81       	ldd	r25, Y+4	; 0x04
    1930:	81 30       	cpi	r24, 0x01	; 1
    1932:	91 05       	cpc	r25, r1
    1934:	d1 f0       	breq	.+52     	; 0x196a <GPIO_writePort+0x5e>
    1936:	2b 81       	ldd	r18, Y+3	; 0x03
    1938:	3c 81       	ldd	r19, Y+4	; 0x04
    193a:	22 30       	cpi	r18, 0x02	; 2
    193c:	31 05       	cpc	r19, r1
    193e:	2c f4       	brge	.+10     	; 0x194a <GPIO_writePort+0x3e>
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	9c 81       	ldd	r25, Y+4	; 0x04
    1944:	00 97       	sbiw	r24, 0x00	; 0
    1946:	61 f0       	breq	.+24     	; 0x1960 <GPIO_writePort+0x54>
    1948:	1e c0       	rjmp	.+60     	; 0x1986 <GPIO_writePort+0x7a>
    194a:	2b 81       	ldd	r18, Y+3	; 0x03
    194c:	3c 81       	ldd	r19, Y+4	; 0x04
    194e:	22 30       	cpi	r18, 0x02	; 2
    1950:	31 05       	cpc	r19, r1
    1952:	81 f0       	breq	.+32     	; 0x1974 <GPIO_writePort+0x68>
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	9c 81       	ldd	r25, Y+4	; 0x04
    1958:	83 30       	cpi	r24, 0x03	; 3
    195a:	91 05       	cpc	r25, r1
    195c:	81 f0       	breq	.+32     	; 0x197e <GPIO_writePort+0x72>
    195e:	13 c0       	rjmp	.+38     	; 0x1986 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA_REG = value;
    1960:	eb e3       	ldi	r30, 0x3B	; 59
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	80 83       	st	Z, r24
    1968:	0e c0       	rjmp	.+28     	; 0x1986 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB_REG = value;
    196a:	e8 e3       	ldi	r30, 0x38	; 56
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	8a 81       	ldd	r24, Y+2	; 0x02
    1970:	80 83       	st	Z, r24
    1972:	09 c0       	rjmp	.+18     	; 0x1986 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC_REG = value;
    1974:	e5 e3       	ldi	r30, 0x35	; 53
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	8a 81       	ldd	r24, Y+2	; 0x02
    197a:	80 83       	st	Z, r24
    197c:	04 c0       	rjmp	.+8      	; 0x1986 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD_REG = value;
    197e:	e2 e3       	ldi	r30, 0x32	; 50
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	8a 81       	ldd	r24, Y+2	; 0x02
    1984:	80 83       	st	Z, r24
			break;
		}
	}
}
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	cf 91       	pop	r28
    1990:	df 91       	pop	r29
    1992:	08 95       	ret

00001994 <PIR_init>:
 * Description	: Source file for the PIR Sensor driver
 *******************************************************************************/
#include "pir.h"

void PIR_init(void)
{
    1994:	df 93       	push	r29
    1996:	cf 93       	push	r28
    1998:	cd b7       	in	r28, 0x3d	; 61
    199a:	de b7       	in	r29, 0x3e	; 62
    // Set the PIR_PIN as input
    DDRC &= ~(1 << PIR_PIN);  // Assuming the PIR is connected to PORTD
    199c:	a4 e3       	ldi	r26, 0x34	; 52
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	e4 e3       	ldi	r30, 0x34	; 52
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	8b 7f       	andi	r24, 0xFB	; 251
    19a8:	8c 93       	st	X, r24
}
    19aa:	cf 91       	pop	r28
    19ac:	df 91       	pop	r29
    19ae:	08 95       	ret

000019b0 <PIR_getState>:

uint8 PIR_getState(void)
{
    19b0:	df 93       	push	r29
    19b2:	cf 93       	push	r28
    19b4:	0f 92       	push	r0
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
    // Read the state of the PIR sensor
    return (PINC & (1 << PIR_PIN)) ? 1 : 0;  // Return 1 if motion is detected, otherwise return 0
    19ba:	e3 e3       	ldi	r30, 0x33	; 51
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	88 2f       	mov	r24, r24
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	84 70       	andi	r24, 0x04	; 4
    19c6:	90 70       	andi	r25, 0x00	; 0
    19c8:	19 82       	std	Y+1, r1	; 0x01
    19ca:	00 97       	sbiw	r24, 0x00	; 0
    19cc:	11 f0       	breq	.+4      	; 0x19d2 <PIR_getState+0x22>
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	89 83       	std	Y+1, r24	; 0x01
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    19d4:	0f 90       	pop	r0
    19d6:	cf 91       	pop	r28
    19d8:	df 91       	pop	r29
    19da:	08 95       	ret

000019dc <EEPROM_writeByte>:
 * Description: Source file for the External EEPROM Memory
 *******************************************************************************/
#include "external_eeprom.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 *u8data, uint8 lenght)
{
    19dc:	df 93       	push	r29
    19de:	cf 93       	push	r28
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
    19e4:	27 97       	sbiw	r28, 0x07	; 7
    19e6:	0f b6       	in	r0, 0x3f	; 63
    19e8:	f8 94       	cli
    19ea:	de bf       	out	0x3e, r29	; 62
    19ec:	0f be       	out	0x3f, r0	; 63
    19ee:	cd bf       	out	0x3d, r28	; 61
    19f0:	9b 83       	std	Y+3, r25	; 0x03
    19f2:	8a 83       	std	Y+2, r24	; 0x02
    19f4:	7d 83       	std	Y+5, r23	; 0x05
    19f6:	6c 83       	std	Y+4, r22	; 0x04
    19f8:	4e 83       	std	Y+6, r20	; 0x06
	/* Send the Start Bit */
    TWI_start();
    19fa:	0e 94 4c 09 	call	0x1298	; 0x1298 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    19fe:	0e 94 a4 09 	call	0x1348	; 0x1348 <TWI_getStatus>
    1a02:	88 30       	cpi	r24, 0x08	; 8
    1a04:	11 f0       	breq	.+4      	; 0x1a0a <EEPROM_writeByte+0x2e>
        return ERROR;
    1a06:	1f 82       	std	Y+7, r1	; 0x07
    1a08:	39 c0       	rjmp	.+114    	; 0x1a7c <EEPROM_writeByte+0xa0>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a0e:	80 70       	andi	r24, 0x00	; 0
    1a10:	97 70       	andi	r25, 0x07	; 7
    1a12:	88 0f       	add	r24, r24
    1a14:	89 2f       	mov	r24, r25
    1a16:	88 1f       	adc	r24, r24
    1a18:	99 0b       	sbc	r25, r25
    1a1a:	91 95       	neg	r25
    1a1c:	80 6a       	ori	r24, 0xA0	; 160
    1a1e:	0e 94 67 09 	call	0x12ce	; 0x12ce <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1a22:	0e 94 a4 09 	call	0x1348	; 0x1348 <TWI_getStatus>
    1a26:	88 31       	cpi	r24, 0x18	; 24
    1a28:	11 f0       	breq	.+4      	; 0x1a2e <EEPROM_writeByte+0x52>
        return ERROR; 
    1a2a:	1f 82       	std	Y+7, r1	; 0x07
    1a2c:	27 c0       	rjmp	.+78     	; 0x1a7c <EEPROM_writeByte+0xa0>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	0e 94 67 09 	call	0x12ce	; 0x12ce <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1a34:	0e 94 a4 09 	call	0x1348	; 0x1348 <TWI_getStatus>
    1a38:	88 32       	cpi	r24, 0x28	; 40
    1a3a:	11 f0       	breq	.+4      	; 0x1a40 <EEPROM_writeByte+0x64>
        return ERROR;
    1a3c:	1f 82       	std	Y+7, r1	; 0x07
    1a3e:	1e c0       	rjmp	.+60     	; 0x1a7c <EEPROM_writeByte+0xa0>
		
    /* write byte to eeprom */
    for (uint8 i =0; i < lenght;i++){
    1a40:	19 82       	std	Y+1, r1	; 0x01
    1a42:	0e c0       	rjmp	.+28     	; 0x1a60 <EEPROM_writeByte+0x84>
    	TWI_writeByte(u8data[i]);
    1a44:	89 81       	ldd	r24, Y+1	; 0x01
    1a46:	28 2f       	mov	r18, r24
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a4e:	fc 01       	movw	r30, r24
    1a50:	e2 0f       	add	r30, r18
    1a52:	f3 1f       	adc	r31, r19
    1a54:	80 81       	ld	r24, Z
    1a56:	0e 94 67 09 	call	0x12ce	; 0x12ce <TWI_writeByte>
    TWI_writeByte((uint8)(u16addr));
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
        return ERROR;
		
    /* write byte to eeprom */
    for (uint8 i =0; i < lenght;i++){
    1a5a:	89 81       	ldd	r24, Y+1	; 0x01
    1a5c:	8f 5f       	subi	r24, 0xFF	; 255
    1a5e:	89 83       	std	Y+1, r24	; 0x01
    1a60:	99 81       	ldd	r25, Y+1	; 0x01
    1a62:	8e 81       	ldd	r24, Y+6	; 0x06
    1a64:	98 17       	cp	r25, r24
    1a66:	70 f3       	brcs	.-36     	; 0x1a44 <EEPROM_writeByte+0x68>
    	TWI_writeByte(u8data[i]);
    }

    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1a68:	0e 94 a4 09 	call	0x1348	; 0x1348 <TWI_getStatus>
    1a6c:	88 32       	cpi	r24, 0x28	; 40
    1a6e:	11 f0       	breq	.+4      	; 0x1a74 <EEPROM_writeByte+0x98>
        return ERROR;
    1a70:	1f 82       	std	Y+7, r1	; 0x07
    1a72:	04 c0       	rjmp	.+8      	; 0x1a7c <EEPROM_writeByte+0xa0>

    /* Send the Stop Bit */
    TWI_stop();
    1a74:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <TWI_stop>
	
    return SUCCESS;
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	8f 83       	std	Y+7, r24	; 0x07
    1a7c:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1a7e:	27 96       	adiw	r28, 0x07	; 7
    1a80:	0f b6       	in	r0, 0x3f	; 63
    1a82:	f8 94       	cli
    1a84:	de bf       	out	0x3e, r29	; 62
    1a86:	0f be       	out	0x3f, r0	; 63
    1a88:	cd bf       	out	0x3d, r28	; 61
    1a8a:	cf 91       	pop	r28
    1a8c:	df 91       	pop	r29
    1a8e:	08 95       	ret

00001a90 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data, uint8 lenght)
{
    1a90:	0f 93       	push	r16
    1a92:	1f 93       	push	r17
    1a94:	df 93       	push	r29
    1a96:	cf 93       	push	r28
    1a98:	cd b7       	in	r28, 0x3d	; 61
    1a9a:	de b7       	in	r29, 0x3e	; 62
    1a9c:	27 97       	sbiw	r28, 0x07	; 7
    1a9e:	0f b6       	in	r0, 0x3f	; 63
    1aa0:	f8 94       	cli
    1aa2:	de bf       	out	0x3e, r29	; 62
    1aa4:	0f be       	out	0x3f, r0	; 63
    1aa6:	cd bf       	out	0x3d, r28	; 61
    1aa8:	9b 83       	std	Y+3, r25	; 0x03
    1aaa:	8a 83       	std	Y+2, r24	; 0x02
    1aac:	7d 83       	std	Y+5, r23	; 0x05
    1aae:	6c 83       	std	Y+4, r22	; 0x04
    1ab0:	4e 83       	std	Y+6, r20	; 0x06
	/* Send the Start Bit */
    TWI_start();
    1ab2:	0e 94 4c 09 	call	0x1298	; 0x1298 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1ab6:	0e 94 a4 09 	call	0x1348	; 0x1348 <TWI_getStatus>
    1aba:	88 30       	cpi	r24, 0x08	; 8
    1abc:	11 f0       	breq	.+4      	; 0x1ac2 <EEPROM_readByte+0x32>
        return ERROR;
    1abe:	1f 82       	std	Y+7, r1	; 0x07
    1ac0:	69 c0       	rjmp	.+210    	; 0x1b94 <EEPROM_readByte+0x104>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac6:	80 70       	andi	r24, 0x00	; 0
    1ac8:	97 70       	andi	r25, 0x07	; 7
    1aca:	88 0f       	add	r24, r24
    1acc:	89 2f       	mov	r24, r25
    1ace:	88 1f       	adc	r24, r24
    1ad0:	99 0b       	sbc	r25, r25
    1ad2:	91 95       	neg	r25
    1ad4:	80 6a       	ori	r24, 0xA0	; 160
    1ad6:	0e 94 67 09 	call	0x12ce	; 0x12ce <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1ada:	0e 94 a4 09 	call	0x1348	; 0x1348 <TWI_getStatus>
    1ade:	88 31       	cpi	r24, 0x18	; 24
    1ae0:	11 f0       	breq	.+4      	; 0x1ae6 <EEPROM_readByte+0x56>
        return ERROR;
    1ae2:	1f 82       	std	Y+7, r1	; 0x07
    1ae4:	57 c0       	rjmp	.+174    	; 0x1b94 <EEPROM_readByte+0x104>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae8:	0e 94 67 09 	call	0x12ce	; 0x12ce <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1aec:	0e 94 a4 09 	call	0x1348	; 0x1348 <TWI_getStatus>
    1af0:	88 32       	cpi	r24, 0x28	; 40
    1af2:	11 f0       	breq	.+4      	; 0x1af8 <EEPROM_readByte+0x68>
        return ERROR;
    1af4:	1f 82       	std	Y+7, r1	; 0x07
    1af6:	4e c0       	rjmp	.+156    	; 0x1b94 <EEPROM_readByte+0x104>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1af8:	0e 94 4c 09 	call	0x1298	; 0x1298 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1afc:	0e 94 a4 09 	call	0x1348	; 0x1348 <TWI_getStatus>
    1b00:	80 31       	cpi	r24, 0x10	; 16
    1b02:	11 f0       	breq	.+4      	; 0x1b08 <EEPROM_readByte+0x78>
        return ERROR;
    1b04:	1f 82       	std	Y+7, r1	; 0x07
    1b06:	46 c0       	rjmp	.+140    	; 0x1b94 <EEPROM_readByte+0x104>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1b08:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b0c:	80 70       	andi	r24, 0x00	; 0
    1b0e:	97 70       	andi	r25, 0x07	; 7
    1b10:	88 0f       	add	r24, r24
    1b12:	89 2f       	mov	r24, r25
    1b14:	88 1f       	adc	r24, r24
    1b16:	99 0b       	sbc	r25, r25
    1b18:	91 95       	neg	r25
    1b1a:	81 6a       	ori	r24, 0xA1	; 161
    1b1c:	0e 94 67 09 	call	0x12ce	; 0x12ce <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1b20:	0e 94 a4 09 	call	0x1348	; 0x1348 <TWI_getStatus>
    1b24:	80 34       	cpi	r24, 0x40	; 64
    1b26:	11 f0       	breq	.+4      	; 0x1b2c <EEPROM_readByte+0x9c>
        return ERROR;
    1b28:	1f 82       	std	Y+7, r1	; 0x07
    1b2a:	34 c0       	rjmp	.+104    	; 0x1b94 <EEPROM_readByte+0x104>

    /* Read Byte from Memory without send ACK */
    for (uint8_t i =0; i < lenght - 1 ;i++){
    1b2c:	19 82       	std	Y+1, r1	; 0x01
    1b2e:	0f c0       	rjmp	.+30     	; 0x1b4e <EEPROM_readByte+0xbe>
    	u8data[i] = TWI_readByteWithACK();
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	28 2f       	mov	r18, r24
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	8c 81       	ldd	r24, Y+4	; 0x04
    1b38:	9d 81       	ldd	r25, Y+5	; 0x05
    1b3a:	8c 01       	movw	r16, r24
    1b3c:	02 0f       	add	r16, r18
    1b3e:	13 1f       	adc	r17, r19
    1b40:	0e 94 7e 09 	call	0x12fc	; 0x12fc <TWI_readByteWithACK>
    1b44:	f8 01       	movw	r30, r16
    1b46:	80 83       	st	Z, r24
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
        return ERROR;

    /* Read Byte from Memory without send ACK */
    for (uint8_t i =0; i < lenght - 1 ;i++){
    1b48:	89 81       	ldd	r24, Y+1	; 0x01
    1b4a:	8f 5f       	subi	r24, 0xFF	; 255
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	28 2f       	mov	r18, r24
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	8e 81       	ldd	r24, Y+6	; 0x06
    1b56:	88 2f       	mov	r24, r24
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
    1b5c:	28 17       	cp	r18, r24
    1b5e:	39 07       	cpc	r19, r25
    1b60:	3c f3       	brlt	.-50     	; 0x1b30 <EEPROM_readByte+0xa0>
    	u8data[i] = TWI_readByteWithACK();
        }
    u8data[lenght -1 ] = TWI_readByteWithNACK();
    1b62:	8e 81       	ldd	r24, Y+6	; 0x06
    1b64:	88 2f       	mov	r24, r24
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	9c 01       	movw	r18, r24
    1b6a:	21 50       	subi	r18, 0x01	; 1
    1b6c:	30 40       	sbci	r19, 0x00	; 0
    1b6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b70:	9d 81       	ldd	r25, Y+5	; 0x05
    1b72:	8c 01       	movw	r16, r24
    1b74:	02 0f       	add	r16, r18
    1b76:	13 1f       	adc	r17, r19
    1b78:	0e 94 91 09 	call	0x1322	; 0x1322 <TWI_readByteWithNACK>
    1b7c:	f8 01       	movw	r30, r16
    1b7e:	80 83       	st	Z, r24

    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1b80:	0e 94 a4 09 	call	0x1348	; 0x1348 <TWI_getStatus>
    1b84:	88 35       	cpi	r24, 0x58	; 88
    1b86:	11 f0       	breq	.+4      	; 0x1b8c <EEPROM_readByte+0xfc>
        return ERROR;
    1b88:	1f 82       	std	Y+7, r1	; 0x07
    1b8a:	04 c0       	rjmp	.+8      	; 0x1b94 <EEPROM_readByte+0x104>

    /* Send the Stop Bit */
    TWI_stop();
    1b8c:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <TWI_stop>

    return SUCCESS;
    1b90:	f1 e0       	ldi	r31, 0x01	; 1
    1b92:	ff 83       	std	Y+7, r31	; 0x07
    1b94:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1b96:	27 96       	adiw	r28, 0x07	; 7
    1b98:	0f b6       	in	r0, 0x3f	; 63
    1b9a:	f8 94       	cli
    1b9c:	de bf       	out	0x3e, r29	; 62
    1b9e:	0f be       	out	0x3f, r0	; 63
    1ba0:	cd bf       	out	0x3d, r28	; 61
    1ba2:	cf 91       	pop	r28
    1ba4:	df 91       	pop	r29
    1ba6:	1f 91       	pop	r17
    1ba8:	0f 91       	pop	r16
    1baa:	08 95       	ret

00001bac <DC_Motor_Init>:
 * Description	: Source file for the DC Motor Driver
 ************************************************************************************/
#include "dc_motor.h"

void DC_Motor_Init(void)
{
    1bac:	df 93       	push	r29
    1bae:	cf 93       	push	r28
    1bb0:	cd b7       	in	r28, 0x3d	; 61
    1bb2:	de b7       	in	r29, 0x3e	; 62
	/* Set motor pins as output */
	GPIO_setupPinDirection(DC_MOTOR_INPUT_PORT_ID, DC_MOTOR_PIN1_ID, PIN_OUTPUT);
    1bb4:	83 e0       	ldi	r24, 0x03	; 3
    1bb6:	67 e0       	ldi	r22, 0x07	; 7
    1bb8:	41 e0       	ldi	r20, 0x01	; 1
    1bba:	0e 94 b3 09 	call	0x1366	; 0x1366 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_INPUT_PORT_ID, DC_MOTOR_PIN2_ID, PIN_OUTPUT);
    1bbe:	83 e0       	ldi	r24, 0x03	; 3
    1bc0:	66 e0       	ldi	r22, 0x06	; 6
    1bc2:	41 e0       	ldi	r20, 0x01	; 1
    1bc4:	0e 94 b3 09 	call	0x1366	; 0x1366 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_ENABLE_PORT_ID, DC_MOTOR_ENABLE_PIN_ID, PIN_OUTPUT);
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	63 e0       	ldi	r22, 0x03	; 3
    1bcc:	41 e0       	ldi	r20, 0x01	; 1
    1bce:	0e 94 b3 09 	call	0x1366	; 0x1366 <GPIO_setupPinDirection>

	/* Stop the motor initially */
	DC_Motor_Rotate(DC_MOTOR_STOP, 0);
    1bd2:	82 e0       	ldi	r24, 0x02	; 2
    1bd4:	60 e0       	ldi	r22, 0x00	; 0
    1bd6:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <DC_Motor_Rotate>
}
    1bda:	cf 91       	pop	r28
    1bdc:	df 91       	pop	r29
    1bde:	08 95       	ret

00001be0 <DC_Motor_Rotate>:

void DC_Motor_Rotate(DC_Motor_State state, uint8 speed)
{
    1be0:	df 93       	push	r29
    1be2:	cf 93       	push	r28
    1be4:	00 d0       	rcall	.+0      	; 0x1be6 <DC_Motor_Rotate+0x6>
    1be6:	00 d0       	rcall	.+0      	; 0x1be8 <DC_Motor_Rotate+0x8>
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
    1bec:	89 83       	std	Y+1, r24	; 0x01
    1bee:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_writePin(DC_MOTOR_ENABLE_PORT_ID, DC_MOTOR_ENABLE_PIN_ID, LOGIC_HIGH);
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	63 e0       	ldi	r22, 0x03	; 3
    1bf4:	41 e0       	ldi	r20, 0x01	; 1
    1bf6:	0e 94 ba 0a 	call	0x1574	; 0x1574 <GPIO_writePin>

	switch (state)
    1bfa:	89 81       	ldd	r24, Y+1	; 0x01
    1bfc:	28 2f       	mov	r18, r24
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	3c 83       	std	Y+4, r19	; 0x04
    1c02:	2b 83       	std	Y+3, r18	; 0x03
    1c04:	8b 81       	ldd	r24, Y+3	; 0x03
    1c06:	9c 81       	ldd	r25, Y+4	; 0x04
    1c08:	81 30       	cpi	r24, 0x01	; 1
    1c0a:	91 05       	cpc	r25, r1
    1c0c:	b9 f0       	breq	.+46     	; 0x1c3c <DC_Motor_Rotate+0x5c>
    1c0e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c10:	3c 81       	ldd	r19, Y+4	; 0x04
    1c12:	22 30       	cpi	r18, 0x02	; 2
    1c14:	31 05       	cpc	r19, r1
    1c16:	01 f1       	breq	.+64     	; 0x1c58 <DC_Motor_Rotate+0x78>
    1c18:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1c:	00 97       	sbiw	r24, 0x00	; 0
    1c1e:	49 f5       	brne	.+82     	; 0x1c72 <DC_Motor_Rotate+0x92>
	{
	case DC_MOTOR_CW:
		/* Rotate clockwise */
		GPIO_writePin(DC_MOTOR_INPUT_PORT_ID, DC_MOTOR_PIN1_ID, LOGIC_HIGH);
    1c20:	83 e0       	ldi	r24, 0x03	; 3
    1c22:	67 e0       	ldi	r22, 0x07	; 7
    1c24:	41 e0       	ldi	r20, 0x01	; 1
    1c26:	0e 94 ba 0a 	call	0x1574	; 0x1574 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_INPUT_PORT_ID, DC_MOTOR_PIN2_ID, LOGIC_LOW);
    1c2a:	83 e0       	ldi	r24, 0x03	; 3
    1c2c:	66 e0       	ldi	r22, 0x06	; 6
    1c2e:	40 e0       	ldi	r20, 0x00	; 0
    1c30:	0e 94 ba 0a 	call	0x1574	; 0x1574 <GPIO_writePin>
		PWM_Timer0_Start(speed); /* Set speed using PWM */
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	0e 94 f5 08 	call	0x11ea	; 0x11ea <PWM_Timer0_Start>
    1c3a:	1b c0       	rjmp	.+54     	; 0x1c72 <DC_Motor_Rotate+0x92>
		break;

	case DC_MOTOR_ACW:
		/* Rotate anti-clockwise */
		GPIO_writePin(DC_MOTOR_INPUT_PORT_ID, DC_MOTOR_PIN1_ID, LOGIC_LOW);
    1c3c:	83 e0       	ldi	r24, 0x03	; 3
    1c3e:	67 e0       	ldi	r22, 0x07	; 7
    1c40:	40 e0       	ldi	r20, 0x00	; 0
    1c42:	0e 94 ba 0a 	call	0x1574	; 0x1574 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_INPUT_PORT_ID, DC_MOTOR_PIN2_ID, LOGIC_HIGH);
    1c46:	83 e0       	ldi	r24, 0x03	; 3
    1c48:	66 e0       	ldi	r22, 0x06	; 6
    1c4a:	41 e0       	ldi	r20, 0x01	; 1
    1c4c:	0e 94 ba 0a 	call	0x1574	; 0x1574 <GPIO_writePin>
		PWM_Timer0_Start(speed); /* Set speed using PWM */
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	0e 94 f5 08 	call	0x11ea	; 0x11ea <PWM_Timer0_Start>
    1c56:	0d c0       	rjmp	.+26     	; 0x1c72 <DC_Motor_Rotate+0x92>
		break;

	case DC_MOTOR_STOP:
		/* Stop the motor */
		GPIO_writePin(DC_MOTOR_INPUT_PORT_ID, DC_MOTOR_PIN1_ID, LOGIC_LOW);
    1c58:	83 e0       	ldi	r24, 0x03	; 3
    1c5a:	67 e0       	ldi	r22, 0x07	; 7
    1c5c:	40 e0       	ldi	r20, 0x00	; 0
    1c5e:	0e 94 ba 0a 	call	0x1574	; 0x1574 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_INPUT_PORT_ID, DC_MOTOR_PIN2_ID, LOGIC_LOW);
    1c62:	83 e0       	ldi	r24, 0x03	; 3
    1c64:	66 e0       	ldi	r22, 0x06	; 6
    1c66:	40 e0       	ldi	r20, 0x00	; 0
    1c68:	0e 94 ba 0a 	call	0x1574	; 0x1574 <GPIO_writePin>
		PWM_Timer0_Start(0); /* Set speed to 0 */
    1c6c:	80 e0       	ldi	r24, 0x00	; 0
    1c6e:	0e 94 f5 08 	call	0x11ea	; 0x11ea <PWM_Timer0_Start>
		break;
	}
}
    1c72:	0f 90       	pop	r0
    1c74:	0f 90       	pop	r0
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
    1c7a:	cf 91       	pop	r28
    1c7c:	df 91       	pop	r29
    1c7e:	08 95       	ret

00001c80 <Buzzer_init>:
 * Description	: source file for the Buzzer driver
 ************************************************************************************/
#include "buzzer.h"

void Buzzer_init(void)
{
    1c80:	df 93       	push	r29
    1c82:	cf 93       	push	r28
    1c84:	cd b7       	in	r28, 0x3d	; 61
    1c86:	de b7       	in	r29, 0x3e	; 62
    /* Set the buzzer pin as output */
    GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    1c88:	82 e0       	ldi	r24, 0x02	; 2
    1c8a:	67 e0       	ldi	r22, 0x07	; 7
    1c8c:	41 e0       	ldi	r20, 0x01	; 1
    1c8e:	0e 94 b3 09 	call	0x1366	; 0x1366 <GPIO_setupPinDirection>

    /* Turn off the buzzer initially */
    Buzzer_off();
    1c92:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <Buzzer_off>
}
    1c96:	cf 91       	pop	r28
    1c98:	df 91       	pop	r29
    1c9a:	08 95       	ret

00001c9c <Buzzer_on>:

void Buzzer_on(void)
{
    1c9c:	df 93       	push	r29
    1c9e:	cf 93       	push	r28
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
    /* Activate the buzzer */
    GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
    1ca4:	82 e0       	ldi	r24, 0x02	; 2
    1ca6:	67 e0       	ldi	r22, 0x07	; 7
    1ca8:	41 e0       	ldi	r20, 0x01	; 1
    1caa:	0e 94 ba 0a 	call	0x1574	; 0x1574 <GPIO_writePin>
}
    1cae:	cf 91       	pop	r28
    1cb0:	df 91       	pop	r29
    1cb2:	08 95       	ret

00001cb4 <Buzzer_off>:

void Buzzer_off(void)
{
    1cb4:	df 93       	push	r29
    1cb6:	cf 93       	push	r28
    1cb8:	cd b7       	in	r28, 0x3d	; 61
    1cba:	de b7       	in	r29, 0x3e	; 62
    /* Deactivate the buzzer */
    GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    1cbc:	82 e0       	ldi	r24, 0x02	; 2
    1cbe:	67 e0       	ldi	r22, 0x07	; 7
    1cc0:	40 e0       	ldi	r20, 0x00	; 0
    1cc2:	0e 94 ba 0a 	call	0x1574	; 0x1574 <GPIO_writePin>
}
    1cc6:	cf 91       	pop	r28
    1cc8:	df 91       	pop	r29
    1cca:	08 95       	ret

00001ccc <main>:
boolean g_status_flag = PASSWORD_UNMATCHED;
uint8 g_flag = 0;
uint8 g_tick = 0;		/* Timer tick counter */

int main(void)
{
    1ccc:	df 93       	push	r29
    1cce:	cf 93       	push	r28
    1cd0:	cd b7       	in	r28, 0x3d	; 61
    1cd2:	de b7       	in	r29, 0x3e	; 62
	/* Initialize peripherals */
	UART_init(BOUD_RATE);
    1cd4:	60 e8       	ldi	r22, 0x80	; 128
    1cd6:	75 e2       	ldi	r23, 0x25	; 37
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>
	PIR_init();
    1ce0:	0e 94 ca 0c 	call	0x1994	; 0x1994 <PIR_init>
	Buzzer_init();
    1ce4:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <Buzzer_init>
	DC_Motor_Init();
    1ce8:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DC_Motor_Init>

	SREG |= (1 << 7);	/* Enable global interrupts */
    1cec:	af e5       	ldi	r26, 0x5F	; 95
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	ef e5       	ldi	r30, 0x5F	; 95
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
    1cf6:	80 68       	ori	r24, 0x80	; 128
    1cf8:	8c 93       	st	X, r24

	while (1)
	{
		/* Check the current state flag to determine which step to execute */
		if (g_flag == 0)
    1cfa:	80 91 77 00 	lds	r24, 0x0077
    1cfe:	88 23       	and	r24, r24
    1d00:	19 f4       	brne	.+6      	; 0x1d08 <main+0x3c>
		{
			Step1_StorePassword();
    1d02:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <Step1_StorePassword>
    1d06:	f9 cf       	rjmp	.-14     	; 0x1cfa <main+0x2e>
		}
		else
		{
			Step2_MainOptions();
    1d08:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <Step2_MainOptions>
    1d0c:	f6 cf       	rjmp	.-20     	; 0x1cfa <main+0x2e>

00001d0e <Step1_StorePassword>:
		}
	}
}

void Step1_StorePassword(void)
{
    1d0e:	df 93       	push	r29
    1d10:	cf 93       	push	r28
    1d12:	cd b7       	in	r28, 0x3d	; 61
    1d14:	de b7       	in	r29, 0x3e	; 62
    1d16:	2e 97       	sbiw	r28, 0x0e	; 14
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	f8 94       	cli
    1d1c:	de bf       	out	0x3e, r29	; 62
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	cd bf       	out	0x3d, r28	; 61
	/* Wait for CONTROL_ECU to be ready */
	while (UART_recieveByte() != CONTROL_ECU_READY);
    1d22:	0e 94 06 06 	call	0xc0c	; 0xc0c <UART_recieveByte>
    1d26:	81 30       	cpi	r24, 0x01	; 1
    1d28:	e1 f7       	brne	.-8      	; 0x1d22 <Step1_StorePassword+0x14>
	receivePassword(password); /* Receive password from UART */
    1d2a:	8a e7       	ldi	r24, 0x7A	; 122
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	0e 94 c5 10 	call	0x218a	; 0x218a <receivePassword>
	while (UART_recieveByte() != CONTROL_ECU_READY);
    1d32:	0e 94 06 06 	call	0xc0c	; 0xc0c <UART_recieveByte>
    1d36:	81 30       	cpi	r24, 0x01	; 1
    1d38:	e1 f7       	brne	.-8      	; 0x1d32 <Step1_StorePassword+0x24>
	receivePassword(password_confirm); /* Confirm password from UART */
    1d3a:	8f e7       	ldi	r24, 0x7F	; 127
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	0e 94 c5 10 	call	0x218a	; 0x218a <receivePassword>

	/* Check if passwords match */
	g_status_flag = Step4_CheckPassword(password, password_confirm);
    1d42:	8a e7       	ldi	r24, 0x7A	; 122
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	2f e7       	ldi	r18, 0x7F	; 127
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	b9 01       	movw	r22, r18
    1d4c:	0e 94 74 10 	call	0x20e8	; 0x20e8 <Step4_CheckPassword>
    1d50:	80 93 76 00 	sts	0x0076, r24

	if (g_status_flag == PASSWORD_MATCHED)
    1d54:	80 91 76 00 	lds	r24, 0x0076
    1d58:	81 30       	cpi	r24, 0x01	; 1
    1d5a:	09 f0       	breq	.+2      	; 0x1d5e <Step1_StorePassword+0x50>
    1d5c:	86 c0       	rjmp	.+268    	; 0x1e6a <Step1_StorePassword+0x15c>
	{
		/* Send status to CONTROL_ECU */
		UART_sendByte(HMI_ECU_READY);
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	0e 94 ef 05 	call	0xbde	; 0xbde <UART_sendByte>
		UART_sendByte(PASSWORD_MATCHED);
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	0e 94 ef 05 	call	0xbde	; 0xbde <UART_sendByte>
		EEPROM_writeByte(EEPROM_ADDRESS, password, PASSWORD_LENGTH); /* Store password in EEPROM */
    1d6a:	2a e7       	ldi	r18, 0x7A	; 122
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	b9 01       	movw	r22, r18
    1d74:	45 e0       	ldi	r20, 0x05	; 5
    1d76:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <EEPROM_writeByte>
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	a0 e2       	ldi	r26, 0x20	; 32
    1d80:	b1 e4       	ldi	r27, 0x41	; 65
    1d82:	8b 87       	std	Y+11, r24	; 0x0b
    1d84:	9c 87       	std	Y+12, r25	; 0x0c
    1d86:	ad 87       	std	Y+13, r26	; 0x0d
    1d88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	4a ef       	ldi	r20, 0xFA	; 250
    1d98:	54 e4       	ldi	r21, 0x44	; 68
    1d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	8f 83       	std	Y+7, r24	; 0x07
    1da4:	98 87       	std	Y+8, r25	; 0x08
    1da6:	a9 87       	std	Y+9, r26	; 0x09
    1da8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1daa:	6f 81       	ldd	r22, Y+7	; 0x07
    1dac:	78 85       	ldd	r23, Y+8	; 0x08
    1dae:	89 85       	ldd	r24, Y+9	; 0x09
    1db0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	40 e8       	ldi	r20, 0x80	; 128
    1db8:	5f e3       	ldi	r21, 0x3F	; 63
    1dba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dbe:	88 23       	and	r24, r24
    1dc0:	2c f4       	brge	.+10     	; 0x1dcc <Step1_StorePassword+0xbe>
		__ticks = 1;
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	9e 83       	std	Y+6, r25	; 0x06
    1dc8:	8d 83       	std	Y+5, r24	; 0x05
    1dca:	3f c0       	rjmp	.+126    	; 0x1e4a <Step1_StorePassword+0x13c>
	else if (__tmp > 65535)
    1dcc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dce:	78 85       	ldd	r23, Y+8	; 0x08
    1dd0:	89 85       	ldd	r24, Y+9	; 0x09
    1dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	3f ef       	ldi	r19, 0xFF	; 255
    1dd8:	4f e7       	ldi	r20, 0x7F	; 127
    1dda:	57 e4       	ldi	r21, 0x47	; 71
    1ddc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1de0:	18 16       	cp	r1, r24
    1de2:	4c f5       	brge	.+82     	; 0x1e36 <Step1_StorePassword+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1de6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1de8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	40 e2       	ldi	r20, 0x20	; 32
    1df2:	51 e4       	ldi	r21, 0x41	; 65
    1df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	bc 01       	movw	r22, r24
    1dfe:	cd 01       	movw	r24, r26
    1e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	9e 83       	std	Y+6, r25	; 0x06
    1e0a:	8d 83       	std	Y+5, r24	; 0x05
    1e0c:	0f c0       	rjmp	.+30     	; 0x1e2c <Step1_StorePassword+0x11e>
    1e0e:	88 ec       	ldi	r24, 0xC8	; 200
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	9c 83       	std	Y+4, r25	; 0x04
    1e14:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e16:	8b 81       	ldd	r24, Y+3	; 0x03
    1e18:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	f1 f7       	brne	.-4      	; 0x1e1a <Step1_StorePassword+0x10c>
    1e1e:	9c 83       	std	Y+4, r25	; 0x04
    1e20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e22:	8d 81       	ldd	r24, Y+5	; 0x05
    1e24:	9e 81       	ldd	r25, Y+6	; 0x06
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	9e 83       	std	Y+6, r25	; 0x06
    1e2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e30:	00 97       	sbiw	r24, 0x00	; 0
    1e32:	69 f7       	brne	.-38     	; 0x1e0e <Step1_StorePassword+0x100>
    1e34:	14 c0       	rjmp	.+40     	; 0x1e5e <Step1_StorePassword+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e36:	6f 81       	ldd	r22, Y+7	; 0x07
    1e38:	78 85       	ldd	r23, Y+8	; 0x08
    1e3a:	89 85       	ldd	r24, Y+9	; 0x09
    1e3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	9e 83       	std	Y+6, r25	; 0x06
    1e48:	8d 83       	std	Y+5, r24	; 0x05
    1e4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e4e:	9a 83       	std	Y+2, r25	; 0x02
    1e50:	89 83       	std	Y+1, r24	; 0x01
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	9a 81       	ldd	r25, Y+2	; 0x02
    1e56:	01 97       	sbiw	r24, 0x01	; 1
    1e58:	f1 f7       	brne	.-4      	; 0x1e56 <Step1_StorePassword+0x148>
    1e5a:	9a 83       	std	Y+2, r25	; 0x02
    1e5c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		g_flag++; /* Move to the next step */
    1e5e:	80 91 77 00 	lds	r24, 0x0077
    1e62:	8f 5f       	subi	r24, 0xFF	; 255
    1e64:	80 93 77 00 	sts	0x0077, r24
    1e68:	0a c0       	rjmp	.+20     	; 0x1e7e <Step1_StorePassword+0x170>
	}
	else if ((g_status_flag == PASSWORD_UNMATCHED))
    1e6a:	80 91 76 00 	lds	r24, 0x0076
    1e6e:	88 23       	and	r24, r24
    1e70:	31 f4       	brne	.+12     	; 0x1e7e <Step1_StorePassword+0x170>
	{
		/* Send unmatched status to CONTROL_ECU */
		UART_sendByte(HMI_ECU_READY);
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	0e 94 ef 05 	call	0xbde	; 0xbde <UART_sendByte>
		UART_sendByte(PASSWORD_UNMATCHED);
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	0e 94 ef 05 	call	0xbde	; 0xbde <UART_sendByte>
	}
}
    1e7e:	2e 96       	adiw	r28, 0x0e	; 14
    1e80:	0f b6       	in	r0, 0x3f	; 63
    1e82:	f8 94       	cli
    1e84:	de bf       	out	0x3e, r29	; 62
    1e86:	0f be       	out	0x3f, r0	; 63
    1e88:	cd bf       	out	0x3d, r28	; 61
    1e8a:	cf 91       	pop	r28
    1e8c:	df 91       	pop	r29
    1e8e:	08 95       	ret

00001e90 <Step2_MainOptions>:

void Step2_MainOptions(void)
{
    1e90:	df 93       	push	r29
    1e92:	cf 93       	push	r28
    1e94:	0f 92       	push	r0
    1e96:	cd b7       	in	r28, 0x3d	; 61
    1e98:	de b7       	in	r29, 0x3e	; 62
	static uint8 tryCounter = 0; /* Counter for password attempts */
	uint8 choice = 0;
    1e9a:	19 82       	std	Y+1, r1	; 0x01

	/* Wait for CONTROL_ECU to be ready */
	while (UART_recieveByte() != CONTROL_ECU_READY);
    1e9c:	0e 94 06 06 	call	0xc0c	; 0xc0c <UART_recieveByte>
    1ea0:	81 30       	cpi	r24, 0x01	; 1
    1ea2:	e1 f7       	brne	.-8      	; 0x1e9c <Step2_MainOptions+0xc>
	choice = UART_recieveByte(); /* Get user choice */
    1ea4:	0e 94 06 06 	call	0xc0c	; 0xc0c <UART_recieveByte>
    1ea8:	89 83       	std	Y+1, r24	; 0x01
	while (UART_recieveByte() != CONTROL_ECU_READY);
    1eaa:	0e 94 06 06 	call	0xc0c	; 0xc0c <UART_recieveByte>
    1eae:	81 30       	cpi	r24, 0x01	; 1
    1eb0:	e1 f7       	brne	.-8      	; 0x1eaa <Step2_MainOptions+0x1a>
	receivePassword(password); /* Receive entered password */
    1eb2:	8a e7       	ldi	r24, 0x7A	; 122
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	0e 94 c5 10 	call	0x218a	; 0x218a <receivePassword>

	/* Read stored password from EEPROM */
	EEPROM_readByte(EEPROM_ADDRESS, password_stored, PASSWORD_LENGTH);
    1eba:	24 e8       	ldi	r18, 0x84	; 132
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	b9 01       	movw	r22, r18
    1ec4:	45 e0       	ldi	r20, 0x05	; 5
    1ec6:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <EEPROM_readByte>
	/* Check if entered password matches stored password */
	g_status_flag = Step4_CheckPassword(password_stored, password);
    1eca:	84 e8       	ldi	r24, 0x84	; 132
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	2a e7       	ldi	r18, 0x7A	; 122
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	b9 01       	movw	r22, r18
    1ed4:	0e 94 74 10 	call	0x20e8	; 0x20e8 <Step4_CheckPassword>
    1ed8:	80 93 76 00 	sts	0x0076, r24

	/* Send status to CONTROL_ECU */
	UART_sendByte(HMI_ECU_READY);
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	0e 94 ef 05 	call	0xbde	; 0xbde <UART_sendByte>
	UART_sendByte(g_status_flag);
    1ee2:	80 91 76 00 	lds	r24, 0x0076
    1ee6:	0e 94 ef 05 	call	0xbde	; 0xbde <UART_sendByte>

	if (g_status_flag == PASSWORD_MATCHED)
    1eea:	80 91 76 00 	lds	r24, 0x0076
    1eee:	81 30       	cpi	r24, 0x01	; 1
    1ef0:	91 f4       	brne	.+36     	; 0x1f16 <Step2_MainOptions+0x86>
	{
		if (0 == choice) /* Unlock door option */
    1ef2:	89 81       	ldd	r24, Y+1	; 0x01
    1ef4:	88 23       	and	r24, r24
    1ef6:	19 f4       	brne	.+6      	; 0x1efe <Step2_MainOptions+0x6e>
		{
			Step3_UnlockDoor();
    1ef8:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <Step3_UnlockDoor>
    1efc:	21 c0       	rjmp	.+66     	; 0x1f40 <Step2_MainOptions+0xb0>
		}
		else if (1 == choice) /* Change password option */
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
    1f00:	81 30       	cpi	r24, 0x01	; 1
    1f02:	f1 f4       	brne	.+60     	; 0x1f40 <Step2_MainOptions+0xb0>
		{
			while (UART_recieveByte() != CONTROL_ECU_READY);
    1f04:	0e 94 06 06 	call	0xc0c	; 0xc0c <UART_recieveByte>
    1f08:	81 30       	cpi	r24, 0x01	; 1
    1f0a:	e1 f7       	brne	.-8      	; 0x1f04 <Step2_MainOptions+0x74>
			g_flag = UART_recieveByte(); /* Get the new flag from CONTROL_ECU */
    1f0c:	0e 94 06 06 	call	0xc0c	; 0xc0c <UART_recieveByte>
    1f10:	80 93 77 00 	sts	0x0077, r24
    1f14:	15 c0       	rjmp	.+42     	; 0x1f40 <Step2_MainOptions+0xb0>
		}
	}
	else
	{
		while (UART_recieveByte() != CONTROL_ECU_READY);
    1f16:	0e 94 06 06 	call	0xc0c	; 0xc0c <UART_recieveByte>
    1f1a:	81 30       	cpi	r24, 0x01	; 1
    1f1c:	e1 f7       	brne	.-8      	; 0x1f16 <Step2_MainOptions+0x86>
		g_flag = UART_recieveByte(); /* Get the new flag */
    1f1e:	0e 94 06 06 	call	0xc0c	; 0xc0c <UART_recieveByte>
    1f22:	80 93 77 00 	sts	0x0077, r24
		tryCounter++;
    1f26:	80 91 79 00 	lds	r24, 0x0079
    1f2a:	8f 5f       	subi	r24, 0xFF	; 255
    1f2c:	80 93 79 00 	sts	0x0079, r24

		/* Check if maximum tries exceeded */
		if (tryCounter == MAX_TRY_COUNTER)
    1f30:	80 91 79 00 	lds	r24, 0x0079
    1f34:	83 30       	cpi	r24, 0x03	; 3
    1f36:	21 f4       	brne	.+8      	; 0x1f40 <Step2_MainOptions+0xb0>
		{
			tryCounter = 0; /* Reset try counter */
    1f38:	10 92 79 00 	sts	0x0079, r1
			Step5_UnmatchedPasswordHandling(); /* Handle unmatched password scenario */
    1f3c:	0e 94 a9 10 	call	0x2152	; 0x2152 <Step5_UnmatchedPasswordHandling>
		}
	}
}
    1f40:	0f 90       	pop	r0
    1f42:	cf 91       	pop	r28
    1f44:	df 91       	pop	r29
    1f46:	08 95       	ret

00001f48 <Step3_UnlockDoor>:

void Step3_UnlockDoor(void)
{
    1f48:	df 93       	push	r29
    1f4a:	cf 93       	push	r28
    1f4c:	cd b7       	in	r28, 0x3d	; 61
    1f4e:	de b7       	in	r29, 0x3e	; 62
    1f50:	2f 97       	sbiw	r28, 0x0f	; 15
    1f52:	0f b6       	in	r0, 0x3f	; 63
    1f54:	f8 94       	cli
    1f56:	de bf       	out	0x3e, r29	; 62
    1f58:	0f be       	out	0x3f, r0	; 63
    1f5a:	cd bf       	out	0x3d, r28	; 61
	uint8 PIR_Flag = 0;
    1f5c:	1f 86       	std	Y+15, r1	; 0x0f

	/* Rotate motor to unlock the door */
	DC_Motor_Rotate(DC_MOTOR_CW, 100);
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	64 e6       	ldi	r22, 0x64	; 100
    1f62:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <DC_Motor_Rotate>
	Timer_setCallBack(timer_increase_ticks, TIMER1);
    1f66:	8b ee       	ldi	r24, 0xEB	; 235
    1f68:	90 e1       	ldi	r25, 0x10	; 16
    1f6a:	61 e0       	ldi	r22, 0x01	; 1
    1f6c:	0e 94 b3 07 	call	0xf66	; 0xf66 <Timer_setCallBack>
	Timer_init(&timer1_configurations);	/* Initialize the timer */
    1f70:	88 e6       	ldi	r24, 0x68	; 104
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <Timer_init>

	g_tick = 0;	/* Reset tick counter */
    1f78:	10 92 78 00 	sts	0x0078, r1
	while (g_tick < 15);	/* Wait for 15 seconds */
    1f7c:	80 91 78 00 	lds	r24, 0x0078
    1f80:	8f 30       	cpi	r24, 0x0F	; 15
    1f82:	e0 f3       	brcs	.-8      	; 0x1f7c <Step3_UnlockDoor+0x34>
	Timer_deInit();	/* Deinitialize the timer */
    1f84:	0e 94 a7 08 	call	0x114e	; 0x114e <Timer_deInit>
	DC_Motor_Rotate(DC_MOTOR_STOP, 0); /* Stop motor */
    1f88:	82 e0       	ldi	r24, 0x02	; 2
    1f8a:	60 e0       	ldi	r22, 0x00	; 0
    1f8c:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <DC_Motor_Rotate>

	/* Check PIR sensor state */
	PIR_Flag = PIR_getState();
    1f90:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <PIR_getState>
    1f94:	8f 87       	std	Y+15, r24	; 0x0f
	UART_sendByte(HMI_ECU_READY);
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	0e 94 ef 05 	call	0xbde	; 0xbde <UART_sendByte>
	UART_sendByte(PIR_Flag);
    1f9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f9e:	0e 94 ef 05 	call	0xbde	; 0xbde <UART_sendByte>
    1fa2:	7c c0       	rjmp	.+248    	; 0x209c <Step3_UnlockDoor+0x154>

	while (PIR_Flag == 1) /* Keep motor stopped while motion is detected */
	{
		DC_Motor_Rotate(DC_MOTOR_STOP, 0);
    1fa4:	82 e0       	ldi	r24, 0x02	; 2
    1fa6:	60 e0       	ldi	r22, 0x00	; 0
    1fa8:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <DC_Motor_Rotate>
		PIR_Flag = PIR_getState();
    1fac:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <PIR_getState>
    1fb0:	8f 87       	std	Y+15, r24	; 0x0f
		UART_sendByte(PIR_Flag);
    1fb2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fb4:	0e 94 ef 05 	call	0xbde	; 0xbde <UART_sendByte>
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	a8 ec       	ldi	r26, 0xC8	; 200
    1fbe:	b2 e4       	ldi	r27, 0x42	; 66
    1fc0:	8b 87       	std	Y+11, r24	; 0x0b
    1fc2:	9c 87       	std	Y+12, r25	; 0x0c
    1fc4:	ad 87       	std	Y+13, r26	; 0x0d
    1fc6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fca:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fce:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	4a ef       	ldi	r20, 0xFA	; 250
    1fd6:	54 e4       	ldi	r21, 0x44	; 68
    1fd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	8f 83       	std	Y+7, r24	; 0x07
    1fe2:	98 87       	std	Y+8, r25	; 0x08
    1fe4:	a9 87       	std	Y+9, r26	; 0x09
    1fe6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fe8:	6f 81       	ldd	r22, Y+7	; 0x07
    1fea:	78 85       	ldd	r23, Y+8	; 0x08
    1fec:	89 85       	ldd	r24, Y+9	; 0x09
    1fee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	40 e8       	ldi	r20, 0x80	; 128
    1ff6:	5f e3       	ldi	r21, 0x3F	; 63
    1ff8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ffc:	88 23       	and	r24, r24
    1ffe:	2c f4       	brge	.+10     	; 0x200a <Step3_UnlockDoor+0xc2>
		__ticks = 1;
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	9e 83       	std	Y+6, r25	; 0x06
    2006:	8d 83       	std	Y+5, r24	; 0x05
    2008:	3f c0       	rjmp	.+126    	; 0x2088 <Step3_UnlockDoor+0x140>
	else if (__tmp > 65535)
    200a:	6f 81       	ldd	r22, Y+7	; 0x07
    200c:	78 85       	ldd	r23, Y+8	; 0x08
    200e:	89 85       	ldd	r24, Y+9	; 0x09
    2010:	9a 85       	ldd	r25, Y+10	; 0x0a
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	3f ef       	ldi	r19, 0xFF	; 255
    2016:	4f e7       	ldi	r20, 0x7F	; 127
    2018:	57 e4       	ldi	r21, 0x47	; 71
    201a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    201e:	18 16       	cp	r1, r24
    2020:	4c f5       	brge	.+82     	; 0x2074 <Step3_UnlockDoor+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2022:	6b 85       	ldd	r22, Y+11	; 0x0b
    2024:	7c 85       	ldd	r23, Y+12	; 0x0c
    2026:	8d 85       	ldd	r24, Y+13	; 0x0d
    2028:	9e 85       	ldd	r25, Y+14	; 0x0e
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	40 e2       	ldi	r20, 0x20	; 32
    2030:	51 e4       	ldi	r21, 0x41	; 65
    2032:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	bc 01       	movw	r22, r24
    203c:	cd 01       	movw	r24, r26
    203e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	9e 83       	std	Y+6, r25	; 0x06
    2048:	8d 83       	std	Y+5, r24	; 0x05
    204a:	0f c0       	rjmp	.+30     	; 0x206a <Step3_UnlockDoor+0x122>
    204c:	88 ec       	ldi	r24, 0xC8	; 200
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	9c 83       	std	Y+4, r25	; 0x04
    2052:	8b 83       	std	Y+3, r24	; 0x03
    2054:	8b 81       	ldd	r24, Y+3	; 0x03
    2056:	9c 81       	ldd	r25, Y+4	; 0x04
    2058:	01 97       	sbiw	r24, 0x01	; 1
    205a:	f1 f7       	brne	.-4      	; 0x2058 <Step3_UnlockDoor+0x110>
    205c:	9c 83       	std	Y+4, r25	; 0x04
    205e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2060:	8d 81       	ldd	r24, Y+5	; 0x05
    2062:	9e 81       	ldd	r25, Y+6	; 0x06
    2064:	01 97       	sbiw	r24, 0x01	; 1
    2066:	9e 83       	std	Y+6, r25	; 0x06
    2068:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    206a:	8d 81       	ldd	r24, Y+5	; 0x05
    206c:	9e 81       	ldd	r25, Y+6	; 0x06
    206e:	00 97       	sbiw	r24, 0x00	; 0
    2070:	69 f7       	brne	.-38     	; 0x204c <Step3_UnlockDoor+0x104>
    2072:	14 c0       	rjmp	.+40     	; 0x209c <Step3_UnlockDoor+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2074:	6f 81       	ldd	r22, Y+7	; 0x07
    2076:	78 85       	ldd	r23, Y+8	; 0x08
    2078:	89 85       	ldd	r24, Y+9	; 0x09
    207a:	9a 85       	ldd	r25, Y+10	; 0x0a
    207c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	9e 83       	std	Y+6, r25	; 0x06
    2086:	8d 83       	std	Y+5, r24	; 0x05
    2088:	8d 81       	ldd	r24, Y+5	; 0x05
    208a:	9e 81       	ldd	r25, Y+6	; 0x06
    208c:	9a 83       	std	Y+2, r25	; 0x02
    208e:	89 83       	std	Y+1, r24	; 0x01
    2090:	89 81       	ldd	r24, Y+1	; 0x01
    2092:	9a 81       	ldd	r25, Y+2	; 0x02
    2094:	01 97       	sbiw	r24, 0x01	; 1
    2096:	f1 f7       	brne	.-4      	; 0x2094 <Step3_UnlockDoor+0x14c>
    2098:	9a 83       	std	Y+2, r25	; 0x02
    209a:	89 83       	std	Y+1, r24	; 0x01
	/* Check PIR sensor state */
	PIR_Flag = PIR_getState();
	UART_sendByte(HMI_ECU_READY);
	UART_sendByte(PIR_Flag);

	while (PIR_Flag == 1) /* Keep motor stopped while motion is detected */
    209c:	8f 85       	ldd	r24, Y+15	; 0x0f
    209e:	81 30       	cpi	r24, 0x01	; 1
    20a0:	09 f4       	brne	.+2      	; 0x20a4 <Step3_UnlockDoor+0x15c>
    20a2:	80 cf       	rjmp	.-256    	; 0x1fa4 <Step3_UnlockDoor+0x5c>
		UART_sendByte(PIR_Flag);
		_delay_ms(100);
	}

	/* Rotate motor to lock the door */
	DC_Motor_Rotate(DC_MOTOR_ACW, 100);
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	64 e6       	ldi	r22, 0x64	; 100
    20a8:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <DC_Motor_Rotate>
	Timer_setCallBack(timer_increase_ticks, TIMER1);
    20ac:	8b ee       	ldi	r24, 0xEB	; 235
    20ae:	90 e1       	ldi	r25, 0x10	; 16
    20b0:	61 e0       	ldi	r22, 0x01	; 1
    20b2:	0e 94 b3 07 	call	0xf66	; 0xf66 <Timer_setCallBack>
	Timer_init(&timer1_configurations);	/* Initialize the timer */
    20b6:	88 e6       	ldi	r24, 0x68	; 104
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <Timer_init>

	g_tick = 0;	/* Reset tick counter */
    20be:	10 92 78 00 	sts	0x0078, r1
	while (g_tick < 15);	/* Wait for 15 seconds */
    20c2:	80 91 78 00 	lds	r24, 0x0078
    20c6:	8f 30       	cpi	r24, 0x0F	; 15
    20c8:	e0 f3       	brcs	.-8      	; 0x20c2 <Step3_UnlockDoor+0x17a>
	Timer_deInit();	/* Deinitialize the timer */
    20ca:	0e 94 a7 08 	call	0x114e	; 0x114e <Timer_deInit>
	DC_Motor_Rotate(DC_MOTOR_STOP, 0); /* Stop motor */
    20ce:	82 e0       	ldi	r24, 0x02	; 2
    20d0:	60 e0       	ldi	r22, 0x00	; 0
    20d2:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <DC_Motor_Rotate>
}
    20d6:	2f 96       	adiw	r28, 0x0f	; 15
    20d8:	0f b6       	in	r0, 0x3f	; 63
    20da:	f8 94       	cli
    20dc:	de bf       	out	0x3e, r29	; 62
    20de:	0f be       	out	0x3f, r0	; 63
    20e0:	cd bf       	out	0x3d, r28	; 61
    20e2:	cf 91       	pop	r28
    20e4:	df 91       	pop	r29
    20e6:	08 95       	ret

000020e8 <Step4_CheckPassword>:

uint8 Step4_CheckPassword(uint8* password, uint8* password_confirm)
{
    20e8:	df 93       	push	r29
    20ea:	cf 93       	push	r28
    20ec:	00 d0       	rcall	.+0      	; 0x20ee <Step4_CheckPassword+0x6>
    20ee:	00 d0       	rcall	.+0      	; 0x20f0 <Step4_CheckPassword+0x8>
    20f0:	00 d0       	rcall	.+0      	; 0x20f2 <Step4_CheckPassword+0xa>
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
    20f6:	9b 83       	std	Y+3, r25	; 0x03
    20f8:	8a 83       	std	Y+2, r24	; 0x02
    20fa:	7d 83       	std	Y+5, r23	; 0x05
    20fc:	6c 83       	std	Y+4, r22	; 0x04
	/* Check if the passwords match */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
    20fe:	19 82       	std	Y+1, r1	; 0x01
    2100:	19 c0       	rjmp	.+50     	; 0x2134 <Step4_CheckPassword+0x4c>
	{
		if (password[i] != password_confirm[i])
    2102:	89 81       	ldd	r24, Y+1	; 0x01
    2104:	28 2f       	mov	r18, r24
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	8a 81       	ldd	r24, Y+2	; 0x02
    210a:	9b 81       	ldd	r25, Y+3	; 0x03
    210c:	fc 01       	movw	r30, r24
    210e:	e2 0f       	add	r30, r18
    2110:	f3 1f       	adc	r31, r19
    2112:	40 81       	ld	r20, Z
    2114:	89 81       	ldd	r24, Y+1	; 0x01
    2116:	28 2f       	mov	r18, r24
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	8c 81       	ldd	r24, Y+4	; 0x04
    211c:	9d 81       	ldd	r25, Y+5	; 0x05
    211e:	fc 01       	movw	r30, r24
    2120:	e2 0f       	add	r30, r18
    2122:	f3 1f       	adc	r31, r19
    2124:	80 81       	ld	r24, Z
    2126:	48 17       	cp	r20, r24
    2128:	11 f0       	breq	.+4      	; 0x212e <Step4_CheckPassword+0x46>
		{
			return PASSWORD_UNMATCHED; /* Return unmatched status */
    212a:	1e 82       	std	Y+6, r1	; 0x06
    212c:	08 c0       	rjmp	.+16     	; 0x213e <Step4_CheckPassword+0x56>
}

uint8 Step4_CheckPassword(uint8* password, uint8* password_confirm)
{
	/* Check if the passwords match */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
    212e:	89 81       	ldd	r24, Y+1	; 0x01
    2130:	8f 5f       	subi	r24, 0xFF	; 255
    2132:	89 83       	std	Y+1, r24	; 0x01
    2134:	89 81       	ldd	r24, Y+1	; 0x01
    2136:	85 30       	cpi	r24, 0x05	; 5
    2138:	20 f3       	brcs	.-56     	; 0x2102 <Step4_CheckPassword+0x1a>
		if (password[i] != password_confirm[i])
		{
			return PASSWORD_UNMATCHED; /* Return unmatched status */
		}
	}
	return PASSWORD_MATCHED; /* Return matched status */
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	8e 83       	std	Y+6, r24	; 0x06
    213e:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2140:	26 96       	adiw	r28, 0x06	; 6
    2142:	0f b6       	in	r0, 0x3f	; 63
    2144:	f8 94       	cli
    2146:	de bf       	out	0x3e, r29	; 62
    2148:	0f be       	out	0x3f, r0	; 63
    214a:	cd bf       	out	0x3d, r28	; 61
    214c:	cf 91       	pop	r28
    214e:	df 91       	pop	r29
    2150:	08 95       	ret

00002152 <Step5_UnmatchedPasswordHandling>:

void Step5_UnmatchedPasswordHandling(void)
{
    2152:	df 93       	push	r29
    2154:	cf 93       	push	r28
    2156:	cd b7       	in	r28, 0x3d	; 61
    2158:	de b7       	in	r29, 0x3e	; 62
	/* Activate buzzer for 1 minute on password mismatch */
	Buzzer_on();
    215a:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <Buzzer_on>
	Timer_setCallBack(timer_increase_ticks, TIMER1);
    215e:	8b ee       	ldi	r24, 0xEB	; 235
    2160:	90 e1       	ldi	r25, 0x10	; 16
    2162:	61 e0       	ldi	r22, 0x01	; 1
    2164:	0e 94 b3 07 	call	0xf66	; 0xf66 <Timer_setCallBack>
	Timer_init(&timer1_configurations);	/* Initialize the timer */
    2168:	88 e6       	ldi	r24, 0x68	; 104
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <Timer_init>

	g_tick = 0;	/* Reset tick counter */
    2170:	10 92 78 00 	sts	0x0078, r1
	while (g_tick < 60);	/* Wait for 1 minute */
    2174:	80 91 78 00 	lds	r24, 0x0078
    2178:	8c 33       	cpi	r24, 0x3C	; 60
    217a:	e0 f3       	brcs	.-8      	; 0x2174 <Step5_UnmatchedPasswordHandling+0x22>
	Timer_deInit();	/* Deinitialize the timer */
    217c:	0e 94 a7 08 	call	0x114e	; 0x114e <Timer_deInit>
	Buzzer_off();
    2180:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <Buzzer_off>
}
    2184:	cf 91       	pop	r28
    2186:	df 91       	pop	r29
    2188:	08 95       	ret

0000218a <receivePassword>:

void receivePassword(uint8* password)
{
    218a:	0f 93       	push	r16
    218c:	1f 93       	push	r17
    218e:	df 93       	push	r29
    2190:	cf 93       	push	r28
    2192:	00 d0       	rcall	.+0      	; 0x2194 <receivePassword+0xa>
    2194:	0f 92       	push	r0
    2196:	cd b7       	in	r28, 0x3d	; 61
    2198:	de b7       	in	r29, 0x3e	; 62
    219a:	9b 83       	std	Y+3, r25	; 0x03
    219c:	8a 83       	std	Y+2, r24	; 0x02
	/* Receive password from UART */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
    219e:	19 82       	std	Y+1, r1	; 0x01
    21a0:	0f c0       	rjmp	.+30     	; 0x21c0 <receivePassword+0x36>
	{
		password[i] = UART_recieveByte();
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	28 2f       	mov	r18, r24
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	8a 81       	ldd	r24, Y+2	; 0x02
    21aa:	9b 81       	ldd	r25, Y+3	; 0x03
    21ac:	8c 01       	movw	r16, r24
    21ae:	02 0f       	add	r16, r18
    21b0:	13 1f       	adc	r17, r19
    21b2:	0e 94 06 06 	call	0xc0c	; 0xc0c <UART_recieveByte>
    21b6:	f8 01       	movw	r30, r16
    21b8:	80 83       	st	Z, r24
}

void receivePassword(uint8* password)
{
	/* Receive password from UART */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++)
    21ba:	89 81       	ldd	r24, Y+1	; 0x01
    21bc:	8f 5f       	subi	r24, 0xFF	; 255
    21be:	89 83       	std	Y+1, r24	; 0x01
    21c0:	89 81       	ldd	r24, Y+1	; 0x01
    21c2:	85 30       	cpi	r24, 0x05	; 5
    21c4:	70 f3       	brcs	.-36     	; 0x21a2 <receivePassword+0x18>
	{
		password[i] = UART_recieveByte();
	}
}
    21c6:	0f 90       	pop	r0
    21c8:	0f 90       	pop	r0
    21ca:	0f 90       	pop	r0
    21cc:	cf 91       	pop	r28
    21ce:	df 91       	pop	r29
    21d0:	1f 91       	pop	r17
    21d2:	0f 91       	pop	r16
    21d4:	08 95       	ret

000021d6 <timer_increase_ticks>:

void timer_increase_ticks(void)
{
    21d6:	df 93       	push	r29
    21d8:	cf 93       	push	r28
    21da:	cd b7       	in	r28, 0x3d	; 61
    21dc:	de b7       	in	r29, 0x3e	; 62
	g_tick++; 	/* Increment the tick count */
    21de:	80 91 78 00 	lds	r24, 0x0078
    21e2:	8f 5f       	subi	r24, 0xFF	; 255
    21e4:	80 93 78 00 	sts	0x0078, r24
}
    21e8:	cf 91       	pop	r28
    21ea:	df 91       	pop	r29
    21ec:	08 95       	ret

000021ee <__divmodhi4>:
    21ee:	97 fb       	bst	r25, 7
    21f0:	09 2e       	mov	r0, r25
    21f2:	07 26       	eor	r0, r23
    21f4:	0a d0       	rcall	.+20     	; 0x220a <__divmodhi4_neg1>
    21f6:	77 fd       	sbrc	r23, 7
    21f8:	04 d0       	rcall	.+8      	; 0x2202 <__divmodhi4_neg2>
    21fa:	2e d0       	rcall	.+92     	; 0x2258 <__udivmodhi4>
    21fc:	06 d0       	rcall	.+12     	; 0x220a <__divmodhi4_neg1>
    21fe:	00 20       	and	r0, r0
    2200:	1a f4       	brpl	.+6      	; 0x2208 <__divmodhi4_exit>

00002202 <__divmodhi4_neg2>:
    2202:	70 95       	com	r23
    2204:	61 95       	neg	r22
    2206:	7f 4f       	sbci	r23, 0xFF	; 255

00002208 <__divmodhi4_exit>:
    2208:	08 95       	ret

0000220a <__divmodhi4_neg1>:
    220a:	f6 f7       	brtc	.-4      	; 0x2208 <__divmodhi4_exit>
    220c:	90 95       	com	r25
    220e:	81 95       	neg	r24
    2210:	9f 4f       	sbci	r25, 0xFF	; 255
    2212:	08 95       	ret

00002214 <__udivmodsi4>:
    2214:	a1 e2       	ldi	r26, 0x21	; 33
    2216:	1a 2e       	mov	r1, r26
    2218:	aa 1b       	sub	r26, r26
    221a:	bb 1b       	sub	r27, r27
    221c:	fd 01       	movw	r30, r26
    221e:	0d c0       	rjmp	.+26     	; 0x223a <__udivmodsi4_ep>

00002220 <__udivmodsi4_loop>:
    2220:	aa 1f       	adc	r26, r26
    2222:	bb 1f       	adc	r27, r27
    2224:	ee 1f       	adc	r30, r30
    2226:	ff 1f       	adc	r31, r31
    2228:	a2 17       	cp	r26, r18
    222a:	b3 07       	cpc	r27, r19
    222c:	e4 07       	cpc	r30, r20
    222e:	f5 07       	cpc	r31, r21
    2230:	20 f0       	brcs	.+8      	; 0x223a <__udivmodsi4_ep>
    2232:	a2 1b       	sub	r26, r18
    2234:	b3 0b       	sbc	r27, r19
    2236:	e4 0b       	sbc	r30, r20
    2238:	f5 0b       	sbc	r31, r21

0000223a <__udivmodsi4_ep>:
    223a:	66 1f       	adc	r22, r22
    223c:	77 1f       	adc	r23, r23
    223e:	88 1f       	adc	r24, r24
    2240:	99 1f       	adc	r25, r25
    2242:	1a 94       	dec	r1
    2244:	69 f7       	brne	.-38     	; 0x2220 <__udivmodsi4_loop>
    2246:	60 95       	com	r22
    2248:	70 95       	com	r23
    224a:	80 95       	com	r24
    224c:	90 95       	com	r25
    224e:	9b 01       	movw	r18, r22
    2250:	ac 01       	movw	r20, r24
    2252:	bd 01       	movw	r22, r26
    2254:	cf 01       	movw	r24, r30
    2256:	08 95       	ret

00002258 <__udivmodhi4>:
    2258:	aa 1b       	sub	r26, r26
    225a:	bb 1b       	sub	r27, r27
    225c:	51 e1       	ldi	r21, 0x11	; 17
    225e:	07 c0       	rjmp	.+14     	; 0x226e <__udivmodhi4_ep>

00002260 <__udivmodhi4_loop>:
    2260:	aa 1f       	adc	r26, r26
    2262:	bb 1f       	adc	r27, r27
    2264:	a6 17       	cp	r26, r22
    2266:	b7 07       	cpc	r27, r23
    2268:	10 f0       	brcs	.+4      	; 0x226e <__udivmodhi4_ep>
    226a:	a6 1b       	sub	r26, r22
    226c:	b7 0b       	sbc	r27, r23

0000226e <__udivmodhi4_ep>:
    226e:	88 1f       	adc	r24, r24
    2270:	99 1f       	adc	r25, r25
    2272:	5a 95       	dec	r21
    2274:	a9 f7       	brne	.-22     	; 0x2260 <__udivmodhi4_loop>
    2276:	80 95       	com	r24
    2278:	90 95       	com	r25
    227a:	bc 01       	movw	r22, r24
    227c:	cd 01       	movw	r24, r26
    227e:	08 95       	ret

00002280 <__prologue_saves__>:
    2280:	2f 92       	push	r2
    2282:	3f 92       	push	r3
    2284:	4f 92       	push	r4
    2286:	5f 92       	push	r5
    2288:	6f 92       	push	r6
    228a:	7f 92       	push	r7
    228c:	8f 92       	push	r8
    228e:	9f 92       	push	r9
    2290:	af 92       	push	r10
    2292:	bf 92       	push	r11
    2294:	cf 92       	push	r12
    2296:	df 92       	push	r13
    2298:	ef 92       	push	r14
    229a:	ff 92       	push	r15
    229c:	0f 93       	push	r16
    229e:	1f 93       	push	r17
    22a0:	cf 93       	push	r28
    22a2:	df 93       	push	r29
    22a4:	cd b7       	in	r28, 0x3d	; 61
    22a6:	de b7       	in	r29, 0x3e	; 62
    22a8:	ca 1b       	sub	r28, r26
    22aa:	db 0b       	sbc	r29, r27
    22ac:	0f b6       	in	r0, 0x3f	; 63
    22ae:	f8 94       	cli
    22b0:	de bf       	out	0x3e, r29	; 62
    22b2:	0f be       	out	0x3f, r0	; 63
    22b4:	cd bf       	out	0x3d, r28	; 61
    22b6:	09 94       	ijmp

000022b8 <__epilogue_restores__>:
    22b8:	2a 88       	ldd	r2, Y+18	; 0x12
    22ba:	39 88       	ldd	r3, Y+17	; 0x11
    22bc:	48 88       	ldd	r4, Y+16	; 0x10
    22be:	5f 84       	ldd	r5, Y+15	; 0x0f
    22c0:	6e 84       	ldd	r6, Y+14	; 0x0e
    22c2:	7d 84       	ldd	r7, Y+13	; 0x0d
    22c4:	8c 84       	ldd	r8, Y+12	; 0x0c
    22c6:	9b 84       	ldd	r9, Y+11	; 0x0b
    22c8:	aa 84       	ldd	r10, Y+10	; 0x0a
    22ca:	b9 84       	ldd	r11, Y+9	; 0x09
    22cc:	c8 84       	ldd	r12, Y+8	; 0x08
    22ce:	df 80       	ldd	r13, Y+7	; 0x07
    22d0:	ee 80       	ldd	r14, Y+6	; 0x06
    22d2:	fd 80       	ldd	r15, Y+5	; 0x05
    22d4:	0c 81       	ldd	r16, Y+4	; 0x04
    22d6:	1b 81       	ldd	r17, Y+3	; 0x03
    22d8:	aa 81       	ldd	r26, Y+2	; 0x02
    22da:	b9 81       	ldd	r27, Y+1	; 0x01
    22dc:	ce 0f       	add	r28, r30
    22de:	d1 1d       	adc	r29, r1
    22e0:	0f b6       	in	r0, 0x3f	; 63
    22e2:	f8 94       	cli
    22e4:	de bf       	out	0x3e, r29	; 62
    22e6:	0f be       	out	0x3f, r0	; 63
    22e8:	cd bf       	out	0x3d, r28	; 61
    22ea:	ed 01       	movw	r28, r26
    22ec:	08 95       	ret

000022ee <_exit>:
    22ee:	f8 94       	cli

000022f0 <__stop_program>:
    22f0:	ff cf       	rjmp	.-2      	; 0x22f0 <__stop_program>
